# -*- coding: utf-8 -*-

프로그램정보 = [
    ['프로그램명','SkyBot-eBEST'],
    ['Version','1.4'],
    ['개발일','2018-02-28'],
    ['2018-06-04','포트폴리오 더블클릭으로 삭제 기능 추가'],
    ['2018-05-23','시장가매도, query->ActiveX 오류수정'],
    ['2018-07-19','국내선물옵션, 해외선물옵션에 필요한 모듈을 XAQuery, XAReals에 추가'],
    ['2018-07-19','검색식에서 종목이 빠지는 경우, 손절 및 익절이 나가지 않는 부분 추가'],
    ['2018-07-20','체결시간과 종목검색에서 종목이 빠지는 시간차가 있는 경우 주문이 나가지 않는 부분추가'],
    ['2018-07-25','종목검색 중지시 계속 검색된 종목이 들어오는 문제 수정'],
    ['2018-08-01','종목검색, Chartindex에서 식별자를 사용하는 방법 통일'],
    ['2018-08-01','한번에 수량이 다 체결된 경우 포트에 반영되지 않는 것을 수정'],
    ['2018-08-07','조건검색시 다른 조건검색과 섞이는 것을 수정'],
    ['2018-08-07','API메뉴중 백업에 OnReceiveMessage 추가']
]

import sys, os
import datetime, time
import win32com.client
import ctypes
import webbrowser
import numpy as np
import pandas as pd
import logging
import timeit
import pyqtgraph as pg
import math
import copy
import locale
import collections
import operator
import platform
from configparser import ConfigParser

from PyQt5 import QtCore, QtGui, QtWidgets, QAxContainer, uic
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtTest import *
from numpy import NaN, Inf, arange, isscalar, asarray, array
from pandas import DataFrame, Series
from threading import Timer
from enum import Enum
from bisect import bisect
from mss import mss
from collections import Counter
from PIL import Image
import talib
from talib import MA_Type
import ta
import qtmodern.styles
import qtmodern.windows

from multiprocessing import Process, Queue
import multiprocessing as mp

from XASessions import *
from XAQueries import *
from XAReals import *
from Utils import *
#from FileWatcher import *

#import pythoncom
#import sqlite3
#import inspect
#import pickle
#import uuid
#import base64
#import subprocess
#import pandas.io.sql as pdsql
#import win32gui
#import logging.handlers

#from subprocess import Popen
#from PIL import ImageGrab
#from multiprocessing import Pool, Process, Queue

pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)
#pd.set_option('max_colwidth', None)
pd.set_option('max_colwidth', -1)

# 시스템 기본 로케일 사용
locale.setlocale(locale.LC_ALL, '')  

주문지연 = 3000

DATABASE = 'DATA\\mymoneybot.sqlite'
UI_DIR = "UI\\"

np.warnings.filterwarnings('ignore')

SELFID = ''

os_type = platform.platform()
print('\r')
print('OS 유형 :', os_type)

콜등락율 = 0
풋등락율 = 0

drate_scale_factor = 1

선물_전일종가 = 0

선물_전저 = 0
선물_전고 = 0
선물_종가 = 0
선물_피봇 = 0
선물_시가 = 0

선물_저가 = 0

선물_현재가 = 0
선물_과거가 = 0
선물_대비 = 0
선물_전일대비 = 0
선물_등락율 = 0

선물_고가 = 0
선물_진폭 = 0

SP500_전저 = 0
SP500_전고 = 0
SP500_종가 = 0
SP500_피봇 = 0
SP500_시가 = 0

SP500_저가 = 0

SP500_현재가 = 0
SP500_과거가 = 0
SP500_대비 = 0
SP500_전일대비 = 0
SP500_등락율 = 0

SP500_고가 = 0
SP500_진폭 = 0

DOW_전저 = 0
DOW_전고 = 0
DOW_종가 = 0
DOW_피봇 = 0
DOW_시가 = 0

DOW_저가 = 0

DOW_현재가 = 0
DOW_과거가 = 0
DOW_대비 = 0
DOW_전일대비 = 0
DOW_등락율 = 0

DOW_고가 = 0
DOW_진폭 = 0

NASDAQ_전저 = 0
NASDAQ_전고 = 0
NASDAQ_종가 = 0
NASDAQ_피봇 = 0
NASDAQ_시가 = 0

NASDAQ_저가 = 0

NASDAQ_현재가 = 0
NASDAQ_과거가 = 0
NASDAQ_대비 = 0
NASDAQ_전일대비 = 0
NASDAQ_등락율 = 0

NASDAQ_고가 = 0
NASDAQ_진폭 = 0

WTI_전저 = 0
WTI_전고 = 0
WTI_종가 = 0
WTI_피봇 = 0
WTI_시가 = 0

WTI_저가 = 0

WTI_현재가 = 0
WTI_과거가 = 0
WTI_대비 = 0
WTI_전일대비 = 0
WTI_등락율 = 0

WTI_고가 = 0
WTI_진폭 = 0

EUROFX_전저 = 0
EUROFX_전고 = 0
EUROFX_종가 = 0
EUROFX_피봇 = 0
EUROFX_시가 = 0

EUROFX_저가 = 0

EUROFX_현재가 = 0
EUROFX_과거가 = 0
EUROFX_대비 = 0
EUROFX_전일대비 = 0
EUROFX_등락율 = 0

EUROFX_고가 = 0
EUROFX_진폭 = 0

HANGSENG_전저 = 0
HANGSENG_전고 = 0
HANGSENG_종가 = 0
HANGSENG_피봇 = 0
HANGSENG_시가 = 0

HANGSENG_저가 = 0

HANGSENG_현재가 = 0
HANGSENG_과거가 = 0
HANGSENG_대비 = 0
HANGSENG_전일대비 = 0
HANGSENG_등락율 = 0

HANGSENG_고가 = 0
HANGSENG_진폭 = 0

GOLD_전저 = 0
GOLD_전고 = 0
GOLD_종가 = 0
GOLD_피봇 = 0
GOLD_시가 = 0

GOLD_저가 = 0

GOLD_현재가 = 0
GOLD_과거가 = 0
GOLD_대비 = 0
GOLD_전일대비 = 0
GOLD_등락율 = 0

GOLD_고가 = 0
GOLD_진폭 = 0

CME_당일종가 = 0
DOW_당일종가 = 0
SP500_당일종가 = 0
NASDAQ_당일종가 = 0
WTI_당일종가 = 0
EUROFX_당일종가 = 0
HANGSENG_당일종가 = 0
GOLD_당일종가 = 0

FILE_HIGH_LOW_LIST = []

OPTION_BOARD_UPDATE_INTERVAL = 2

UI_STYLE = 'Horizontal_Large_View.ui'

#####################################################################################################################################################################
# Configuration Parser
parser = ConfigParser()
parser.read('skybot.ini')

# [0]. << Server Type >>
REAL_SERVER = parser.getboolean('Server Type', 'Real Server')

# [1]. << Month Info >>
KSE_START_HOUR = parser.getint('Month Info', 'KSE Start Hour')
CURRENT_MONTH = parser.get('Month Info', 'Current Month')
MONTH_FIRSTDAY = parser.get('Month Info', 'First Day of the Current Month')

# [2]. << Target Month Select : current month = 1, next month = 2 >>
TARGET_MONTH_SELECT = parser.getint('Target Month Select', 'Target Month Select')

# [3]. << Window Style >>
MODERN_WINDOW_DARK_STYLE = parser.getboolean('Window Style', 'Modern Dark Style')

# [4]. << User Switch = 'ON or OFF' >>
OPT_NEXT_MONTH = parser.getboolean('User Switch', 'Option Next Month Request')
TELEGRAM_SERVICE = parser.getboolean('User Switch', 'Telegram service')
MANGI_YAGAN = parser.getboolean('User Switch', 'Mangi Yagan')
AUTO_START = parser.getboolean('User Switch', 'Auto Start')
ResizeRowsToContents = parser.getboolean('User Switch', 'Resize Rows To Contents')
CROSS_HAIR_LINE = parser.getboolean('User Switch', 'Cross Hair Line')
SECOND_PLOT_SYNC = parser.getboolean('User Switch', 'Second Plot Sync')
ALL_QUOTE_REQUEST = parser.getboolean('User Switch', 'All Option Quote Request')

#print('TELEGRAM_SERVICE =', TELEGRAM_SERVICE)

# [5]. << Moving Average Type >>
MA_TYPE = parser.getint('Moving Average Type', 'MA Type')

# [6]. << Initial Value >>
HL_Depth = parser.getint('Initial Value', 'HL List Depth')
NightTime_PreStart_Hour = parser.getint('Initial Value', 'NightTime Pre-Start Hour')
ActvalCount = parser.getint('Initial Value', 'Actval count of the option pairs')
MY_COREVAL = parser.getfloat('Initial Value', 'My coreval')
ASYM_RATIO = parser.getfloat('Initial Value', 'Asymmetric Market Ratio')
ONEWAY_RATIO = parser.getfloat('Initial Value', 'OneWay Market Ratio')
GOLDEN_RATIO = parser.getfloat('Initial Value', 'Golden Ratio')
CROSS_COLOR_INTERVAL = parser.getint('Initial Value', 'Cross Coloring Interval(minute)')
MAIN_UPDATE_INTERVAL = parser.getfloat('Initial Value', 'Main Update Interval(msec)')
BIGCHART_UPDATE_INTERVAL = parser.getfloat('Initial Value', 'Big Chart Update Interval(msec)')
OPTION_BOARD_UPDATE_INTERVAL = parser.getint('Initial Value', 'Option Screen Board Update Interval(sec)')

# [7]. << Code of the Foreign Futures (H/M/U/Z) >>
SP500 = parser.get('Code of the Foreign Futures', 'S&P 500')
DOW = parser.get('Code of the Foreign Futures', 'DOW')
NASDAQ = parser.get('Code of the Foreign Futures', 'NASDAQ')
WTI = parser.get('Code of the Foreign Futures', 'WTI')
EUROFX = parser.get('Code of the Foreign Futures', 'EUROFX')
HANGSENG = parser.get('Code of the Foreign Futures', 'HANGSENG')
GOLD = parser.get('Code of the Foreign Futures', 'GOLD')

# [8]. << Supply & Demand Code Symbol of the Foreign Futures >>
KRWUSD = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'KRWUSD')
DOW_SND = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'DOW SND')
SP500_SND = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'S&P 500 SND')
NASDAQ_SND = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'NASDAQ SND')
WTI_SND = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'WTI SND')
EURUSD = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'EURUSD')
HANGSENG_SND = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'HANGSENG SND')
GOLD_SND = parser.get('Supply & Demand Code Symbol of the Foreign Futures', 'GOLD SND')

# [9]. << Telegram >>
TELEGRAM_START_TIME = parser.getint('Telegram', 'Telegram polling start time(minute) after service')
TELEGRAM_POLLING_INTERVAL = parser.getint('Telegram', 'Telegram polling interval(second)')
TELEGRAM_SEND_INTERVAL = parser.getint('Telegram', 'Telegram send interval(second)')

# [10]. << Rules >>
ONEWAY_THRESHOLD = parser.getint('Rules', 'Threshold of the institutional party supply & demand')
#####################################################################################################################################################################

if int(CURRENT_MONTH[4:6]) == 11:

    NEXT_MONTH = CURRENT_MONTH[0:4] + '12'
    MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH[0:4]) + 1) + '01'
elif int(CURRENT_MONTH[4:6]) == 12:
    NEXT_MONTH = repr(int(CURRENT_MONTH[0:4]) + 1) + '01'
    MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH[0:4]) + 1) + '02'
else:
    NEXT_MONTH = repr(int(CURRENT_MONTH) + 1)
    MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH) + 2)

CENTERVAL_UPPER = GOLDEN_RATIO
CENTERVAL_LOWER = GOLDEN_RATIO

pre_진성맥점 = [1.20, 2.50, 3.50, 4.85, 5.10, 5.50, 6.85, 7.10, 8.10]

pre_진성맥점.append(MY_COREVAL)
pre_진성맥점 = list(set(pre_진성맥점))
pre_진성맥점.sort()

DEFAULT_NODE_LIST = pre_진성맥점[:]

bms_node_val1 = 0
bms_node_val2 = 0
bms_node_val3 = 0
bms_node_val4 = 0
bms_node_val5 = 0
bms_node_val6 = 0

pre_high_low_list = []
bms_node_list = []
bms_node_frequency_list = []

if os.path.exists('HL-List.txt'):

    # 저가, 고가 리스트에서 맥점 추출
    with open('HL-List.txt', mode='r') as hlfile:
        
        # 한줄씩 읽어서 리스트에 저장
        file_list = []
        hlfile_line_number = 0
        while True:

            line = hlfile.readline().strip()
            hlfile_line_number += 1
            temp = line.split()
            for i in range(len(temp)):
                file_list.append(float(temp[i]))
            if not line: break
        
        hlfile_line_number = hlfile_line_number - 1
        
        pre_high_low_list = file_list[:]
        FILE_HIGH_LOW_LIST = file_list[:]

        pre_high_low_list.sort()
        pre_high_low_list.reverse()
        #print('pre_high_low_list =', pre_high_low_list)

        # 첫번재 최대빈도 맥점탐색
        result = list(Counter(pre_high_low_list).values())
        동적맥점1_빈도수 = max(result)

        if 동적맥점1_빈도수 > 2:

            # 중복횟수 최대값 인덱스 구함
            max_index = result.index(max(result))            
            #print('중복횟수 최대빈도수 인덱스 =', max_index)

            # 최대 중복값 산출
            result = list(Counter(pre_high_low_list).keys())
            bms_node_val1 = result[max_index]
            print('1st 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val1, 동적맥점1_빈도수))

            bms_node_list.append(bms_node_val1)
            bms_node_frequency_list.append(동적맥점1_빈도수)
            pre_진성맥점.append(bms_node_val1)
            
            # 두번재 최대빈도 맥점탐색
            second_list = list(filter((bms_node_val1).__ne__, pre_high_low_list))
            #print('2nd 최대빈도 제거된 리스트 =', second_list)

            result = list(Counter(second_list).values())
            동적맥점2_빈도수 = max(result)

            if 동적맥점2_빈도수 > 2:

                max_index = result.index(max(result))

                # 최대 중복값 산출
                result = list(Counter(second_list).keys())
                bms_node_val2 = result[max_index]
                print('2nd 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val2, 동적맥점2_빈도수))
                
                bms_node_list.append(bms_node_val2)
                bms_node_frequency_list.append(동적맥점2_빈도수)
                pre_진성맥점.append(bms_node_val2)

                # 세번재 최대빈도 맥점탐색
                third_list = list(filter((bms_node_val2).__ne__, second_list))
                #print('3rd 최대빈도 제거된 리스트 =', third_list)

                result = list(Counter(third_list).values())
                동적맥점3_빈도수 = max(result)

                if 동적맥점3_빈도수 > 2:

                    max_index = result.index(max(result))

                    # 최대 중복값 산출
                    result = list(Counter(third_list).keys())
                    bms_node_val3 = result[max_index]
                    print('3rd 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val3, 동적맥점3_빈도수))

                    bms_node_list.append(bms_node_val3)
                    bms_node_frequency_list.append(동적맥점3_빈도수)
                    pre_진성맥점.append(bms_node_val3)

                    # 네번재 최대빈도 맥점탐색
                    fourth_list = list(filter((bms_node_val3).__ne__, third_list))

                    result = list(Counter(fourth_list).values())
                    동적맥점4_빈도수 = max(result)

                    if 동적맥점4_빈도수 > 2:

                        max_index = result.index(max(result))
                        result = list(Counter(fourth_list).keys())

                        bms_node_val4 = result[max_index]
                        print('4th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val4, 동적맥점4_빈도수))

                        bms_node_list.append(bms_node_val4)
                        bms_node_frequency_list.append(동적맥점4_빈도수)
                        pre_진성맥점.append(bms_node_val4)

                        # 다섯번재 최대빈도 맥점탐색
                        fifth_list = list(filter((bms_node_val4).__ne__, fourth_list))
                        result = list(Counter(fifth_list).values())
                        동적맥점5_빈도수 = max(result)

                        if 동적맥점5_빈도수 > 2:

                            max_index = result.index(max(result))
                            result = list(Counter(fifth_list).keys())

                            bms_node_val5 = result[max_index]
                            print('5th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val5, 동적맥점5_빈도수))

                            bms_node_list.append(bms_node_val5)
                            bms_node_frequency_list.append(동적맥점5_빈도수)
                            pre_진성맥점.append(bms_node_val5)

                            # 여섯번재 최대빈도 맥점탐색
                            sixth_list = list(filter((bms_node_val5).__ne__, fifth_list))
                            result = list(Counter(sixth_list).values())
                            동적맥점6_빈도수 = max(result)

                            if 동적맥점6_빈도수 > 2:

                                max_index = result.index(max(result))
                                result = list(Counter(sixth_list).keys())

                                bms_node_val6 = result[max_index]
                                print('6th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val6, 동적맥점6_빈도수))

                                bms_node_list.append(bms_node_val6)
                                bms_node_frequency_list.append(동적맥점6_빈도수)

                                pre_진성맥점.append(bms_node_val6)
                                pre_진성맥점 = list(set(pre_진성맥점))
                                pre_진성맥점.sort()                                    
                                
                                print('DEFAULT_NODE_LIST =', DEFAULT_NODE_LIST)
                                print('bms_node_list =', bms_node_list)
                                print('pre 진성맥점 리스트 =', pre_진성맥점)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                else:
                    pass
            else:
                pass                
        else:
            print('빈도수 3이상인 맥점이 없습니다.')
else:
    pass

'''
# control file에서 필요한 정보를 가져옴
with open('config.ini', mode='r') as control_file:

    # [1]. << Month Info >> 
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    KSE_START_HOUR = int(temp[4])
    #print('KSE_START_HOUR =', KSE_START_HOUR)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    CURRENT_MONTH = temp[3]

    if int(CURRENT_MONTH[4:6]) == 11:

        NEXT_MONTH = CURRENT_MONTH[0:4] + '12'
        MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH[0:4]) + 1) + '01'

    elif int(CURRENT_MONTH[4:6]) == 12:

        NEXT_MONTH = repr(int(CURRENT_MONTH[0:4]) + 1) + '01'
        MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH[0:4]) + 1) + '02'

    else:
        NEXT_MONTH = repr(int(CURRENT_MONTH) + 1)
        MONTH_AFTER_NEXT = repr(int(CURRENT_MONTH) + 2)

    #print('NEXT MONTH =', NEXT_MONTH)
    #print('MONTH AFTER NEXT =', MONTH_AFTER_NEXT)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    MONTH_FIRSTDAY = temp[7]
    
    # [2]. << Target Month Select : current month = 1, next month = 2 >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    TARGET_MONTH_SELECT = int(temp[4])
    #print('TARGET MONTH SELECT =', TARGET_MONTH_SELECT)
    
    # [3]. << User Option = 'ON or OFF' >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    temp_str = temp[3]

    if temp_str == 'ON' or temp_str == 'on':
        TELEGRAM_SERVICE = True
    else:
        TELEGRAM_SERVICE = False

    print('\r')
    print('TELEGRAM_SERVICE =', TELEGRAM_SERVICE)

    # 만기일 야간옵션은 config.ini에서 Mangi Yagan을 False -> True로 변경 
    tmp = control_file.readline().strip()
    temp = tmp.split()
    temp_str = temp[3]

    if temp_str == 'ON' or temp_str == 'on':
        MANGI_YAGAN = True 
    else:
        MANGI_YAGAN = False

    print('MANGI_YAGAN =', MANGI_YAGAN)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    temp_str = temp[3]

    if temp_str == 'ON' or temp_str == 'on':
        AUTO_START = True
    else:
        AUTO_START = False
    
    tmp = control_file.readline().strip()
    temp = tmp.split()
    temp_str = temp[5]

    if temp_str == 'ON' or temp_str == 'on':
        ResizeRowsToContents = True
    else:
        ResizeRowsToContents = False

    print('ResizeRowsToContents =', ResizeRowsToContents)    

    tmp = control_file.readline().strip()
    temp = tmp.split()
    temp_str = temp[4]

    if temp_str == 'ON' or temp_str == 'on':
        CROSS_HAIR_LINE = True
    else:
        CROSS_HAIR_LINE = False

    print('CROSS_HAIR_LINE =', CROSS_HAIR_LINE)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    temp_str = temp[4]

    if temp_str == 'ON' or temp_str == 'on':
        SECOND_PLOT_SYNC = True
    else:
        SECOND_PLOT_SYNC = False

    print('SECOND_PLOT_SYNC =', SECOND_PLOT_SYNC)    

    # [4]. << Moving Average Type >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    MA_TYPE = int(temp[3])
    print('MA_TYPE =', MA_TYPE)
    print('\r')   

    # [5]. << Initial Value >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()    

    tmp = control_file.readline().strip()
    temp = tmp.split()
    HL_Depth = int(temp[4])
    #print('HL_Depth =', HL_Depth)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    NightTime_PreStart_Hour = int(temp[4])
    #print('NightTime_PreStart_Hour =', NightTime_PreStart_Hour)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    ActvalCount = int(temp[7])
    
    tmp = control_file.readline().strip()
    temp = tmp.split()

    pre_진성맥점 = []

    for i in range(len(temp)):

        if i > 5:
            pre_진성맥점.append(float(temp[i]))
        else:
            pass
    
    #pre_진성맥점 = [1.20, 2.50, 3.50, 4.85, 5.10, 5.50, 6.85, 7.10, 8.10]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    MY_COREVAL = float(temp[3])

    pre_진성맥점.append(MY_COREVAL)
    pre_진성맥점 = list(set(pre_진성맥점))
    pre_진성맥점.sort()

    DEFAULT_NODE_LIST = pre_진성맥점[:]

    bms_node_val1 = 0
    bms_node_val2 = 0
    bms_node_val3 = 0
    bms_node_val4 = 0
    bms_node_val5 = 0
    bms_node_val6 = 0

    pre_high_low_list = []
    bms_node_list = []
    bms_node_frequency_list = []

    if os.path.exists('HL-List.txt'):

        # 저가, 고가 리스트에서 맥점 추출
        with open('HL-List.txt', mode='r') as hlfile:
            
            # 한줄씩 읽어서 리스트에 저장
            file_list = []
            hlfile_line_number = 0

            while True:
    
                line = hlfile.readline().strip()
                hlfile_line_number += 1

                temp = line.split()

                for i in range(len(temp)):

                    file_list.append(float(temp[i]))

                if not line: break
            
            hlfile_line_number = hlfile_line_number - 1
            
            pre_high_low_list = file_list[:]
            FILE_HIGH_LOW_LIST = file_list[:]

            pre_high_low_list.sort()
            pre_high_low_list.reverse()
            #print('pre_high_low_list =', pre_high_low_list)

            # 첫번재 최대빈도 맥점탐색
            result = list(Counter(pre_high_low_list).values())
            동적맥점1_빈도수 = max(result)

            if 동적맥점1_빈도수 > 2:

                # 중복횟수 최대값 인덱스 구함
                max_index = result.index(max(result))            
                #print('중복횟수 최대빈도수 인덱스 =', max_index)

                # 최대 중복값 산출
                result = list(Counter(pre_high_low_list).keys())
                bms_node_val1 = result[max_index]
                print('1st 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val1, 동적맥점1_빈도수))

                bms_node_list.append(bms_node_val1)
                bms_node_frequency_list.append(동적맥점1_빈도수)
                pre_진성맥점.append(bms_node_val1)
                
                # 두번재 최대빈도 맥점탐색
                second_list = list(filter((bms_node_val1).__ne__, pre_high_low_list))
                #print('2nd 최대빈도 제거된 리스트 =', second_list)

                result = list(Counter(second_list).values())
                동적맥점2_빈도수 = max(result)

                if 동적맥점2_빈도수 > 2:

                    max_index = result.index(max(result))

                    # 최대 중복값 산출
                    result = list(Counter(second_list).keys())
                    bms_node_val2 = result[max_index]
                    print('2nd 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val2, 동적맥점2_빈도수))
                    
                    bms_node_list.append(bms_node_val2)
                    bms_node_frequency_list.append(동적맥점2_빈도수)
                    pre_진성맥점.append(bms_node_val2)

                    # 세번재 최대빈도 맥점탐색
                    third_list = list(filter((bms_node_val2).__ne__, second_list))
                    #print('3rd 최대빈도 제거된 리스트 =', third_list)

                    result = list(Counter(third_list).values())
                    동적맥점3_빈도수 = max(result)

                    if 동적맥점3_빈도수 > 2:

                        max_index = result.index(max(result))

                        # 최대 중복값 산출
                        result = list(Counter(third_list).keys())
                        bms_node_val3 = result[max_index]
                        print('3rd 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val3, 동적맥점3_빈도수))

                        bms_node_list.append(bms_node_val3)
                        bms_node_frequency_list.append(동적맥점3_빈도수)
                        pre_진성맥점.append(bms_node_val3)

                        # 네번재 최대빈도 맥점탐색
                        fourth_list = list(filter((bms_node_val3).__ne__, third_list))

                        result = list(Counter(fourth_list).values())
                        동적맥점4_빈도수 = max(result)

                        if 동적맥점4_빈도수 > 2:

                            max_index = result.index(max(result))
                            result = list(Counter(fourth_list).keys())

                            bms_node_val4 = result[max_index]
                            print('4th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val4, 동적맥점4_빈도수))

                            bms_node_list.append(bms_node_val4)
                            bms_node_frequency_list.append(동적맥점4_빈도수)
                            pre_진성맥점.append(bms_node_val4)

                            # 다섯번재 최대빈도 맥점탐색
                            fifth_list = list(filter((bms_node_val4).__ne__, fourth_list))
                            result = list(Counter(fifth_list).values())
                            동적맥점5_빈도수 = max(result)

                            if 동적맥점5_빈도수 > 2:

                                max_index = result.index(max(result))
                                result = list(Counter(fifth_list).keys())

                                bms_node_val5 = result[max_index]
                                print('5th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val5, 동적맥점5_빈도수))

                                bms_node_list.append(bms_node_val5)
                                bms_node_frequency_list.append(동적맥점5_빈도수)
                                pre_진성맥점.append(bms_node_val5)

                                # 여섯번재 최대빈도 맥점탐색
                                sixth_list = list(filter((bms_node_val5).__ne__, fifth_list))
                                result = list(Counter(sixth_list).values())
                                동적맥점6_빈도수 = max(result)

                                if 동적맥점6_빈도수 > 2:

                                    max_index = result.index(max(result))
                                    result = list(Counter(sixth_list).keys())

                                    bms_node_val6 = result[max_index]
                                    print('6th 동적맥점 값 = {0}, 빈도수 = {1}'.format(bms_node_val6, 동적맥점6_빈도수))

                                    bms_node_list.append(bms_node_val6)
                                    bms_node_frequency_list.append(동적맥점6_빈도수)                                    

                                    pre_진성맥점.append(bms_node_val6)
                                    pre_진성맥점 = list(set(pre_진성맥점))
                                    pre_진성맥점.sort()                                    
                                    
                                    print('DEFAULT_NODE_LIST =', DEFAULT_NODE_LIST)
                                    print('bms_node_list =', bms_node_list)
                                    print('pre 진성맥점 리스트 =', pre_진성맥점)
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                else:
                    pass                
            else:
                print('빈도수 3이상인 맥점이 없습니다.')
    else:
        pass

    tmp = control_file.readline().strip()
    temp = tmp.split()
    ASYM_RATIO = float(temp[4])
    #print('ASYM_RATIO =', ASYM_RATIO)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    ONEWAY_RATIO = float(temp[4])
    #print('ONEWAY_RATIO =', ONEWAY_RATIO)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    GOLDEN_RATIO = float(temp[3])
    CENTERVAL_UPPER = float(temp[3])
    CENTERVAL_LOWER = float(temp[3])
    #print('GOLDEN_RATIO =', GOLDEN_RATIO)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    CROSS_COLOR_INTERVAL = int(temp[4])
    print('CROSS_COLOR_INTERVAL =', CROSS_COLOR_INTERVAL)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    MAIN_UPDATE_INTERVAL = float(temp[4])
    print('MAIN_UPDATE_INTERVAL =', MAIN_UPDATE_INTERVAL)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    BIGCHART_UPDATE_INTERVAL = float(temp[5])
    print('BIGCHART_UPDATE_INTERVAL =', BIGCHART_UPDATE_INTERVAL)    
    
    # [6]. << Code of the Foreign Futures (H/M/U/Z) >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    SP500 = temp[3]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    DOW = temp[2]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    NASDAQ = temp[2]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    WTI = temp[2]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    EUROFX = temp[2]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    HANGSENG = temp[2]
    #print('HANGSENG =',HANGSENG)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    GOLD = temp[2]
    print('GOLD =',GOLD)

    # [7]. << Supply & Demand Code Symbol of the Foreign Futures >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    KRWUSD = temp[2]
    print('KRWUSD =', KRWUSD)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    DOW_SND = temp[3]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    SP500_SND = temp[4]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    NASDAQ_SND = temp[3]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    WTI_SND = temp[3]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    EURUSD = temp[2]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    HANGSENG_SND = temp[3]

    tmp = control_file.readline().strip()
    temp = tmp.split()
    GOLD_SND = temp[3]
    print('GOLD_SND =', GOLD_SND)
    
    # [8]. << Telegram >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    TELEGRAM_START_TIME = int(temp[7])
    #print(TELEGRAM_START_TIME)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    TELEGRAM_POLLING_INTERVAL = int(temp[4])
    #print(TELEGRAM_POLLING_INTERVAL)

    tmp = control_file.readline().strip()
    temp = tmp.split()
    TELEGRAM_SEND_INTERVAL = int(temp[4])
    #print(TELEGRAM_SEND_INTERVAL)

    # [9]. << Rules >>
    tmp = control_file.readline().strip()
    tmp = control_file.readline().strip()

    tmp = control_file.readline().strip()
    temp = tmp.split()
    ONEWAY_THRESHOLD = int(temp[9])
    #print('ONEWAY_THRESHOLD =', ONEWAY_THRESHOLD)    
'''

if os.path.isfile('nighttime.txt'):

    # 야간시장의 데이타를 가져옴
    with open('nighttime.txt', mode='r') as nighttime_file:

        tmp = nighttime_file.readline().strip()
        tmp = nighttime_file.readline().strip()
        tmp = nighttime_file.readline().strip()
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        CME_종가 = float(temp[5])
        print('CME 종가 =', CME_종가)

        tmp = nighttime_file.readline().strip()

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        SP500_전저 = float(temp[5])
        print('SP500 전저 =', SP500_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        SP500_전고 = float(temp[5])
        print('SP500 전고 =', SP500_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        SP500_종가 = float(temp[5])
        print('SP500 종가 =', SP500_종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        DOW_전저 = float(temp[4])
        print('DOW 전저 =', DOW_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        DOW_전고 = float(temp[4])
        print('DOW 전고 =', DOW_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        DOW_종가 = float(temp[4])
        print('DOW 종가 =', DOW_종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_전저 = float(temp[4])
        print('NASDAQ 전저 =', NASDAQ_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_전고 = float(temp[4])
        print('NASDAQ 전고 =', NASDAQ_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_종가 = float(temp[4])
        print('NASDAQ 종가 =', NASDAQ_종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        WTI_전저 = float(temp[4])
        print('WTI 전저 =', WTI_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        WTI_전고 = float(temp[4])
        print('WTI 전고 =', WTI_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        WTI_종가 = float(temp[4])
        print('WTI 종가 =', WTI_종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        EUROFX_전저 = float(temp[4])
        print('EUROFX 전저 =', EUROFX_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        EUROFX_전고 = float(temp[4])
        print('EUROFX 전고 =', EUROFX_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        EUROFX_종가 = float(temp[4])
        print('EUROFX 종가 =', EUROFX_종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_전저 = float(temp[4])
        print('HANGSENG 전저 =', HANGSENG_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_전고 = float(temp[4])
        print('HANGSENG 전고 =', HANGSENG_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_종가 = float(temp[4])
        print('HANGSENG 종가 =', HANGSENG_종가)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        GOLD_전저 = float(temp[4])
        print('GOLD 전저 =', GOLD_전저)

        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        GOLD_전고 = float(temp[4])
        print('GOLD 전고 =', GOLD_전고)
        
        tmp = nighttime_file.readline().strip()
        temp = tmp.split()
        GOLD_종가 = float(temp[4])
        print('GOLD 종가 =', GOLD_종가)
else:
    CME_종가 = 0
    SP500_전저 = 0
    SP500_전고 = 0
    SP500_종가 = 0
    DOW_전저 = 0
    DOW_전고 = 0
    DOW_종가 = 0
    NASDAQ_전저 = 0
    NASDAQ_전고 = 0
    NASDAQ_종가 = 0
    WTI_전저 = 0
    WTI_전고 = 0
    WTI_종가 = 0
    EUROFX_전저 = 0
    EUROFX_전고 = 0
    EUROFX_종가 = 0
    HANGSENG_전저 = 0
    HANGSENG_전고 = 0
    HANGSENG_종가 = 0
    GOLD_전저 = 0
    GOLD_전고 = 0
    GOLD_종가 = 0

if os.path.isfile('daytime.txt'):

    with open('daytime.txt', mode='r') as daytime_file:

        tmp = daytime_file.readline().strip()

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        INIT_CENTER_VAL = float(temp[3])
        장시작_중심가 = INIT_CENTER_VAL

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전일시가 = float(temp[3])
        
        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전고 = float(temp[3])        

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전저 = float(temp[3])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        KP200_전일종가 = float(temp[3])

        tmp = daytime_file.readline().strip()

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        SP500_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        DOW_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        NASDAQ_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        WTI_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        EUROFX_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        HANGSENG_전일종가 = float(temp[4])

        tmp = daytime_file.readline().strip()
        temp = tmp.split()
        GOLD_전일종가 = float(temp[4])
else:
    장시작_중심가 = 0
    KP200_전일시가 = 0    
    KP200_전고 = 0
    KP200_전저 = 0
    KP200_전일종가 = 0
    SP500_전일종가 = 0
    DOW_전일종가 = 0
    NASDAQ_전일종가 = 0
    WTI_전일종가 = 0
    EUROFX_전일종가 = 0
    HANGSENG_전일종가 = 0
    GOLD_전일종가 = 0

print('KP200 전일시가 =', KP200_전일시가)
print('KP200 전고 =', KP200_전고)
print('KP200 전저 =', KP200_전저)
print('KP200 전일종가 =', KP200_전일종가)

# 전역변수
########################################################################################################################
모니터번호 = 0

now = datetime.datetime.now()        
nowDate = now.strftime('%Y-%m-%d')
current_str = now.strftime('%H:%M:%S')

today = datetime.date.today()
now_Month = today.strftime('%Y%m')
today_str = today.strftime('%Y%m%d')
today_title = today.strftime('%Y-%m-%d')

yesterday = today - datetime.timedelta(1)
yesterday_str = yesterday.strftime('%Y%m%d')

current_month = int(CURRENT_MONTH[4:6])
next_month = int(NEXT_MONTH[4:6])
month_after_next = int(MONTH_AFTER_NEXT[4:6])

# 해외선물장은 오전 7시 시작
DayTime_PreStart_Hour = KSE_START_HOUR - 2
GuardTime = 60 * 2

# 오전 6시 ~ 7시는 Break Time
if 7 <= now.hour < NightTime_PreStart_Hour:
    # 오전 7시 ~ 오후 3시 59분
    NightTime = False    
    day_timespan = 7 * 60 + 10
    jugan_timespan = GuardTime + day_timespan
else:
    # 오후 4시 ~ 익일 오전 5시 59분
    NightTime = True
    nighttime_timespan = 12 * 60 + 10
    yagan_timespan = GuardTime + nighttime_timespan

server_date = ''
server_time = ''
system_server_timegap = 0

telegram_toggle = True

시스템시간 = 0
서버시간 = 0
시스템_서버_시간차 = 0

adj_hour = 0
adj_min = 0
adj_sec = 0

flag_offline = False

flag_call_cross_coloring = False
flag_put_cross_coloring = False
flag_clear = False

진성맥점 = []

# 업종코드
KOSPI = '001'
KOSPI200 = '101'
KOSDAQ = '301'
OPT_CALL = '700'
OPT_PUT = '800'
FUTURES = '900'
CME = '950'

SAMSUNG = '005930'
HYUNDAI = '005380'
Celltrion = '068270'
MOBIS = '012330'
NAVER = '035420'

STOCK = "0001"
BOHEOM = "0002"
TOOSIN = "0003"
BANK = "0004"
JONGGEUM = "0005"
GIGEUM = "0006"
GITA = "0007"
RETAIL = "0008"
FOREIGNER = "0017"
INSTITUTIONAL = "0018"

t2301_month_info = ''
t2835_month_info = ''

kp200_피봇 = 0
kp200_시가 = 0
kp200_저가 = 0
kp200_현재가 = 0
kp200_고가 = 0

CENTER_VAL = 0

CENTER_VAL1 = 0
CENTER_VAL2 = 0
CENTER_VAL3 = 0
CENTER_VAL4 = 0
CENTER_VAL5 = 0
CENTER_VAL6 = 0
CENTER_VAL7 = 0
CENTER_VAL8 = 0
CENTER_VAL9 = 0
CENTER_VAL10 = 0

dongsi_hoga = False
flag_kp200_start_set = False

flag_telegram_send_worker = False
flag_telegram_listen_worker = False

telegram_command = '/start'
telegram_send_worker_on_time = 0
flag_telegram_on = True

telegram_send_message = 'None'

FLAG_ATM = True

FLAG_ASYM = False
FLAG_NODE = False
FLAG_OLOH = False

FLAG_GUEST_CONTROL = True

fut_oloh_str = ''
flag_fut_oloh = False

flag_call_low_update = False
flag_call_high_update = False
flag_put_low_update = False
flag_put_high_update = False

oneway_first_touch = False
oneway_str = ''

콜시가갭합 = 0
풋시가갭합 = 0
콜시가갭합_퍼센트 = 0
풋시가갭합_퍼센트 = 0

콜시가갭합_단위평균 = 0
풋시가갭합_단위평균 = 0

콜대비합 = 0
풋대비합 = 0
콜대비합_퍼센트 = 0
풋대비합_퍼센트 = 0

콜대비합_단위평균 = 0
풋대비합_단위평균 = 0

비대칭장 = ''

call_open_count = 0
put_open_count = 0

call_low_node_count = 0
call_high_node_count = 0
put_low_node_count = 0
put_high_node_count = 0

call_low_node_list = []
call_high_node_list = []
put_low_node_list = []
put_high_node_list = []

telegram_send_str_call_low = ''
telegram_send_str_call_high = ''
telegram_send_str_put_low = ''
telegram_send_str_put_high = ''

call_low_node_str = ''
call_high_node_str = ''
put_low_node_str = ''
put_high_node_str = ''

call_low_coreval_str = ''
call_high_coreval_str = ''
put_low_coreval_str = ''
put_high_coreval_str = ''

kp200_low_node_str = ''
kp200_high_node_str = ''

opt_search_start_value = 0.0
opt_coreval_search_start_value = 0.5
opt_search_end_value = 10

start_time_str = ''
end_time_str = ''

콜_체결_초 = 0
풋_체결_초 = 0

call_ol_count = 0
call_oh_count = 0
put_ol_count = 0
put_oh_count = 0

flag_call_low_node_coloring = False
flag_call_high_node_coloring = False
flag_put_low_node_coloring = False
flag_put_high_node_coloring = False

coloring_done_time = 0
coloring_interval = 1
node_coloring = False

flag_first_arrive = False
fut_first_arrive_time = 0

flag_kp200_low_node = False
flag_kp200_high_node = False
kp200_low_node_time = 0
kp200_high_node_time = 0

service_terminate = False
jugan_service_terminate = False
yagan_service_terminate = False

call_ms_oneway = False
put_ms_oneway = False

call_ms_asymmetric = False
put_ms_asymmetric = False
call_md_asymmetric = False
put_md_asymmetric = False

call_md_all_down = False
put_md_all_down = False
call_ms_all_up = False
put_ms_all_up = False

call_oneway_level1 = False
call_oneway_level2 = False
call_oneway_level3 = False
call_oneway_level4 = False
call_oneway_level5 = False

put_oneway_level1 = False
put_oneway_level2 = False
put_oneway_level3 = False
put_oneway_level4 = False
put_oneway_level5 = False

flag_fut_low = False
flag_fut_high = False

flag_kp200_low = False
flag_kp200_high = False

옵션잔존일 = 0

OVC_체결시간 = '000000'
OVC_HOUR = 0
OVC_MIN = 0
OVC_SEC = 0

night_time = 0

fut_volume_power = 0

oloh_cutoff = 0.10
nodelist_low_cutoff = 0.09
nodelist_high_cutoff = 10.0

update_start = 0.3
update_end = 10.0

콜매수 = ''
콜매도 = ''
풋매수 = ''
풋매도 = ''
손절 = ''
익절 = '' 

basis = 0

Option_column = Enum('Option_column', '행사가 OLOH 기준가 월저 월고 전저 전고 종가 피봇 시가 저가 현재가 고가 시가갭 대비 진폭 VP OI OID')
Futures_column = Enum('Futures_column', 'OLOH 매수건수 매도건수 매수잔량 매도잔량 건수비 잔량비 전저 전고 종가 피봇 시가 저가 현재가 고가 시가갭 대비 진폭 거래량 FR OI OID')
Option_volume_column = Enum('Option_volume_column', '매도누적체결량 매도누적체결건수 매수누적체결량 매수누적체결건수')
Supply_column = Enum('Supply_column', '외인선옵 개인선옵 기관선옵 외인현물 프로그램')
Quote_column = Enum('Quote_column', 'C-MSCC C-MDCC C-MSCR C-MDCR P-MSCC P-MDCC P-MSCR P-MDCR 콜건수비 콜잔량비 풋건수비 풋잔량비 호가종합 미결종합')
option_pairs_count = 0
real_option_pairs_count = 0

call_result = dict()
put_result = dict()

call_oi_init_percent = 0
put_oi_init_percent = 0

call_volume_power = 0
put_volume_power = 0
option_volume_power = 0

# 모든 시간은 해외선물 기준으로 처리
ovc_x_idx = 0
old_ovc_x_idx = 0

server_x_idx = 0

call_itm_count = 0
put_itm_count = 0

every_5sec = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]

pre_start = False

receive_real_ovc = False
receive_quote = False
market_service = False

widget_title = ''

FUT_FOREIGNER_거래대금순매수 = 0
FUT_RETAIL_거래대금순매수 = 0
FUT_INSTITUTIONAL_거래대금순매수 = 0
FUT_STOCK_거래대금순매수 = 0
FUT_BOHEOM_거래대금순매수 = 0
FUT_TOOSIN_거래대금순매수 = 0
FUT_BANK_거래대금순매수 = 0
FUT_JONGGEUM_거래대금순매수 = 0
FUT_GIGEUM_거래대금순매수 = 0
FUT_GITA_거래대금순매수 = 0

FUT_FOREIGNER_거래대금순매수_직전대비 = 0
FUT_RETAIL_거래대금순매수_직전대비 = 0
FUT_INSTITUTIONAL_거래대금순매수_직전대비 = 0
FUT_STOCK_거래대금순매수_직전대비 = 0
FUT_BOHEOM_거래대금순매수_직전대비 = 0
FUT_TOOSIN_거래대금순매수_직전대비 = 0
FUT_BANK_거래대금순매수_직전대비 = 0
FUT_JONGGEUM_거래대금순매수_직전대비 = 0
FUT_GIGEUM_거래대금순매수_직전대비 = 0
FUT_GITA_거래대금순매수_직전대비 = 0

KOSPI_FOREIGNER_거래대금순매수 = 0
KOSPI_RETAIL_거래대금순매수 = 0
KOSPI_INSTITUTIONAL_거래대금순매수 = 0
KOSPI_STOCK_거래대금순매수 = 0
KOSPI_BOHEOM_거래대금순매수 = 0
KOSPI_TOOSIN_거래대금순매수 = 0
KOSPI_BANK_거래대금순매수 = 0
KOSPI_JONGGEUM_거래대금순매수 = 0
KOSPI_GIGEUM_거래대금순매수 = 0
KOSPI_GITA_거래대금순매수 = 0

프로그램_전체순매수금액 = 0
프로그램_전체순매수금액직전대비 = 0

KOSPI_FOREIGNER_거래대금순매수_직전대비 = 0
KOSPI_RETAIL_거래대금순매수_직전대비 = 0
KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 = 0
KOSPI_STOCK_거래대금순매수_직전대비 = 0
KOSPI_BOHEOM_거래대금순매수_직전대비 = 0
KOSPI_TOOSIN_거래대금순매수_직전대비 = 0
KOSPI_BANK_거래대금순매수_직전대비 = 0
KOSPI_JONGGEUM_거래대금순매수_직전대비 = 0
KOSPI_GIGEUM_거래대금순매수_직전대비 = 0
KOSPI_GITA_거래대금순매수_직전대비 = 0

선물_거래대금순매수 = 0
현물_거래대금순매수 = 0

FUT_FOREIGNER_직전대비 = collections.deque([0, 0, 0], 3)
FUT_RETAIL_직전대비 = collections.deque([0, 0, 0], 3)
FUT_INSTITUTIONAL_직전대비 = collections.deque([0, 0, 0], 3)
KOSPI_FOREIGNER_직전대비 = collections.deque([0, 0, 0], 3)
PROGRAM_직전대비 = collections.deque([0, 0, 0], 3)
수정미결_직전대비 = collections.deque([0, 0, 0], 3)
콜순매수_직전대비 = collections.deque([0, 0, 0], 3)
풋순매수_직전대비 = collections.deque([0, 0, 0], 3)

sp500_직전대비 = collections.deque([0, 0, 0], 5)
dow_직전대비 = collections.deque([0, 0, 0], 5)
nasdaq_직전대비 = collections.deque([0, 0, 0], 5)
wti_직전대비 = collections.deque([0, 0, 0], 5)
eurofx_직전대비 = collections.deque([0, 0, 0], 5)
hangseng_직전대비 = collections.deque([0, 0, 0], 5)
gold_직전대비 = collections.deque([0, 0, 0], 5)

opt_total_list = []
call_open_list = []
put_open_list = []

actval_increased = False

flag_call_low_coreval = False
flag_call_high_coreval = False
flag_put_low_coreval = False
flag_put_high_coreval = False

fut_code = ''
gmshcode = ''
cmshcode = ''
ccmshcode = ''

call_atm_value = 0
put_atm_value = 0

atm_zero_sum = 0
atm_zero_cha = 0

kp200_realdata = dict()
fut_realdata = dict()
cme_realdata = dict()

call_code = []
put_code = []

cm_call_code = []
cm_put_code = []
nm_call_code = []
nm_put_code = []

cm_opt_length = 0
nm_opt_length = 0

CM_OPTCODE = ''
NM_OPTCODE = ''

opt_actval = []

view_actval = []

t8415_call_count = 0
t8415_put_count = 0
t8416_call_count = 0
t8416_put_count = 0

df_fut = pd.DataFrame()
df_call = pd.DataFrame()
df_put = pd.DataFrame()
df_call_hoga = pd.DataFrame()
df_put_hoga = pd.DataFrame()
df_call_volume = pd.DataFrame()
df_put_volume = pd.DataFrame()

df_cm_call = pd.DataFrame()
df_cm_put = pd.DataFrame()
df_nm_call = pd.DataFrame()
df_nm_put = pd.DataFrame()

# NEW 데이타프레임
df_kp200_graph = pd.DataFrame()
df_futures_graph = pd.DataFrame()

#df_call_price_graph = pd.DataFrame()
df_call_graph = [pd.DataFrame()] * ActvalCount
df_call_total_graph = pd.DataFrame()

#df_put_price_graph = pd.DataFrame()
df_put_graph = [pd.DataFrame()] * ActvalCount
df_put_total_graph = pd.DataFrame()

df_sp500_graph = pd.DataFrame()
df_dow_graph = pd.DataFrame()
df_nasdaq_graph = pd.DataFrame()
df_wti_graph = pd.DataFrame()
df_eurofx_graph = pd.DataFrame()
df_hangseng_graph = pd.DataFrame()
df_gold_graph = pd.DataFrame()

call_quote = pd.Series()
put_quote = pd.Series()

call_volume = pd.Series()
put_volume = pd.Series()

call_ckbox = []
put_ckbox = []
call_cell_widget = []
put_cell_widget = []

atm_str = ''
atm_val = 0
atm_index = 0
old_atm_index = 0
yj_atm_index = 0
jgubun = ''

start_time = 0
start_time1 = 0

COREVAL = []
KP200_COREVAL = []

call_행사가 = []
call_기준가 = []
call_월저 = []
call_월고 = []
call_전저 = []
call_전고 = []
call_종가 = []
call_피봇 = []
call_시가 = []
call_저가 = []
call_고가 = []
call_진폭 = []

콜_순미결합 = 0
콜_수정미결합 = 0
콜_순미결퍼센트 = 0
콜_수정미결퍼센트 = 0

call_기준가_node_list = []
call_월저_node_list = []
call_월고_node_list = []
call_전저_node_list = []
call_전고_node_list = []
call_종가_node_list = []
call_피봇_node_list = []
call_시가_node_list = []
call_저가_node_list = []
call_고가_node_list = []

put_행사가 = []
put_기준가 = []
put_월저 = []
put_월고 = []
put_전저 = []
put_전고 = []
put_종가 = []
put_피봇 = []
put_시가 = []
put_저가 = []
put_고가 = []
put_진폭 = []

풋_순미결합 = 0
풋_순미결퍼센트 = 0
풋_수정미결합 = 0
풋_수정미결퍼센트 = 0

put_기준가_node_list = []
put_월저_node_list = []
put_월고_node_list = []
put_전저_node_list = []
put_전고_node_list = []
put_종가_node_list = []
put_피봇_node_list = []
put_시가_node_list = []
put_저가_node_list = []
put_고가_node_list = []

call_scroll_begin_position = 0
call_scroll_end_position = 0
put_scroll_begin_position = 0
put_scroll_end_position = 0

new_actval_up_count = 0
new_actval_down_count = 0

selected_call = []
selected_put = []
selected_opt_list = []
old_selected_opt_list = []

call_node_state = dict()
put_node_state = dict()

yoc_call_gap_percent = [NaN] * ActvalCount
yoc_put_gap_percent = [NaN] * ActvalCount

call_open = [False] * ActvalCount
call_ol = [False] * ActvalCount
call_oh = [False] * ActvalCount
call_gap_percent = [NaN] * ActvalCount
call_db_percent = [NaN] * ActvalCount

call_otm_db = [0] * ActvalCount
call_otm_db_percent = [NaN] * ActvalCount

put_open = [False] * ActvalCount
put_ol = [False] * ActvalCount
put_oh = [False] * ActvalCount
put_gap_percent = [NaN] * ActvalCount
put_db_percent = [NaN] * ActvalCount

nm_put_ol = [False] * ActvalCount
nm_put_oh = [False] * ActvalCount

put_otm_db = [0] * ActvalCount
put_otm_db_percent = [NaN] * ActvalCount

콜대비_퍼센트_평균 = 0
풋대비_퍼센트_평균 = 0

opt_callreal_update_counter = 0
opt_putreal_update_counter = 0
opt_call_ho_update_counter = 0
opt_put_ho_update_counter = 0

refresh_flag = False

oi_delta = 0
old_oi_delta = 0

volume_delta = 0
old_volume_delta = 0

sp500_delta = 0
old_sp500_delta = 0

dow_delta = 0
old_dow_delta = 0

nasdaq_delta = 0
old_nasdaq_delta = 0

wti_delta = 0
old_wti_delta = 0

eurofx_delta = 0
old_eurofx_delta = 0

hangseng_delta = 0
old_hangseng_delta = 0

gold_delta = 0
old_gold_delta = 0

comboindex1 = 0
comboindex2 = 0
comboindex3 = 0
comboindex4 = 0
comboindex5 = 0
comboindex6 = 0

FC0_선물현재가 = 0
OC0_콜현재가 = ''
OC0_풋현재가 = ''

콜시가리스트 = None
콜저가리스트 = None
콜고가리스트 = None

풋시가리스트 = None
풋저가리스트 = None
풋고가리스트 = None

콜_순매수_체결량 = 0
풋_순매수_체결량 = 0

콜매수잔량 = 0
콜매도잔량 = 0
풋매수잔량 = 0
풋매도잔량 = 0

콜건수비 = 0
콜잔량비 = 0

풋건수비 = 0
풋잔량비 = 0

# 컬러정의
blueviolet = QColor(138, 43, 226)
darkviolet = QColor(0x94, 0x00, 0xD3)
lightyellow = QColor(255, 255, 153)
aqua = QColor(0x00, 0xFF, 0xFF)
deepskyblue = QColor(0, 191, 255)
orange = QColor(0xFF, 0xA5, 0x00)
orangered = QColor(255, 69, 0)
magenta = QColor(255, 0, 255)
cyan = QColor(0, 255, 255)
lime = QColor(0, 255, 0)
lavender = QColor(230, 230, 250)
mistyrose = QColor(255, 228, 225)
chocolate = QColor(0xD2, 0x69, 0x1E)
indianred = QColor(0xCD, 0x5C, 0x5C)

greenyellow = QColor(0xAD, 0xFF, 0x2F)
lawngreen = QColor(0x7C, 0xFC, 0x00)
greenyellow = QColor(0xAD, 0xFF, 0x2F)
gold = QColor(0xFF, 0xD7, 0x00)
goldenrod = QColor(0xDA, 0xA5, 0x20)
skyblue = QColor(0x87, 0xCE, 0xEB)
steelblue = QColor(0x46, 0x82, 0xB4)

darkorange = QColor(0xFF, 0x8C, 0x00)
brown = QColor(0xA5, 0x2A, 0x2A)
crimson = QColor(0xDC, 0x14, 0x3C)
indigo = QColor(0x4B, 0x00, 0x82)
royalblue = QColor(0x41, 0x69, 0xE1)
dodgerblue = QColor(0x1E, 0x90, 0xFF)
darkturquoise = QColor(0x00, 0xCE, 0xD1)
darkslateblue = QColor(0x48, 0x3D, 0x8B)
purple = QColor(0x80, 0x00, 0x80)
gainsboro = QColor(0xDC, 0xDC, 0xDC)
slategray = QColor(0x70, 0x80, 0x90)
gray = QColor(0x80, 0x80, 0x80) 
pink = QColor(0xFF, 0xC0, 0xCB)
lightskyblue = QColor(0x87, 0xCE, 0xFA)

흰색 = Qt.white
검정색 = Qt.black
옅은회색 = gainsboro
회색 = gray
적색 = Qt.red
청색 = Qt.blue
녹색 = Qt.green
라임 = lime
노란색 = Qt.yellow

선물색 = Qt.magenta

콜기준가색 = orange
콜월저색 = indianred
콜월고색 = darkorange
콜전저색 = goldenrod
콜전고색 = gold
콜종가색 = chocolate
콜피봇색 = magenta
콜시가색 = 적색

콜저가색 = skyblue
콜고가색 = orange

풋기준가색 = royalblue
풋월저색 = darkslateblue
풋월고색 = dodgerblue
풋전저색 = steelblue
풋전고색 = skyblue
풋종가색 = darkturquoise
풋피봇색 = cyan
풋시가색 = 청색

대맥점색 = lawngreen

rpen = pg.mkPen('r', width=2, style=QtCore.Qt.SolidLine)
bpen = pg.mkPen('b', width=2, style=QtCore.Qt.SolidLine)
gpen = pg.mkPen('g', width=2, style=QtCore.Qt.SolidLine)
ypen = pg.mkPen('y', width=2, style=QtCore.Qt.SolidLine)
ypen1 = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)
mvpen = pg.mkPen('g', width=1, style=QtCore.Qt.DotLine)
kp200_pen = pg.mkPen('w', width=2, style=QtCore.Qt.DotLine)
jugan_x_start_pen = pg.mkPen('g', width=1, style=QtCore.Qt.DotLine)
moving_x_pen = pg.mkPen('y', width=1, style=QtCore.Qt.DotLine)
yagan_x_start_pen = pg.mkPen('g', width=1, style=QtCore.Qt.DotLine)

fut_jl_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)
fut_jh_pen = pg.mkPen(orangered, width=2, style=QtCore.Qt.DotLine)
fut_pvt_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
fut_hc_pen = pg.mkPen(lawngreen, width=1, style=QtCore.Qt.DashLine)
opt_hc_pen = pg.mkPen(lawngreen, width=1, style=QtCore.Qt.DashLine)

red_pen = pg.mkPen('r', width=2, style=QtCore.Qt.DotLine)
aqua_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)
aqua_pen1 = pg.mkPen(aqua, width=2, style=QtCore.Qt.SolidLine)
magenta_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
magenta_pen1 = pg.mkPen(magenta, width=2, style=QtCore.Qt.SolidLine)
green_pen = pg.mkPen('g', width=2, style=QtCore.Qt.DotLine)
lime_pen = pg.mkPen(lime, width=2, style=QtCore.Qt.DotLine)
yellow_pen = pg.mkPen('y', width=2, style=QtCore.Qt.DotLine)
orange_pen = pg.mkPen(orange, width=1, style=QtCore.Qt.DashLine)
pink_pen = pg.mkPen(pink, width=2, style=QtCore.Qt.DashLine)
skyblue_pen = pg.mkPen(skyblue, width=2, style=QtCore.Qt.DashLine)
goldenrod_pen = pg.mkPen(goldenrod, width=2, style=QtCore.Qt.DotLine)
gold_pen = pg.mkPen(gold, width=2, style=QtCore.Qt.DotLine)

bb_upper_pen = pg.mkPen(magenta, width=2, style=QtCore.Qt.DotLine)
bb_middle_pen = pg.mkPen(lime, width=2, style=QtCore.Qt.DotLine)
bb_lower_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.DotLine)

psar_pen = pg.mkPen('w', width=1, style=QtCore.Qt.DotLine)

macd_pen = pg.mkPen(magenta, width=1, style=QtCore.Qt.SolidLine) 
MACDSig_pen = pg.mkPen(aqua, width=1, style=QtCore.Qt.SolidLine)
# MACDHist_pen = 

mama_pen = pg.mkPen(orange, width=2, style=QtCore.Qt.SolidLine)
fama_pen = pg.mkPen(aqua, width=2, style=QtCore.Qt.SolidLine)

# Big Chart Plot1
plot1_time_line = None
plot1_time_line_jugan_start = None
plot1_time_line_yagan_start = None

plot1_fut_jl_line = None
plot1_fut_jh_line = None
plot1_fut_close_line = None
plot1_fut_open_line = None    
plot1_fut_pivot_line = None
plot1_fut_low_line = None
plot1_fut_high_line = None

plot1_fut_hoga_line = None

plot1_kp200_2_line = None
plot1_kp200_3_line = None
plot1_kp200_4_line = None
plot1_kp200_5_line = None
plot1_kp200_6_line = None
plot1_kp200_7_line = None 

plot1_kp200_line = []

plot1_ovc_jl_line = None
plot1_ovc_jh_line = None
plot1_ovc_close_line = None
plot1_ovc_open_line = None
plot1_ovc_pivot_line = None
plot1_ovc_low_line = None
plot1_ovc_high_line = None

plot1_fut_price_curve = None
plot1_fut_volume_curve = None
plot1_fut_volume_plus_curve = None
plot1_fut_volume_minus_curve = None

plot1_kp200_curve = None
plot1_call_volume_curve = None
plot1_put_volume_curve = None

plot1_call_hoga_curve = None
plot1_put_hoga_curve = None

plot1_fut_choga_rr_curve = None
plot1_fut_nhoga_rr_curve = None
plot1_fut_drate_curve = None
plot1_dow_drate_curve = None

plot1_call_drate_curve = None
plot1_put_drate_curve = None

plot1_call_oi_curve = None
plot1_put_oi_curve = None

plot1_sp500_curve = None
plot1_dow_curve = None
plot1_nasdaq_curve = None
plot1_wti_curve = None

plot1_vLine = None
plot1_hLine = None

plot1_x = 0
plot1_y = 0

plot1_bollinger_upper_curve = None
plot1_bollinger_middle_curve = None
plot1_bollinger_lower_curve = None

plot1_sar_curve = None

plot1_macd_curve = None
plot1_macdsig_curve = None
plot1_macdhist_curve = None

plot1_mama_curve = None
plot1_fama_curve = None

plot1_oe_conv_curve = None
plot1_oe_base_curve = None

# Big Chart Plot2
plot2_time_line = None
plot2_time_line_jugan_start = None
plot2_time_line_yagan_start = None

plot2_fut_hoga_line = None

plot2_ovc_jl_line = None
plot2_ovc_jh_line = None
plot2_ovc_close_line = None
plot2_ovc_pivot_line = None
plot2_ovc_open_line = None
plot2_ovc_low_line = None
plot2_ovc_high_line = None

plot2_mv_line = []

plot2_fut_choga_rr_curve = None
plot2_fut_nhoga_rr_curve = None
plot2_fut_drate_curve = None
plot2_dow_drate_curve = None

plot2_call_drate_curve = None
plot2_put_drate_curve = None

plot2_call_oi_curve = None
plot2_put_oi_curve = None

plot2_fut_volume_curve = None
plot2_fut_volume_plus_curve = None
plot2_fut_volume_minus_curve = None
plot2_call_volume_curve = None
plot2_put_volume_curve = None

plot2_call_hoga_curve = None
plot2_put_hoga_curve = None

plot2_sp500_curve = None
plot2_dow_curve = None
plot2_nasdaq_curve = None
plot2_wti_curve = None

plot2_call_curve = []
plot2_put_curve = []

plot2_center_val_curve = None

plot2_center_val_upper_line = None
plot2_center_val_line = None
plot2_center_val_lower_line = None

plot2_vLine = None
plot2_hLine = None

plot2_x = 0
plot2_y = 0

plot2_bollinger_upper_curve = None
plot2_bollinger_middle_curve = None
plot2_bollinger_lower_curve = None

plot2_sar_curve = None

plot2_macd_curve = None
plot2_macdsig_curve = None
plot2_macdhist_curve = None

plot2_mama_curve = None
plot2_fama_curve = None

plot2_oe_conv_curve = None
plot2_oe_base_curve = None

# Big Chart Plot3
plot3_time_line = None
plot3_time_line_jugan_start = None
plot3_time_line_yagan_start = None

plot3_fut_hoga_line = None

plot3_ovc_jl_line = None
plot3_ovc_jh_line = None
plot3_ovc_close_line = None
plot3_ovc_pivot_line = None
plot3_ovc_open_line = None
plot3_ovc_low_line = None
plot3_ovc_high_line = None

plot3_mv_line = []

plot3_fut_choga_rr_curve = None
plot3_fut_nhoga_rr_curve = None
plot3_fut_drate_curve = None
plot3_dow_drate_curve = None

plot3_call_drate_curve = None
plot3_put_drate_curve = None

plot3_call_oi_curve = None
plot3_put_oi_curve = None

plot3_fut_volume_curve = None
plot3_fut_volume_plus_curve = None
plot3_fut_volume_minus_curve = None
plot3_call_volume_curve = None
plot3_put_volume_curve = None

plot3_call_hoga_curve = None
plot3_put_hoga_curve = None

plot3_sp500_curve = None
plot3_dow_curve = None
plot3_nasdaq_curve = None
plot3_wti_curve = None

plot3_call_curve = []
plot3_put_curve = []

plot3_center_val_curve = None

plot3_center_val_upper_line = None
plot3_center_val_line = None
plot3_center_val_lower_line = None

plot3_vLine = None
plot3_hLine = None

plot3_x = 0
plot3_y = 0

plot3_bollinger_upper_curve = None
plot3_bollinger_middle_curve = None
plot3_bollinger_lower_curve = None

plot3_sar_curve = None

plot3_macd_curve = None
plot3_macdsig_curve = None
plot3_macdhist_curve = None

plot3_mama_curve = None
plot3_fama_curve = None

plot3_oe_conv_curve = None
plot3_oe_base_curve = None

# Big Chart Plot4
plot4_time_line = None
plot4_time_line_jugan_start = None
plot4_time_line_yagan_start = None

plot4_fut_jl_line = None
plot4_fut_jh_line = None
plot4_fut_close_line = None
plot4_fut_open_line = None    
plot4_fut_pivot_line = None
plot4_fut_low_line = None
plot4_fut_high_line = None

plot4_fut_hoga_line = None

plot4_kp200_2_line = None
plot4_kp200_3_line = None
plot4_kp200_4_line = None
plot4_kp200_5_line = None
plot4_kp200_6_line = None
plot4_kp200_7_line = None 

plot4_kp200_line = []

plot4_ovc_jl_line = None
plot4_ovc_jh_line = None
plot4_ovc_close_line = None
plot4_ovc_open_line = None
plot4_ovc_pivot_line = None
plot4_ovc_low_line = None
plot4_ovc_high_line = None

plot4_fut_price_curve = None
plot4_fut_volume_curve = None
plot4_fut_volume_plus_curve = None
plot4_fut_volume_minus_curve = None

plot4_kp200_curve = None
plot4_call_volume_curve = None
plot4_put_volume_curve = None

plot4_call_hoga_curve = None
plot4_put_hoga_curve = None

plot4_fut_choga_rr_curve = None
plot4_fut_nhoga_rr_curve = None
plot4_fut_drate_curve = None
plot4_dow_drate_curve = None

plot4_call_drate_curve = None
plot4_put_drate_curve = None

plot4_call_oi_curve = None
plot4_put_oi_curve = None

plot4_sp500_curve = None
plot4_dow_curve = None
plot4_nasdaq_curve = None
plot4_wti_curve = None

plot4_vLine = None
plot4_hLine = None

plot4_x = 0
plot4_y = 0

plot4_bollinger_upper_curve = None
plot4_bollinger_middle_curve = None
plot4_bollinger_lower_curve = None

plot4_sar_curve = None

plot4_macd_curve = None
plot4_macdsig_curve = None
plot4_macdhist_curve = None

plot4_mama_curve = None
plot4_fama_curve = None

plot4_oe_conv_curve = None
plot4_oe_base_curve = None

# Big Chart Plot5
plot5_time_line = None
plot5_time_line_jugan_start = None
plot5_time_line_yagan_start = None

plot5_fut_hoga_line = None

plot5_ovc_jl_line = None
plot5_ovc_jh_line = None
plot5_ovc_close_line = None
plot5_ovc_pivot_line = None
plot5_ovc_open_line = None
plot5_ovc_low_line = None
plot5_ovc_high_line = None

plot5_mv_line = []

plot5_fut_choga_rr_curve = None
plot5_fut_nhoga_rr_curve = None
plot5_fut_drate_curve = None
plot5_dow_drate_curve = None

plot5_call_drate_curve = None
plot5_put_drate_curve = None

plot5_call_oi_curve = None
plot5_put_oi_curve = None

plot5_fut_volume_curve = None
plot5_fut_volume_plus_curve = None
plot5_fut_volume_minus_curve = None
plot5_call_volume_curve = None
plot5_put_volume_curve = None

plot5_call_hoga_curve = None
plot5_put_hoga_curve = None

plot5_sp500_curve = None
plot5_dow_curve = None
plot5_nasdaq_curve = None
plot5_wti_curve = None

plot5_call_curve = []
plot5_put_curve = []

plot5_center_val_curve = None

plot5_center_val_upper_line = None
plot5_center_val_line = None
plot5_center_val_lower_line = None

plot5_vLine = None
plot5_hLine = None

plot5_x = 0
plot5_y = 0

plot5_bollinger_upper_curve = None
plot5_bollinger_middle_curve = None
plot5_bollinger_lower_curve = None

plot5_sar_curve = None

plot5_macd_curve = None
plot5_macdsig_curve = None
plot5_macdhist_curve = None

plot5_mama_curve = None
plot5_fama_curve = None

plot5_oe_conv_curve = None
plot5_oe_base_curve = None

# Big Chart Plot6
plot6_time_line = None
plot6_time_line_jugan_start = None
plot6_time_line_yagan_start = None

plot6_fut_hoga_line = None

plot6_ovc_jl_line = None
plot6_ovc_jh_line = None
plot6_ovc_close_line = None
plot6_ovc_pivot_line = None
plot6_ovc_open_line = None
plot6_ovc_low_line = None
plot6_ovc_high_line = None

plot6_mv_line = []

plot6_fut_choga_rr_curve = None
plot6_fut_nhoga_rr_curve = None
plot6_fut_drate_curve = None
plot6_dow_drate_curve = None

plot6_call_drate_curve = None
plot6_put_drate_curve = None

plot6_call_oi_curve = None
plot6_put_oi_curve = None

plot6_fut_volume_curve = None
plot6_fut_volume_plus_curve = None
plot6_fut_volume_minus_curve = None
plot6_call_volume_curve = None
plot6_put_volume_curve = None

plot6_call_hoga_curve = None
plot6_put_hoga_curve = None

plot6_sp500_curve = None
plot6_dow_curve = None
plot6_nasdaq_curve = None
plot6_wti_curve = None

plot6_call_curve = []
plot6_put_curve = []

plot6_center_val_curve = None

plot6_center_val_upper_line = None
plot6_center_val_line = None
plot6_center_val_lower_line = None

plot6_vLine = None
plot6_hLine = None

plot6_x = 0
plot6_y = 0

plot6_bollinger_upper_curve = None
plot6_bollinger_middle_curve = None
plot6_bollinger_lower_curve = None

plot6_sar_curve = None

plot6_macd_curve = None
plot6_macdsig_curve = None
plot6_macdhist_curve = None

plot6_mama_curve = None
plot6_fama_curve = None

plot6_oe_conv_curve = None
plot6_oe_base_curve = None

yoc_stop = False

kospi_price = 0.0
kosdaq_price = 0.0
samsung_price = 0.0

kospi_text_color = ''
kosdaq_text_color = ''
samsung_text_color = ''
sp500_text_color = ''
dow_text_color = ''
nasdaq_text_color = ''
wti_text_color = ''
eurofx_text_color = ''
hangseng_text_color = ''
gold_text_color = ''

call_max_actval = False
put_max_actval = False

flag_fut_ol = False
flag_fut_oh = False

콜_인덱스 = 0
콜_시가 = ''
콜_현재가 = ''
콜_저가 = ''
콜_고가 = ''

풋_인덱스 = 0
풋_시가 = ''
풋_현재가 = ''
풋_저가 = ''
풋_고가 = ''

call_plot_data = [0] * ActvalCount
put_plot_data = [0] * ActvalCount

call_scroll = False
put_scroll = False
refresh_coloring = False

call_low_list = []
call_high_list = []
put_low_list = []
put_high_list = []

high_low_list = []
moving_list = []

동적맥점_리스트 = []
동적맥점_빈도수_리스트 = []

DOW_진폭비 = 0
선물_진폭비 = 0

flag_first_search = False

DOW_주간_시작가 = 0
WTI_주간_시작가 = 0

DOW_야간_시작가 = 0
WTI_야간_시작가 = 0

장시작_양합 = 0

선물_호가순매수 = 0

NASDAQ_호가순매수 = 0
NASDAQ_호가잔량비 = 0

SP500_호가순매수 = 0
SP500_호가잔량비 = 0

DOW_호가순매수 = 0
DOW_호가잔량비 = 0

WTI_호가순매수 = 0
WTI_호가잔량비 = 0

EUROFX_호가순매수 = 0
EUROFX_호가잔량비 = 0

HANGSENG_호가순매수 = 0
HANGSENG_호가잔량비 = 0

GOLD_호가순매수 = 0
GOLD_호가잔량비 = 0

NASDAQ_체결순매수 = 0
NASDAQ_체결잔량비 = 0

SP500_체결순매수 = 0
SP500_체결잔량비 = 0

DOW_체결순매수 = 0
DOW_체결잔량비 = 0

WTI_체결순매수 = 0
WTI_체결잔량비 = 0

EUROFX_체결순매수 = 0
EUROFX_체결잔량비 = 0

HANGSENG_체결순매수 = 0
HANGSENG_체결잔량비 = 0

GOLD_체결순매수 = 0
GOLD_체결잔량비 = 0

# 선물 OHLC 연산
fut_tick_list = []
fut_value_list = []
df_fut_ohlc = pd.DataFrame()
df_fut_ohlc_1min = pd.DataFrame()
df_fut_ohlc_5min = pd.DataFrame()
df_fut_ohlc_15min = pd.DataFrame()

# SP500 OHLC 연산
sp500_tick_list = []
sp500_value_list = []
df_sp500_ohlc = pd.DataFrame()
df_sp500_ohlc_1min = pd.DataFrame()
df_sp500_ohlc_5min = pd.DataFrame()
df_sp500_ohlc_15min = pd.DataFrame()

# DOW OHLC 연산
dow_tick_list = []
dow_value_list = []
df_dow_ohlc = pd.DataFrame()
df_dow_ohlc_1min = pd.DataFrame()
df_dow_ohlc_5min = pd.DataFrame()
df_dow_ohlc_15min = pd.DataFrame()

# NASDAQ OHLC 연산
nasdaq_tick_list = []
nasdaq_value_list = []
df_nasdaq_ohlc = pd.DataFrame()
df_nasdaq_ohlc_1min = pd.DataFrame()
df_nasdaq_ohlc_5min = pd.DataFrame()
df_nasdaq_ohlc_15min = pd.DataFrame()

# WTI OHLC 연산
wti_tick_list = []
wti_value_list = []
df_wti_ohlc = pd.DataFrame()
df_wti_ohlc_1min = pd.DataFrame()
df_wti_ohlc_5min = pd.DataFrame()
df_wti_ohlc_15min = pd.DataFrame()

# EUROFX OHLC 연산
eurofx_tick_list = []
eurofx_value_list = []
df_eurofx_ohlc = pd.DataFrame()
df_eurofx_ohlc_1min = pd.DataFrame()
df_eurofx_ohlc_5min = pd.DataFrame()
df_eurofx_ohlc_15min = pd.DataFrame()

# HANGSENG OHLC 연산
hangseng_tick_list = []
hangseng_value_list = []
df_hangseng_ohlc = pd.DataFrame()
df_hangseng_ohlc_1min = pd.DataFrame()
df_hangseng_ohlc_5min = pd.DataFrame()
df_hangseng_ohlc_15min = pd.DataFrame()

# GOLD OHLC 연산
gold_tick_list = []
gold_value_list = []
df_gold_ohlc = pd.DataFrame()
df_gold_ohlc_1min = pd.DataFrame()
df_gold_ohlc_5min = pd.DataFrame()
df_gold_ohlc_15min = pd.DataFrame()

선물_체결시간 = ''

선물_현재가_버퍼 = []
DOW_현재가_버퍼 = []
SP500_현재가_버퍼 = []
NASDAQ_현재가_버퍼 = []
WTI_현재가_버퍼 = []

flag_futures_ohlc_open = False
flag_dow_ohlc_open = False
flag_sp500_ohlc_open = False
flag_nasdaq_ohlc_open = False
flag_wti_ohlc_open = False
flag_eurofx_ohlc_open = False
flag_hangseng_ohlc_open = False
flag_gold_ohlc_open = False

flag_checkBox_HS = False

flag_checkBox_plot1_bband = False
flag_checkBox_plot2_bband = False
flag_checkBox_plot3_bband = False
flag_checkBox_plot4_bband = False
flag_checkBox_plot5_bband = False
flag_checkBox_plot6_bband = False

flag_checkBox_plot1_mama = False
flag_checkBox_plot2_mama = False
flag_checkBox_plot3_mama = False
flag_checkBox_plot4_mama = False
flag_checkBox_plot5_mama = False
flag_checkBox_plot6_mama = False

flag_checkBox_plot1_oe = False
flag_checkBox_plot2_oe = False
flag_checkBox_plot3_oe = False
flag_checkBox_plot4_oe = False
flag_checkBox_plot5_oe = False
flag_checkBox_plot6_oe = False

fut_bollinger_symbol = ''
fut_psar_symbol = ''
fut_oe_symbol = ''
fut_mama_symbol = ''

Fibonacci_Ratio = [0.382, 0.5, 0.618, 0.707, 0.786, 0.886]

fut_hoga_cr = 0
fut_hoga_rr = 0
fut_cms_hoga_cr = 0
fut_cms_hoga_rr = 0
fut_ccms_hoga_cr = 0
fut_ccms_hoga_rr = 0

nm_call_oloh_str = ''
nm_put_oloh_str = ''

main_ui_update_time = 0
bc_ui_update_time = 0

flag_heartbeat = False

SERVER_HOUR = 0
SERVER_MIN = 0
SERVER_SEC = 0

flag_server_touch = False
flag_option_start = False

flag_t2301_eventloop = False
flag_t2835_eventloop = False
flag_t8416_eventloop = False

########################################################################################################################

def sqliteconn():
    conn = sqlite3.connect(DATABASE)
    return conn

class PandasModel(QtCore.QAbstractTableModel):
    def __init__(self, data=None, parent=None):
        QtCore.QAbstractTableModel.__init__(self, parent)
        self._data = data
        if data is None:
            self._data = DataFrame()

    def rowCount(self, parent=None):
        return len(self._data.index)

    def columnCount(self, parent=None):
        return self._data.columns.size

    def data(self, index, role=Qt.DisplayRole):
        if index.isValid():
            if role == Qt.DisplayRole:
                return str(self._data.values[index.row()][index.column()])
        return None

    def headerData(self, column, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return None
        if orientation == Qt.Horizontal:
            return self._data.columns[column]
        return int(column + 1)

    def update(self, data):
        self._data = data
        self.reset()

    def reset(self):
        self.beginResetModel()
        self.endResetModel()

    def flags(self, index):
        return QtCore.Qt.ItemIsEnabled


class RealDataTableModel(QAbstractTableModel):
    def __init__(self, parent=None):
        QtCore.QAbstractTableModel.__init__(self, parent)
        self.realdata = {}
        self.headers = ['종목코드', '현재가', '전일대비', '등락률', '매도호가', '매수호가', '누적거래량', '시가', '고가', '저가', '거래회전율', '시가총액']

    def rowCount(self, index=QModelIndex()):
        return len(self.realdata)

    def columnCount(self, index=QModelIndex()):
        return len(self.headers)

    def data(self, index, role=Qt.DisplayRole):
        if (not index.isValid() or not (0 <= index.row() < len(self.realdata))):
            return None

        if role == Qt.DisplayRole:
            rows = []
            for k in self.realdata.keys():
                rows.append(k)
            one_row = rows[index.row()]
            selected_row = self.realdata[one_row]

            return selected_row[index.column()]

        return None

    def headerData(self, column, orientation, role=Qt.DisplayRole):
        if role != Qt.DisplayRole:
            return None
        if orientation == Qt.Horizontal:
            return self.headers[column]
        return int(column + 1)

    def flags(self, index):
        return QtCore.Qt.ItemIsEnabled

    def reset(self):
        self.beginResetModel()
        self.endResetModel()


class CPluginManager:

    plugins = None

    @classmethod
    def plugin_loader(cls):

        path = "plugins/"
        result = {}

        # Load plugins
        sys.path.insert(0, path)
        for f in os.listdir(path):
            fname, ext = os.path.splitext(f)
            if ext == '.py':
                mod = __import__(fname)
                robot = mod.robot_loader()
                if robot is not None:
                    result[robot.Name] = robot
        sys.path.pop(0)

        CPluginManager.plugins = result

        return result


Ui_계좌정보조회, QtBaseClass_계좌정보조회 = uic.loadUiType(UI_DIR+"계좌정보조회.ui")
class 화면_계좌정보(QDialog, Ui_계좌정보조회):

    def __init__(self, parent=None):
        super(화면_계좌정보, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.parent = parent
        self.model1 = PandasModel()
        self.tableView_1.setModel(self.model1)
        self.model2 = PandasModel()
        self.tableView_2.setModel(self.model2)

        self.result = []
        self.connection = self.parent.connection

        # 계좌정보 불러오기
        nCount = self.connection.ActiveX.GetAccountListCount()
        for i in range(nCount):
            self.comboBox.addItem(self.connection.ActiveX.GetAccountList(i))

        self.XQ_t0424 = t0424(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't0424':
            self.df1, self.df2 = result

            self.model1.update(self.df1)
            for i in range(len(self.df1.columns)):
                self.tableView_1.resizeColumnToContents(i)

            self.model2.update(self.df2)
            for i in range(len(self.df2.columns)):
                self.tableView_2.resizeColumnToContents(i)

            CTS_종목번호 = self.df1['CTS_종목번호'].values[0].strip()
            if CTS_종목번호 != '':
                self.XQ_t0424.Query(계좌번호=self.계좌번호, 비밀번호=self.비밀번호, 단가구분='1', 체결구분='0', 단일가구분='0', 제비용포함여부='1', CTS_종목번호=CTS_종목번호)

    def inquiry(self):
        self.계좌번호 = self.comboBox.currentText().strip()
        self.비밀번호 = self.lineEdit.text().strip()

        self.XQ_t0424.Query(계좌번호=self.계좌번호, 비밀번호=self.비밀번호, 단가구분='1', 체결구분='0', 단일가구분='0', 제비용포함여부='1', CTS_종목번호='')

        QTimer().singleShot(3*1000, self.inquiry)


Ui_일별가격정보백업, QtBaseClass_일별가격정보백업 = uic.loadUiType(UI_DIR+"일별가격정보백업.ui")
class 화면_일별가격정보백업(QDialog, Ui_일별가격정보백업):

    def __init__(self, parent=None):
        super(화면_일별가격정보백업, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('가격 정보 백업')
        self.parent = parent
        self.result = []

        d = datetime.date.today()
        self.lineEdit_date.setText(str(d))

        XQ_t8436 = t8436(parent=self)
        XQ_t8436.Query(구분='0')

        self.조회건수 = 10
        self.XQ_t1305 = t1305(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1305':
            CNT, 날짜, IDX, df = result
            # print(self.단축코드, CNT, 날짜, IDX)
            with sqlite3.connect(DATABASE) as conn:
                cursor = conn.cursor()
                query = "insert or replace into 일별주가( 날짜, 시가, 고가, 저가, 종가, 전일대비구분, 전일대비, 등락율, 누적거래량, 거래증가율, 체결강도, 소진율, 회전율, 외인순매수, 기관순매수, 종목코드, 누적거래대금, 개인순매수, 시가대비구분, 시가대비, 시가기준등락율, 고가대비구분, 고가대비, 고가기준등락율, 저가대비구분, 저가대비, 저가기준등락율, 시가총액) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                cursor.executemany(query, df.values.tolist())
                conn.commit()

            try:
                if int(CNT) == int(self.조회건수) and self.radioButton_all.isChecked() == True:
                    QTimer.singleShot(주문지연, lambda: self.Request(result=result))
                else:
                    self.백업한종목수 += 1
                    if len(self.백업할종목코드) > 0:
                        self.단축코드 = self.백업할종목코드.pop(0)
                        self.result = []

                        self.progressBar.setValue(int(self.백업한종목수 / (len(self.종목코드테이블.index) - self.comboBox.currentIndex()) * 100))
                        S = '%s %s' % (self.단축코드[0], self.단축코드[1])
                        self.label_codename.setText(S)

                        QTimer.singleShot(주문지연, lambda : self.Request([]))
                    else:
                        QMessageBox.about(self, "백업완료","백업을 완료하였습니다..")
            except Exception as e:
                print('Handling run-time error : ', e)

    def Request(self, result=[]):
        if len(result) > 0:
            CNT, 날짜, IDX, df = result
            self.XQ_t1305.Query(단축코드=self.단축코드[0], 일주월구분='1', 날짜=날짜, IDX=IDX, 건수=self.조회건수, 연속조회=True)
        else:
            try:
                # print('%s %s' % (self.단축코드[0], self.단축코드[1]))
                self.XQ_t1305.Query(단축코드=self.단축코드[0], 일주월구분='1', 날짜='', IDX='', 건수=self.조회건수, 연속조회=False)
            except Exception as e:
                print('Handling run-time error : ', e)

    def Backup_One(self):
        idx = self.comboBox.currentIndex()

        self.백업한종목수 = 1
        self.백업할종목코드 = []
        self.단축코드 = self.종목코드테이블[idx:idx + 1][['단축코드','종목명']].values[0]
        self.기준일자 = self.lineEdit_date.text().strip().replace('-','')
        self.result = []
        self.Request(result=[])

    def Backup_All(self):
        idx = self.comboBox.currentIndex()
        self.백업한종목수 = 1
        self.백업할종목코드 = list(self.종목코드테이블[idx:][['단축코드','종목명']].values)
        self.단축코드 = self.백업할종목코드.pop(0)
        self.기준일자 = self.lineEdit_date.text().strip().replace('-','')

        self.progressBar.setValue(int(self.백업한종목수 / (len(self.종목코드테이블.index) - self.comboBox.currentIndex()) * 100))
        S = '%s %s' % (self.단축코드[0], self.단축코드[1])
        self.label_codename.setText(S)

        self.result = []
        self.Request(result=[])


Ui_일별업종정보백업, QtBaseClass_일별업종정보백업 = uic.loadUiType(UI_DIR+"일별업종정보백업.ui")
class 화면_일별업종정보백업(QDialog, Ui_일별업종정보백업):

    def __init__(self, parent=None):
        super(화면_일별업종정보백업, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('업종 정보 백업')
        self.parent = parent

        self.columns = ['현재가', '거래량', '일자', '시가', '고가', '저가','거래대금', '대업종구분', '소업종구분', '종목정보', '종목정보', '수정주가이벤트', '전일종가']

        self.result = []

        d = datetime.date.today()
        self.lineEdit_date.setText(str(d))

        XQ = t8424(parent=self)
        XQ.Query()

        self.조회건수 = 10
        self.XQ_t1514 = t1514(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8424':
            df = result[0]
            with sqlite3.connect(DATABASE) as conn:
                cursor = conn.cursor()
                query = "insert or replace into 업종코드(업종명, 업종코드) values(?, ?)"
                cursor.executemany(query, df.values.tolist())
                conn.commit()

            self.업종코드테이블 = result[0]
            self.업종코드테이블['컬럼'] = ">> " + self.업종코드테이블['업종코드'] + " : " + self.업종코드테이블['업종명']
            self.업종코드테이블 = self.업종코드테이블.sort_values(['업종코드', '업종명'], ascending=[True, True])
            self.comboBox.addItems(self.업종코드테이블['컬럼'].values)

        if szTrCode == 't1514':
            CTS일자, df = result
            # print(CTS일자)
            with sqlite3.connect(DATABASE) as conn:
                cursor = conn.cursor()
                query = "insert or replace into 업종정보(일자, 지수, 전일대비구분, 전일대비, 등락율, 거래량, 거래증가율, 거래대금1, 상승, 보합, 하락, 상승종목비율, 외인순매수, 시가, 고가, 저가, 거래대금2, 상한, 하한, 종목수, 기관순매수, 업종코드, 거래비중, 업종배당수익률) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                cursor.executemany(query, df.values.tolist())
                conn.commit()

            try:
                if len(df) == int(self.조회건수) and self.radioButton_all.isChecked() == True:
                    QTimer.singleShot(주문지연, lambda: self.Request(result=result))
                else:
                    self.백업한종목수 += 1
                    if len(self.백업할업종코드) > 0:
                        self.업종코드 = self.백업할업종코드.pop(0)
                        self.result = []

                        self.progressBar.setValue(int(self.백업한종목수 / (len(self.업종코드테이블.index) - self.comboBox.currentIndex()) * 100))
                        S = '%s %s' % (self.업종코드[0], self.업종코드[1])
                        self.label_codename.setText(S)

                        QTimer.singleShot(주문지연, lambda : self.Request([]))
                    else:
                        QMessageBox.about(self, "백업완료","백업을 완료하였습니다..")
            except Exception as e:
                pass

    def Request(self, result=[]):
        if len(result) > 0:
            CTS일자, df = result
            self.XQ_t1514.Query(업종코드=self.업종코드[0],구분1='',구분2='1',CTS일자=CTS일자, 조회건수=self.조회건수,비중구분='', 연속조회=True)
        else:
            # print('%s %s' % (self.업종코드[0], self.업종코드[1]))
            self.XQ_t1514.Query(업종코드=self.업종코드[0], 구분1='', 구분2='1', CTS일자='', 조회건수=self.조회건수, 비중구분='', 연속조회=False)

    def Backup_One(self):
        idx = self.comboBox.currentIndex()

        self.백업한종목수 = 1
        self.백업할업종코드 = []
        self.업종코드 = self.업종코드테이블[idx:idx + 1][['업종코드','업종명']].values[0]
        self.기준일자 = self.lineEdit_date.text().strip().replace('-','')
        self.result = []
        self.Request(result=[])

    def Backup_All(self):
        idx = self.comboBox.currentIndex()
        self.백업한종목수 = 1
        self.백업할업종코드 = list(self.업종코드테이블[idx:][['업종코드','업종명']].values)
        self.업종코드 = self.백업할업종코드.pop(0)
        self.기준일자 = self.lineEdit_date.text().strip().replace('-','')

        self.progressBar.setValue(int(self.백업한종목수 / (len(self.업종코드테이블.index) - self.comboBox.currentIndex()) * 100))
        S = '%s %s' % (self.업종코드[0], self.업종코드[1])
        self.label_codename.setText(S)

        self.result = []
        self.Request(result=[])


Ui_분별가격정보백업, QtBaseClass_분별가격정보백업 = uic.loadUiType(UI_DIR+"분별가격정보백업.ui")
class 화면_분별가격정보백업(QDialog, Ui_분별가격정보백업):

    def __init__(self, parent=None):
        super(화면_분별가격정보백업, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('가격 정보 백업')
        self.parent = parent

        self.columns = ['체결시간', '현재가', '시가', '고가', '저가', '거래량']

        self.result = []

        XQ_t8436 = t8436(parent=self)
        XQ_t8436.Query(구분='0')

        self.조회건수 = 10
        self.XQ_t1302 = t1302(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1302':
            시간CTS, df = result
            df['단축코드'] = self.단축코드[0]
            # print(시간CTS)
            with sqlite3.connect(DATABASE) as conn:
                cursor = conn.cursor()
                query = "insert or replace into 분별주가(시간, 종가, 전일대비구분, 전일대비, 등락율, 체결강도, 매도체결수량, 매수체결수량, 순매수체결량, 매도체결건수, 매수체결건수, 순체결건수, 거래량, 시가, 고가, 저가, 체결량, 매도체결건수시간, 매수체결건수시간, 매도잔량, 매수잔량, 시간별매도체결량, 시간별매수체결량,단축코드) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                cursor.executemany(query, df.values.tolist())
                conn.commit()

            try:
                if len(df) == int(self.조회건수) and self.radioButton_all.isChecked() == True:
                    QTimer.singleShot(주문지연, lambda: self.Request(result=result))
                else:
                    self.백업한종목수 += 1
                    if len(self.백업할종목코드) > 0:
                        self.단축코드 = self.백업할종목코드.pop(0)
                        self.result = []

                        self.progressBar.setValue(int(self.백업한종목수 / (len(self.종목코드테이블.index) - self.comboBox.currentIndex()) * 100))
                        S = '%s %s' % (self.단축코드[0], self.단축코드[1])
                        self.label_codename.setText(S)

                        QTimer.singleShot(주문지연, lambda : self.Request([]))
                    else:
                        QMessageBox.about(self, "백업완료","백업을 완료하였습니다..")
            except Exception as e:
                pass

    def Request(self, result=[]):
        if len(result) > 0:
            시간CTS, df = result
            self.XQ_t1302.Query(단축코드=self.단축코드[0], 작업구분=self.틱범위, 시간=시간CTS, 건수=self.조회건수, 연속조회=True)
        else:
            # print('%s %s' % (self.단축코드[0], self.단축코드[1]))
            self.XQ_t1302.Query(단축코드=self.단축코드[0], 작업구분=self.틱범위, 시간='', 건수=self.조회건수, 연속조회=False)

    def Backup_One(self):
        idx = self.comboBox.currentIndex()

        self.백업한종목수 = 1
        self.백업할종목코드 = []
        self.단축코드 = self.종목코드테이블[idx:idx + 1][['단축코드','종목명']].values[0]
        self.틱범위 = self.comboBox_min.currentText()[0:1].strip()
        if self.틱범위[0] == '0':
            self.틱범위 = self.틱범위[1:]
        self.result = []
        self.Request(result=[])

    def Backup_All(self):
        idx = self.comboBox.currentIndex()
        self.백업한종목수 = 1
        self.백업할종목코드 = list(self.종목코드테이블[idx:][['단축코드','종목명']].values)
        self.단축코드 = self.백업할종목코드.pop(0)
        self.틱범위 = self.comboBox_min.currentText()[0:1].strip()
        if self.틱범위[0] == '0':
            self.틱범위 = self.틱범위[1:]

        self.progressBar.setValue(int(self.백업한종목수 / (len(self.종목코드테이블.index) - self.comboBox.currentIndex()) * 100))
        S = '%s %s' % (self.단축코드[0], self.단축코드[1])
        self.label_codename.setText(S)

        self.result = []
        self.Request(result=[])


Ui_종목별투자자정보백업, QtBaseClass_종목별투자자정보백업 = uic.loadUiType(UI_DIR+"종목별투자자정보백업.ui")
class 화면_종목별투자자정보백업(QDialog, Ui_종목별투자자정보백업):

    def __init__(self, parent=None):
        super(화면_종목별투자자정보백업, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('종목별 투자자 정보 백업')
        self.parent = parent

        self.columns = ['일자', '현재가', '전일대비', '누적거래대금', '개인투자자', '외국인투자자','기관계','금융투자','보험','투신','기타금융','은행','연기금등','국가','내외국인','사모펀드','기타법인']

        d = datetime.date.today()
        self.lineEdit_date.setText(str(d))

        XQ_t8436 = t8436(parent=self)
        XQ_t8436.Query(구분='0')

        self.조회건수 = 10
        self.XQ_t1702 = t1702(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1702':
            CTSIDX, CTSDATE, df = result
            df['단축코드'] = self.단축코드[0]
            # print(CTSIDX, CTSDATE)
            with sqlite3.connect(DATABASE) as conn:
                cursor = conn.cursor()
                query = "insert or replace into 종목별투자자(일자, 종가, 전일대비구분, 전일대비, 등락율, 누적거래량, 사모펀드, 증권, 보험, 투신, 은행, 종금, 기금, 기타법인, 개인, 등록외국인, 미등록외국인, 국가외, 기관, 외인계, 기타계, 단축코드) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                cursor.executemany(query, df.values.tolist())
                conn.commit()

            try:
                if len(df) == int(self.조회건수) and self.radioButton_all.isChecked() == True:
                    QTimer.singleShot(주문지연, lambda: self.Request(result=result))
                else:
                    self.백업한종목수 += 1
                    if len(self.백업할종목코드) > 0:
                        self.단축코드 = self.백업할종목코드.pop(0)
                        self.result = []

                        self.progressBar.setValue(int(self.백업한종목수 / (len(self.종목코드테이블.index) - self.comboBox.currentIndex()) * 100))
                        S = '%s %s' % (self.단축코드[0], self.단축코드[1])
                        self.label_codename.setText(S)

                        QTimer.singleShot(주문지연, lambda : self.Request([]))
                    else:
                        QMessageBox.about(self, "백업완료","백업을 완료하였습니다..")
            except Exception as e:
                pass

    def Request(self, result=[]):
        if len(result) > 0:
            CTSIDX, CTSDATE, df = result
            self.XQ_t1702.Query(종목코드=self.단축코드[0], 종료일자='', 금액수량구분='0', 매수매도구분='0', 누적구분='0', CTSDATE=CTSDATE, CTSIDX=CTSIDX)
        else:
            # print('%s %s' % (self.단축코드[0], self.단축코드[1]))
            self.XQ_t1702.Query(종목코드=self.단축코드[0], 종료일자='', 금액수량구분='0', 매수매도구분='0', 누적구분='0', CTSDATE='', CTSIDX='')

    def Backup_One(self):
        idx = self.comboBox.currentIndex()

        self.백업한종목수 = 1
        self.백업할종목코드 = []
        self.단축코드 = self.종목코드테이블[idx:idx + 1][['단축코드','종목명']].values[0]
        self.기준일자 = self.lineEdit_date.text().strip().replace('-','')
        self.result = []
        self.Request(result=[])

    def Backup_All(self):
        idx = self.comboBox.currentIndex()
        self.백업한종목수 = 1
        self.백업할종목코드 = list(self.종목코드테이블[idx:][['단축코드','종목명']].values)
        self.단축코드 = self.백업할종목코드.pop(0)
        self.기준일자 = self.lineEdit_date.text().strip().replace('-','')

        self.progressBar.setValue(int(self.백업한종목수 / (len(self.종목코드테이블.index) - self.comboBox.currentIndex()) * 100))
        S = '%s %s' % (self.단축코드[0], self.단축코드[1])
        self.label_codename.setText(S)

        self.result = []
        self.Request(result=[])

## ---------------------------------------------------------------------------------------------------------------------
Ui_종목코드, QtBaseClass_종목코드 = uic.loadUiType(UI_DIR+"종목코드조회.ui")
class 화면_종목코드(QDialog, Ui_종목코드):

    def __init__(self, parent=None):
        super(화면_종목코드, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.df = DataFrame()
        self.XQ_t8436 = t8436(parent=self)
        self.XQ_t8436.Query(구분='0')

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.df = result[0]
            self.model.update(self.df)
            for i in range(len(self.df.columns)):
                self.tableView.resizeColumnToContents(i)

    def SaveCode(self):
        with sqlite3.connect(DATABASE) as conn:
            cursor = conn.cursor()
            query = "insert or replace into 종목코드(종목명,단축코드,확장코드,ETF구분,상한가,하한가,전일가,주문수량단위,기준가,구분,증권그룹,기업인수목적회사여부) values(?,?,?,?,?,?,?,?,?,?,?,?)"
            cursor.executemany(query, self.df.values.tolist())
            conn.commit()

        QMessageBox.about(self, "종목코드 생성", " %s 항목의 종목코드를 생성하였습니다." % (len(self.df)))


Ui_업종정보, QtBaseClass_업종정보 = uic.loadUiType(UI_DIR+"업종정보조회.ui")
class 화면_업종정보(QDialog, Ui_업종정보):

    def __init__(self, parent=None):
        super(화면_업종정보, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.setWindowTitle('업종정보 조회')

        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = ['일자', '지수', '전일대비구분', '전일대비', '등락율', '거래량', '거래증가율', '거래대금1', '상승', '보합', '하락', '상승종목비율', '외인순매수',
                   '시가', '고가', '저가', '거래대금2', '상한', '하한', '종목수', '기관순매수', '업종코드', '거래비중', '업종배당수익률']

        self.result = []

        d = datetime.date.today()

        XQ = t8424(parent=self)
        XQ.Query()

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8424':
            df = result[0]
            df['컬럼'] = df['업종코드'] + " : " + df['업종명']
            df = df.sort_values(['업종코드', '업종명'], ascending=[True, True])
            self.comboBox.addItems(df['컬럼'].values)

        if szTrCode == 't1514':
            CTS일자, df = result
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def inquiry(self):
        업종코드 = self.comboBox.currentText()[:3]
        조회건수 = self.lineEdit_date.text().strip().replace('-', '')

        XQ = t1514(parent=self)
        XQ.Query(업종코드=업종코드,구분1='',구분2='1',CTS일자='',조회건수=조회건수,비중구분='', 연속조회=False)


Ui_테마정보, QtBaseClass_테마정보 = uic.loadUiType(UI_DIR+"테마정보조회.ui")
class 화면_테마정보(QDialog, Ui_테마정보):

    def __init__(self, parent=None):
        super(화면_테마정보, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.setWindowTitle('테마정보 조회')

        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = ['일자', '지수', '전일대비구분', '전일대비', '등락율', '거래량', '거래증가율', '거래대금1', '상승', '보합', '하락', '상승종목비율', '외인순매수',
                   '시가', '고가', '저가', '거래대금2', '상한', '하한', '종목수', '기관순매수', '업종코드', '거래비중', '업종배당수익률']

        self.result = []

        d = datetime.date.today()

        XQ = t8425(parent=self)
        XQ.Query()

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8425':
            df = result[0]
            df['컬럼'] = df['테마코드'] + " : " + df['테마명']
            df = df.sort_values(['테마코드', '테마명'], ascending=[True, True])
            self.comboBox.addItems(df['컬럼'].values)

        if szTrCode == 't1537':
            df0, df = result
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def inquiry(self):
        테마코드 = self.comboBox.currentText()[:4]

        XQ = t1537(parent=self)
        XQ.Query(테마코드=테마코드, 연속조회=False)


Ui_분별주가조회, QtBaseClass_분별주가조회 = uic.loadUiType(UI_DIR+"분별주가조회.ui")
class 화면_분별주가(QDialog, Ui_분별주가조회):

    def __init__(self, parent=None):
        super(화면_분별주가, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('분별 주가 조회')
        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = []

        self.result = []

        XQ = t8436(parent=self)
        XQ.Query(구분='0')

        self.XQ_t1302 = t1302(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1302':
            시간CTS, df = result
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def inquiry(self):
        단축코드 = self.comboBox.currentText().strip()[3:9]
        조회건수 = self.lineEdit_cnt.text().strip().replace('-', '')

        self.XQ_t1302.Query(단축코드=단축코드,작업구분='1',시간='',건수=조회건수, 연속조회=False)


Ui_일자별주가조회, QtBaseClass_일자별주가조회 = uic.loadUiType(UI_DIR+"일자별주가조회.ui")
class 화면_일별주가(QDialog, Ui_일자별주가조회):

    def __init__(self, parent=None):
        super(화면_일별주가, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.setWindowTitle('일자별 주가 조회')

        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = ['날짜', '시가', '고가', '저가', '종가', '전일대비구분', '전일대비', '등락율', '누적거래량', '거래증가율', '체결강도', '소진율', '회전율',
                   '외인순매수', '기관순매수', '종목코드', '누적거래대금', '개인순매수', '시가대비구분', '시가대비', '시가기준등락율', '고가대비구분', '고가대비',
                   '고가기준등락율', '저가대비구분', '저가대비', '저가기준등락율', '시가총액']

        self.result = []

        d = datetime.date.today()

        XQ = t8436(parent=self)
        XQ.Query(구분='0')

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1305':
            CNT, 날짜, IDX, df = result
            # print(CNT, 날짜, IDX)

            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

            if int(CNT) == int(self.조회건수):
                QTimer.singleShot(주문지연, lambda: self.inquiry_repeatly(result=result))
            else:
                # print("===END===")
                pass

    def inquiry_repeatly(self, result):
        CNT, 날짜, IDX, df = result
        self.XQ.Query(단축코드=self.단축코드, 일주월구분='1', 날짜=날짜, IDX=IDX, 건수=self.조회건수, 연속조회=True)

    def inquiry(self):
        self.단축코드 = self.comboBox.currentText()[3:9]
        self.조회건수 = self.lineEdit_date.text().strip().replace('-', '')

        self.XQ = t1305(parent=self)
        self.XQ.Query(단축코드=self.단축코드,일주월구분='1',날짜='',IDX='',건수=self.조회건수, 연속조회=False)


Ui_종목별투자자조회, QtBaseClass_종목별투자자조회 = uic.loadUiType(UI_DIR+"종목별투자자조회.ui")
class 화면_종목별투자자(QDialog, Ui_종목별투자자조회):

    def __init__(self, parent=None):
        super(화면_종목별투자자, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('종목별 투자자 조회')
        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = ['일자', '종가', '전일대비구분', '전일대비', '등락율', '누적거래량', '사모펀드', '증권', '보험', '투신', '은행', '종금', '기금', '기타법인',
                       '개인', '등록외국인', '미등록외국인', '국가외', '기관', '외인계', '기타계']

        self.result = []

        d = datetime.date.today()
        self.lineEdit_date.setText(str(d))

        XQ = t8436(parent=self)
        XQ.Query(구분='0')

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1702':
            CTSIDX, CTSDATE, df = result
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def Request(self, _repeat=0):
        종목코드 = self.lineEdit_code.text().strip()
        기준일자 = self.lineEdit_date.text().strip().replace('-','')

    def inquiry(self):
        단축코드 = self.comboBox.currentText()[3:9]
        조회건수 = self.lineEdit_date.text().strip().replace('-', '')

        XQ = t1702(parent=self)
        XQ.Query(종목코드=단축코드, 종료일자='', 금액수량구분='0', 매수매도구분='0', 누적구분='0', CTSDATE='', CTSIDX='')


class 화면_종목별투자자2(QDialog, Ui_종목별투자자조회):

    def __init__(self, parent=None):
        super(화면_종목별투자자2, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('종목별 투자자 조회')
        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = []

        self.result = []

        d = datetime.date.today()
        self.lineEdit_date.setText(str(d))

        XQ = t8436(parent=self)
        XQ.Query(구분='0')

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 't1717':
            df = result[0]
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def Request(self, _repeat=0):
        종목코드 = self.lineEdit_code.text().strip()
        기준일자 = self.lineEdit_date.text().strip().replace('-','')

    def inquiry(self):
        단축코드 = self.comboBox.currentText()[3:9]
        조회건수 = self.lineEdit_date.text().strip().replace('-', '')

        XQ = t1717(parent=self)
        XQ.Query(종목코드=단축코드,구분='0',시작일자='20170101',종료일자='20172131')


Ui_차트인덱스, QtBaseClass_차트인덱스 = uic.loadUiType(UI_DIR+"차트인덱스.ui")
class 화면_차트인덱스(QDialog, Ui_차트인덱스):

    def __init__(self, parent=None):
        super(화면_차트인덱스, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.parent = parent

        self.columns = ['일자', '시간', '시가', '고가', '저가', '종가', '거래량', '지표값1', '지표값2', '지표값3', '지표값4', '지표값5', '위치']

        self.XQ_ChartIndex = ChartIndex(parent=self)
        XQ = t8436(parent=self)
        XQ.Query(구분='0')

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = ">> " + self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

        if szTrCode == 'CHARTINDEX':
            식별자, 지표ID, 레코드갯수, 유효데이터컬럼갯수, self.df = result

            self.model.update(self.df)
            for i in range(len(self.df.columns)):
                self.tableView.resizeColumnToContents(i)

    def OnReceiveChartRealData(self, szTrCode, lst):
        if szTrCode == 'CHARTINDEX':
            식별자, result = lst
            지표ID, 레코드갯수, 유효데이터컬럼갯수, d = result
            lst = [[d['일자'],d['시간'],d['시가'],d['고가'],d['저가'],d['종가'],d['거래량'],d['지표값1'],d['지표값2'],d['지표값3'],d['지표값4'],d['지표값5'],d['위치']]]
            self.df = self.df.append(pd.DataFrame(lst, columns=self.columns), ignore_index=True)

            try:
                self.model.update(self.df)
                for i in range(len(self.df.columns)):
                    self.tableView.resizeColumnToContents(i)
            except Exception as e:
                pass

    def inquiry(self):
        지표명 = self.lineEdit_name.text()
        단축코드 =  self.comboBox.currentText()[3:9]
        요청건수 = self.lineEdit_cnt.text()
        실시간 = '1' if self.checkBox.isChecked() == True else '0'

        self.XQ_ChartIndex.Query(지표ID='', 지표명=지표명, 지표조건설정='', 시장구분='1', 주기구분='0', 단축코드=단축코드, 요청건수=요청건수, 단위='3', 시작일자='',
                 종료일자='', 수정주가반영여부='1', 갭보정여부='1', 실시간데이터수신자동등록여부=실시간)


Ui_종목검색, QtBaseClass_종목검색 = uic.loadUiType(UI_DIR+"종목검색.ui")
class 화면_종목검색(QDialog, Ui_종목검색):

    def __init__(self, parent=None):
        super(화면_종목검색, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.parent = parent

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't1833':
            종목검색수, df = result
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def fileselect(self):
        pathname = os.path.dirname(sys.argv[0])
        RESDIR = "%s\\ADF\\" % os.path.abspath(pathname)

        fname = QFileDialog.getOpenFileName(self, 'Open file',RESDIR, "조검검색(*.adf)")
        self.lineEdit.setText(fname[0])

    def inquiry(self):
        filename = self.lineEdit.text()
        XQ = t1833(parent=self)
        XQ.Query(종목검색파일=filename)


Ui_e종목검색, QtBaseClass_e종목검색 = uic.loadUiType(UI_DIR+"e종목검색.ui")
class 화면_e종목검색(QDialog, Ui_e종목검색):

    def __init__(self, parent=None):
        super(화면_e종목검색, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.parent = parent

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't1857':
            검색종목수, 포착시간, 실시간키, df = result
            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)

    def OnReceiveSearchRealData(self, szTrCode, result):
        if szTrCode == 't1857':
            print(result)

    def fileselect(self):
        pathname = os.path.dirname(sys.argv[0])
        RESDIR = "%s\\ACF\\" % os.path.abspath(pathname)

        fname = QFileDialog.getOpenFileName(self, 'Open file',RESDIR, "조검검색(*.acf)")
        self.lineEdit.setText(fname[0])

    def inquiry(self):
        filename = self.lineEdit.text()
        XQ = t1857(parent=self)
        XQ.Query(실시간구분='0',종목검색구분='F',종목검색입력값=filename)


Ui_호가창정보, QtBaseClass_호가창정보 = uic.loadUiType(UI_DIR+"실시간호가.ui")
class 화면_호가창정보(QDialog, Ui_호가창정보):

    def __init__(self, parent=None):
        super(화면_호가창정보, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.parent = parent

        self.매도호가컨트롤 = [
            self.label_offerho1, self.label_offerho2, self.label_offerho3, self.label_offerho4, self.label_offerho5,
            self.label_offerho6, self.label_offerho7, self.label_offerho8, self.label_offerho9, self.label_offerho10
        ]

        self.매수호가컨트롤 = [
            self.label_bidho1, self.label_bidho2, self.label_bidho3, self.label_bidho4, self.label_bidho5,
            self.label_bidho6, self.label_bidho7, self.label_bidho8, self.label_bidho9, self.label_bidho10
        ]

        self.매도호가잔량컨트롤 = [
            self.label_offerrem1, self.label_offerrem2, self.label_offerrem3, self.label_offerrem4,
            self.label_offerrem5,
            self.label_offerrem6, self.label_offerrem7, self.label_offerrem8, self.label_offerrem9,
            self.label_offerrem10
        ]

        self.매수호가잔량컨트롤 = [
            self.label_bidrem1, self.label_bidrem2, self.label_bidrem3, self.label_bidrem4, self.label_bidrem5,
            self.label_bidrem6, self.label_bidrem7, self.label_bidrem8, self.label_bidrem9, self.label_bidrem10
        ]

        with sqlite3.connect(DATABASE) as conn:
            query = 'select 단축코드,종목명,ETF구분,구분 from 종목코드'
            df = pdsql.read_sql_query(query, con=conn)

        self.kospi_codes = df.query("구분=='1'")['단축코드'].values.tolist()
        self.kosdaq_codes = df.query("구분=='2'")['단축코드'].values.tolist()

        XQ = t8436(parent=self)
        XQ.Query(구분='0')

        self.kospi_askbid = H1_(parent=self)
        self.kosdaq_askbid = HA_(parent=self)

    def OnReceiveMessage(self, systemError, messageCode, message):
        # print(systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 't8436':
            self.종목코드테이블 = result[0]
            self.종목코드테이블['컬럼'] = self.종목코드테이블['단축코드'] + " : " + self.종목코드테이블['종목명']
            self.종목코드테이블 = self.종목코드테이블.sort_values(['단축코드', '종목명'], ascending=[True, True])
            self.comboBox.addItems(self.종목코드테이블['컬럼'].values)

    def OnReceiveRealData(self, szTrCode, result):
        try:
            s = "%s:%s:%s" % (result['호가시간'][0:2],result['호가시간'][2:4],result['호가시간'][4:6])
            self.label_hotime.setText(s)

            for i in range(0,10):
                self.매도호가컨트롤[i].setText(result['매도호가'][i])
                self.매수호가컨트롤[i].setText(result['매수호가'][i])
                self.매도호가잔량컨트롤[i].setText(result['매도호가잔량'][i])
                self.매수호가잔량컨트롤[i].setText(result['매수호가잔량'][i])

            self.label_offerremALL.setText(result['총매도호가잔량'])
            self.label_bidremALL.setText(result['총매수호가잔량'])
            self.label_donsigubun.setText(result['동시호가구분'])
            self.label_alloc_gubun.setText(result['배분적용구분'])
        except Exception as e:
            pass

    def AddCode(self):
        종목코드 = self.comboBox.currentText().strip()[0:6]

        self.kospi_askbid.UnadviseRealData()
        self.kosdaq_askbid.UnadviseRealData()

        if 종목코드 in self.kospi_codes:
            self.kospi_askbid.AdviseRealData(종목코드=종목코드)
        if 종목코드 in self.kosdaq_codes:
            self.kosdaq_askbid.AdviseRealData(종목코드=종목코드)


Ui_실시간정보, QtBaseClass_실시간정보 = uic.loadUiType(UI_DIR+"실시간주가.ui")
class 화면_실시간정보(QDialog, Ui_실시간정보):

    def __init__(self, parent=None):
        super(화면_실시간정보, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.parent = parent

        self.kospi_real = S3_(parent=self)

    def OnReceiveRealData(self, szTrCode, result):
        try:
            str = '{}:{} - {}--{}\r'.format(result['체결시간'], result['단축코드'], result['현재가'], result['체결량'])
            self.textBrowser.append(str)
        except Exception as e:
            pass

    def AddCode(self):
        종목코드 = self.comboBox.currentText().strip()
        self.comboBox.addItems([종목코드])
        self.kospi_real.AdviseRealData(종목코드=종목코드)

    def RemoveCode(self):
        종목코드 = self.comboBox.currentText().strip()
        self.kospi_real.UnadviseRealDataWithKey(종목코드=종목코드)


Ui_뉴스, QtBaseClass_뉴스 = uic.loadUiType(UI_DIR+"뉴스.ui")
class 화면_뉴스(QDialog, Ui_뉴스):

    # 클래스변수 선언
    news_str = ''
    news_on = False
    
    def __init__(self, parent=None):

        super(화면_뉴스, self).__init__(parent, flags = Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.parent = parent
        self.news = NWS(parent=self)
        화면_뉴스.news_on = True

    def OnReceiveRealData(self, szTrCode, result):

        str = '{}:{} - {}\r'.format(result['날짜'], result['시간'], result['제목'])

        try:
            # 클래스변수 갱신(클래스 외부에서 접근가능)
            화면_뉴스.news_str = str
            self.textBrowser.append(str)
        except Exception as e:
            pass    

    def AddCode(self):

        str = '실시간 뉴스를 요청합니다.\r'
        self.textBrowser.append(str)
        self.news.AdviseRealData()

    def RemoveCode(self):

        str = '실시간 뉴스요청을 취소합니다.\r'
        self.textBrowser.append(str)
        self.news.UnadviseRealData()

    # 클래스간 통신 목적
    def setText_to_Browser(self, str):

        self.textBrowser.append(str)

    def closeEvent(self,event):

        화면_뉴스.news_on = False
        self.news.UnadviseRealData()
    '''
    @classmethod
    def testcode(cls, str):

        print(str) 
        #cls.textBrowser.append(str)   
    '''

Ui_주문테스트, QtBaseClass_주문테스트 = uic.loadUiType(UI_DIR+"주문테스트.ui")
class 화면_주문테스트(QDialog, Ui_주문테스트):

    def __init__(self, parent=None):
        super(화면_주문테스트, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.parent = parent

        self.connection = self.parent.connection

        # 계좌정보 불러오기
        nCount = self.connection.ActiveX.GetAccountListCount()
        for i in range(nCount):
            self.comboBox.addItem(self.connection.ActiveX.GetAccountList(i))

        self.QA_CSPAT00600 = CSPAT00600(parent=self)

        self.setup()

    def setup(self):
        self.XR_SC1 = SC1(parent=self)
        self.XR_SC1.AdviseRealData()
        self.주문번호리스트 = []

    def OnReceiveMessage(self, systemError, messageCode, message):
        self.textEdit.insertPlainText("systemError:[%s] messageCode:[%s] message:[%s]\r" % (systemError, messageCode, message))

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 'CSPAT00600':
            df, df1 = result
            주문번호 = df1['주문번호'].values[0]
            self.textEdit.insertPlainText("주문번호 : %s\r" % 주문번호)
            if 주문번호 != '0':
                # 주문번호처리
                self.주문번호리스트.append(str(주문번호))

    def OnReceiveRealData(self, szTrCode, result):
        try:
            self.textEdit.insertPlainText(szTrCode+'\r')
            self.textEdit.insertPlainText(str(result)+'\r')
        except Exception as e:
            pass

        if szTrCode == 'SC1':
            체결시각 = result['체결시각']
            단축종목번호 = result['단축종목번호'].strip().replace('A','')
            종목명 = result['종목명']
            매매구분 = result['매매구분']
            주문번호 = result['주문번호']
            체결번호 = result['체결번호']
            주문수량 = result['주문수량']
            주문가격 = result['주문가격']
            체결수량 = result['체결수량']
            체결가격 = result['체결가격']
            주문평균체결가격 = result['주문평균체결가격']
            주문계좌번호 = result['주문계좌번호']

            # 내가 주문한 것이 맞을 경우 처리
            if 주문번호 in self.주문번호리스트:
                s = "[%s] %s %s %s %s %s %s %s %s %s %s %s" % (szTrCode,체결시각,단축종목번호,매매구분,주문번호,체결번호,주문수량,주문가격,체결수량,체결가격,주문평균체결가격,주문계좌번호)
                try:
                    self.textEdit.insertPlainText(s + '\r')
                except Exception as e:
                    pass

                일자 = "{:%Y-%m-%d}".format(datetime.datetime.now())
                with sqlite3.connect(DATABASE) as conn:
                    query = 'insert into 거래결과(로봇명, UUID, 일자, 체결시각, 단축종목번호, 종목명, 매매구분, 주문번호, 체결번호, 주문수량, 주문가격, 체결수량, 체결가격, 주문평균체결가격) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
                    data = ['주문테스트', '주문테스트-UUID', 일자, 체결시각, 단축종목번호, 종목명, 매매구분, 주문번호, 체결번호, 주문수량, 주문가격, 체결수량, 체결가격, 주문평균체결가격]
                    cursor = conn.cursor()
                    cursor.execute(query, data)
                    conn.commit()

    def Order(self):
        계좌번호 = self.comboBox.currentText().strip()
        비밀번호 = self.lineEdit_pwd.text().strip()
        종목코드 = self.lineEdit_code.text().strip()
        주문가 = self.lineEdit_price.text().strip()
        주문수량 = self.lineEdit_amt.text().strip()
        매매구분 = self.lineEdit_bs.text().strip()
        호가유형 = self.lineEdit_hoga.text().strip()
        신용거래 = self.lineEdit_sin.text().strip()
        주문조건 = self.lineEdit_jogun.text().strip()

        self.QA_CSPAT00600.Query(계좌번호=계좌번호, 입력비밀번호=비밀번호, 종목번호=종목코드, 주문수량=주문수량, 주문가=주문가, 매매구분=매매구분, 호가유형코드=호가유형, 신용거래코드=신용거래, 주문조건구분=주문조건)


Ui_외부신호2eBEST, QtBaseClass_외부신호2eBEST = uic.loadUiType(UI_DIR+"외부신호2eBEST.ui")
class 화면_외부신호2eBEST(QDialog, Ui_외부신호2eBEST):

    def __init__(self, parent=None):
        super(화면_외부신호2eBEST, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.parent = parent

        self.pathname = os.path.dirname(sys.argv[0])
        self.file = "%s\\" % os.path.abspath(self.pathname)

        self.매도 = 1
        self.매수 = 2
        self.매수방법 = '00'
        self.매도방법 = '00'
        self.조건없음 = 0
        self.조건IOC = 1
        self.조건FOK = 2

        self.신용거래코드 = '000'

        self.주문번호리스트 = []
        self.QA_CSPAT00600 = CSPAT00600(parent=self)
        self.XR_SC1 = SC1(parent=self)
        self.XR_SC1.AdviseRealData()

        self.connection = self.parent.connection

        # 계좌정보 불러오기
        nCount = self.connection.ActiveX.GetAccountListCount()
        for i in range(nCount):
            self.comboBox.addItem(self.connection.ActiveX.GetAccountList(i))

    def OnReceiveMessage(self, systemError, messageCode, message):
        s = "\r%s %s %s\r" % (systemError, messageCode, message)
        try:
            self.plainTextEdit.insertPlainText(s)
        except Exception as e:
            pass

    def OnReceiveData(self, szTrCode, result):
        if szTrCode == 'CSPAT00600':
            df, df1 = result
            주문번호 = df1['주문번호'].values[0]
            if 주문번호 != '0':
                self.주문번호리스트.append(str(주문번호))
                s = "주문번호 : %s\r" % 주문번호
                try:
                    self.plainTextEdit.insertPlainText(s)
                except Exception as e:
                    pass

    def OnReceiveRealData(self, szTrCode, result):
        if szTrCode == 'SC1':
            체결시각 = result['체결시각']
            단축종목번호 = result['단축종목번호'].strip().replace('A','')
            종목명 = result['종목명']
            매매구분 = result['매매구분']
            주문번호 = result['주문번호']
            체결번호 = result['체결번호']
            주문수량 = result['주문수량']
            주문가격 = result['주문가격']
            체결수량 = result['체결수량']
            체결가격 = result['체결가격']
            주문평균체결가격 = result['주문평균체결가격']
            주문계좌번호 = result['주문계좌번호']

            # 내가 주문한 것이 체결된 경우 처리
            if 주문번호 in self.주문번호리스트:
                s = "\r주문체결[%s] : %s %s %s %s %s %s %s %s %s %s %s\r" % (szTrCode,체결시각,단축종목번호,매매구분,주문번호,체결번호,주문수량,주문가격,체결수량,체결가격,주문평균체결가격,주문계좌번호)
                try:
                    self.plainTextEdit.insertPlainText(s)
                except Exception as e:
                    pass

                일자 = "{:%Y-%m-%d}".format(datetime.datetime.now())
                with sqlite3.connect(DATABASE) as conn:
                    query = 'insert into 거래결과(로봇명, UUID, 일자, 체결시각, 단축종목번호, 종목명, 매매구분, 주문번호, 체결번호, 주문수량, 주문가격, 체결수량, 체결가격, 주문평균체결가격) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
                    data = ['툴박스2EBEST', '툴박스2EBEST-UUID', 일자, 체결시각, 단축종목번호, 종목명, 매매구분, 주문번호, 체결번호, 주문수량, 주문가격, 체결수량, 체결가격, 주문평균체결가격]
                    cursor = conn.cursor()
                    cursor.execute(query, data)
                    conn.commit()

    def OnReadFile(self, line):
        try:
            self.plainTextEdit.insertPlainText("\r>> " +line.strip() + '\r')
        except Exception as e:
            pass

        lst = line.strip().split(',')

        try:
            시각, 종류, 단축코드, 가격, 수량 = lst
            가격 = int(가격)
            수량 = int(수량)

            if 종류 == '매수':
                self.QA_CSPAT00600.Query(계좌번호=self.계좌번호, 입력비밀번호=self.비밀번호, 종목번호=단축코드, 주문수량=수량, 주문가=가격, 매매구분=self.매수, 호가유형코드=self.매수방법, 신용거래코드=self.신용거래코드, 주문조건구분=self.조건없음)
            if 종류 == '매도':
                self.QA_CSPAT00600.Query(계좌번호=self.계좌번호, 입력비밀번호=self.비밀번호, 종목번호=단축코드, 주문수량=수량, 주문가=가격, 매매구분=self.매도, 호가유형코드=self.매도방법, 신용거래코드=self.신용거래코드, 주문조건구분=self.조건없음)
        except Exception as e:
            pass

    def fileselect(self):
        ret = QFileDialog.getOpenFileName(self, 'Open file',self.file, "CSV,TXT(*.csv;*.txt)")
        self.file = ret[0]
        self.lineEdit.setText(self.file)

    def StartWatcher(self):
        self.계좌번호 = self.comboBox.currentText().strip()
        self.비밀번호 = self.lineEdit_pwd.text().strip()

        self.fw = FileWatcher(filename=self.file, callback=self.OnReadFile, encoding='utf-8')
        self.fw.start()


Ui_거래결과, QtBaseClass_거래결과 = uic.loadUiType(UI_DIR+"거래결과.ui")
class 화면_거래결과(QDialog, Ui_거래결과):

    def __init__(self, parent=None):
        super(화면_거래결과, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('거래결과 조회')
        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        self.columns = []

        with sqlite3.connect(DATABASE) as conn:
            query = "select distinct 로봇명 from 거래결과 order by 로봇명"
            df = pdsql.read_sql_query(query, con=conn)
            for name in df['로봇명'].values.tolist():
                self.comboBox.addItem(name)

    def inquiry(self):
        로봇명 = self.comboBox.currentText().strip()
        with sqlite3.connect(DATABASE) as conn:
            query = """
                select 로봇명, UUID, 일자, 체결시각, 단축종목번호, 종목명, 매매구분, 주문번호, 체결번호, 주문수량, 주문가격, 체결수량, 체결가격, 주문평균체결가격 
                from 거래결과
                where  로봇명='%s'
                order by 일자, 체결시각
            """ % 로봇명
            df = pdsql.read_sql_query(query, con=conn)

            self.model.update(df)
            for i in range(len(df.columns)):
                self.tableView.resizeColumnToContents(i)


Ui_버전, QtBaseClass_버전 = uic.loadUiType(UI_DIR+"버전.ui")
class 화면_버전(QDialog, Ui_버전):

    def __init__(self, parent=None):
        super(화면_버전, self).__init__(parent)
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)
        self.setWindowTitle('버전')
        self.parent = parent

        self.model = PandasModel()
        self.tableView.setModel(self.model)

        df = DataFrame(data=프로그램정보,columns=['A','B'])

        self.model.update(df)
        for i in range(len(df.columns)):
            self.tableView.resizeColumnToContents(i)
            

########################################################################################################################
# sky work !!!
########################################################################################################################
class screen_update_worker(QThread):

    finished = pyqtSignal(str)

    def run(self):

        while True:

            str = 'Main UI Update...'                

            self.finished.emit(str)
            #self.msleep(MAIN_UPDATE_INTERVAL)
            QTest.qWait(MAIN_UPDATE_INTERVAL)    
########################################################################################################################

########################################################################################################################
class t8416_Call_Worker(QThread):

    finished = pyqtSignal(int)

    def run(self):

        while True:

            self.finished.emit(t8416_call_count)
            #self.msleep(1100)
            QTest.qWait(1100)
########################################################################################################################

########################################################################################################################
class t8416_Put_Worker(QThread):

    finished = pyqtSignal(int)

    def run(self):

        while True:

            self.finished.emit(t8416_put_count)
            #self.msleep(1100)
            QTest.qWait(1100)
########################################################################################################################

########################################################################################################################
# 텔레그램 송수신시 약 1.2초 정도 전달지연 시간 발생함
class telegram_send_worker(QThread):

    finished = pyqtSignal(str)

    def run(self):

        while True:
            
            dt = datetime.datetime.now()
            
            global telegram_toggle, FLAG_ASYM, FLAG_NODE, FLAG_OLOH
            global FLAG_GUEST_CONTROL

            # 텔레그램 Webhook 등록여부를 체크한다.
            chk_webhook = Check_Webhook()

            if chk_webhook is not None:

                if chk_webhook.url != '':

                    # Webhook을 삭제한다.
                    Delete_Webhook()

                    str = '웹훅 삭제...'
                    print(str)
                else:
                    str = 'None'
            else:
                str = 'None' 

            telegram_toggle = not telegram_toggle

            #str = 'None'
            
            # 텔레그램 명령어 파싱
            element = telegram_command.split()
            
            command_count = len(element)

            if command_count > 0:

                command = []

                for i in range(command_count):

                    command.append(element[i])

                if command_count == 1 and command[0] == '/start':

                    FLAG_ASYM = True
                    FLAG_NODE = True
                    FLAG_OLOH = True

                elif command_count == 1 and command[0] == 'Allstop':

                    FLAG_ASYM = True
                    FLAG_NODE = True
                    FLAG_OLOH = True

                elif command_count == 1 and command[0] == 'Allgo':

                    FLAG_ASYM = True
                    FLAG_NODE = True
                    FLAG_OLOH = True

                elif command_count == 2 and command[0] == 'Go':

                    if command[1] == 'a':                    

                        FLAG_ASYM = True
                        FLAG_NODE = False
                        FLAG_OLOH = False

                    elif command[1] == 'n':

                        FLAG_ASYM = False
                        FLAG_NODE = True
                        FLAG_OLOH = False

                    elif command[1] == 'o':

                        FLAG_ASYM = False
                        FLAG_NODE = False
                        FLAG_OLOH = True

                    elif command[1] == 'an':

                        FLAG_ASYM = True
                        FLAG_NODE = True
                        FLAG_OLOH = False

                    elif command[1] == 'ao':

                        FLAG_ASYM = True
                        FLAG_NODE = False
                        FLAG_OLOH = True

                    elif command[1] == 'no':

                        FLAG_ASYM = False
                        FLAG_NODE = True
                        FLAG_OLOH = True

                    elif command[1] == 'ano':

                        FLAG_ASYM = True
                        FLAG_NODE = True
                        FLAG_OLOH = True                
                    else:
                        FLAG_ASYM = False
                        FLAG_NODE = False
                        FLAG_OLOH = False
                else:
                    FLAG_ASYM = False
                    FLAG_NODE = False
                    FLAG_OLOH = False

                if SELFID == 'soojin65':
                    
                    if command[0] == 'Allstop':
                        if FLAG_GUEST_CONTROL:
                            FLAG_GUEST_CONTROL = False
                            #ToMyTelegram('Allstop...')
                        else:
                            pass
                    elif command[0] == 'Allgo':
                        if not FLAG_GUEST_CONTROL:
                            FLAG_GUEST_CONTROL = True
                            #ToMyTelegram('Allgo...')
                        else:
                            pass
                    else:
                        pass
                else:
                    pass                  

                if TELEGRAM_SERVICE and flag_telegram_on and (command[0] == 'Go' or command[0] == '/start'):

                    if telegram_toggle:

                        # 선물 OL/OH 알람
                        if fut_oloh_str != '' and FLAG_OLOH:
                            str = fut_oloh_str
                            ToYourTelegram(str)
                        else:
                            pass

                        # 차월물 옵션 OLOH 보고
                        if nm_call_oloh_str != '' and nm_put_oloh_str != '':
                            str = nm_call_oloh_str + ', ' + nm_put_oloh_str
                            ToYourTelegram(str)
                        else:
                            pass

                        # 옵션맥점 발생 알람
                        '''
                        if call_low_node_str != '' and FLAG_NODE:

                            str = call_low_node_str
                            ToYourTelegram(str)
                        else:
                            pass

                        if call_high_node_str != '' and FLAG_NODE:

                            str = call_high_node_str
                            ToYourTelegram(str)
                        else:
                            pass

                        if put_low_node_str != '' and FLAG_NODE:

                            str = put_low_node_str
                            ToYourTelegram(str)
                        else:
                            pass

                        if put_high_node_str != '' and FLAG_NODE:

                            str = put_high_node_str
                            ToYourTelegram(str)
                        else:
                            pass                        

                        if telegram_send_str_call_low != '' and FLAG_NODE:

                            str = telegram_send_str_call_low
                            ToYourTelegram(str)
                        else:
                            pass

                        if telegram_send_str_call_high != '' and FLAG_NODE:

                            str = telegram_send_str_call_high
                            ToYourTelegram(str)
                        else:
                            pass

                        if telegram_send_str_put_low != '' and FLAG_NODE:

                            str = telegram_send_str_put_low
                            ToYourTelegram(str)
                        else:
                            pass

                        if telegram_send_str_put_high != '' and FLAG_NODE:

                            str = telegram_send_str_put_high
                            ToYourTelegram(str)
                        else:
                            pass                               
                        
                        # 비대칭장(장의 형태) 알람
                        if 비대칭장 != '' and FLAG_ASYM:
                            str = 비대칭장
                            ToYourTelegram(str)
                        else:
                            pass
                        '''
                    else:
                        pass                
                    
                    if TARGET_MONTH_SELECT == 1:

                        # kp200 맥점 알람
                        if kp200_low_node_str != '' and FLAG_NODE:

                            str = kp200_low_node_str
                            ToYourTelegram(str)
                        else:
                            pass

                        if kp200_high_node_str != '' and FLAG_NODE:

                            str = kp200_high_node_str
                            ToYourTelegram(str)
                        else:
                            pass
                    else:
                        pass                
                else:
                    pass  
            else:
                pass            

            self.finished.emit(str)
            #self.msleep(1000 * TELEGRAM_SEND_INTERVAL)
            QTest.qWait(1000 * TELEGRAM_SEND_INTERVAL)
########################################################################################################################

########################################################################################################################
class telegram_listen_worker(QThread):

    finished = pyqtSignal(str)

    def run(self):

        while True:

            if TELEGRAM_SERVICE and flag_telegram_on:

                # 텔레그램 메시지 수신
                if SELFID == 'soojin65':
                    #str = FromMyTelegram()
                    print('텔레그램 수신 메시지 =', str)
                    pass
                else:
                    str = FromYourTelegram()
                    #print('텔레그램 수신 메시지 =', str)
            else:
                str = 'Stopped by Tool...'

            self.finished.emit(str)
            #self.msleep(1000 * TELEGRAM_POLLING_INTERVAL)
            QTest.qWait(1000 * TELEGRAM_POLLING_INTERVAL)
########################################################################################################################

########################################################################################################################
class RealDataWorker(QThread):
    # argument는 없는 단순 trigger, 데이터는 queue를 통해서 전달됨
    trigger = pyqtSignal()

    def __init__(self, producer_queue, consumer_queue):
        super().__init__()
        self.producer_queue = producer_queue          # 데이터를 받는 용
        self.consumer_queue = consumer_queue          
        
    def run(self):
        while True:
            if not self.producer_queue.empty():
                data = self.producer_queue.get()
                self.consumer_queue.put(data)
                #print('consumer_queue =', data)
                self.trigger.emit()                
            else:
                pass
########################################################################################################################
# 당월물 옵션전광판 class
########################################################################################################################
#Ui_당월물옵션전광판, QtBaseClass_당월물옵션전광판 = uic.loadUiType(UI_DIR+"당월물옵션전광판.ui")

Ui_선물옵션전광판, QtBaseClass_선물옵션전광판 = uic.loadUiType(UI_DIR + UI_STYLE)
class 화면_선물옵션전광판(QDialog, Ui_선물옵션전광판):

    def __init__(self, parent=None):
        super(화면_선물옵션전광판, self).\
            __init__(parent, flags = Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)
        self.setAttribute(Qt.WA_DeleteOnClose)        

        self.parent = parent        
        self.setupUi(self)
        
        global 모니터번호
        
        global TARGET_MONTH_SELECT, MONTH_FIRSTDAY
        global widget_title, CURRENT_MONTH, NEXT_MONTH, MONTH_AFTER_NEXT, SP500, DOW, NASDAQ, fut_code
        global KSE_START_HOUR        
        global call_node_state, put_node_state, COREVAL

        self.producer_queue = Queue()
        self.consumer_queue = Queue()

        self.real_data_worker = RealDataWorker(self.producer_queue, self.consumer_queue)
        self.real_data_worker.trigger.connect(self.process_realdata)        
        self.real_data_worker.daemon = True
        self.real_data_worker.start()

        self.상태그림 = ['▼', '▬', '▲']
        self.상태문자 = ['매도', '대기', '매수']
        self.특수문자 = \
        ['☆', '★', '※', '○', '●', '◎', '☀', '☁', '√', '↗', '⬈', '↘', '⬊', '↑', '⬆', '↓', '⬇', '↕', '♣', '♠', '♥', '♦', 'Δ', '【', '】', '🕘', '✔', '⬍', '⌛', '⬀ ⬁ ⬂ ⬃']

        self.특수문자_숫자 = ['⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾']
        
        # 다중모니터와 WQHD 해상도에서 초기화면 표시를 위한 Setting
        모니터번호 = QtWidgets.QApplication.desktop().screenNumber(QtWidgets.QApplication.desktop().cursor().pos())
        screen = QtGui.QDesktopWidget().screenGeometry(모니터번호)

        print('모니터화면 번호 = ', 모니터번호)
        
        print('current month = %s, month firstday = %s, next month = %s, month after next = %s, next month select = %s, SP500 = %s, DOW = %s, NASDAQ = %s, WTI = %s' \
            % (CURRENT_MONTH, MONTH_FIRSTDAY, NEXT_MONTH, MONTH_AFTER_NEXT, TARGET_MONTH_SELECT, SP500, DOW, NASDAQ, WTI))

        left = screen.left()
        top = screen.top()

        if screen.width() > 1920:

            width = 1920
        else:
            width = screen.width()

        if screen.height() > 1080:

            height = 1080
        else:
            height = screen.height()

        self.setGeometry(left, top + 30, width, height - 60)

        self.showMaximized()

        self.XQ_t0167 = t0167(parent=self)              
        
        # 위젯 선언 및 초기화
        self.pushButton_add.setStyleSheet("background-color: lightGray")
        self.pushButton_remove.setStyleSheet("background-color: lightGray")
        
        # label_msg, label_atm 관련 setFont 추후 검토필요!!!
        self.label_msg.setStyleSheet('background-color: lawngreen; color: blue')
        self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))
        self.label_msg.setText("🕘")
        
        self.label_atm.setStyleSheet('background-color: yellow; color: black')
        self.label_atm.setFont(QFont("Consolas", 9, QFont.Bold))
        self.label_atm.setText("Basis(양합:양차)")
        
        self.label_kospi.setText("KOSPI: 가격 (전일대비, 등락율)")
        self.label_kospi.setStyleSheet('background-color: black ; color: yellow')
        self.label_kosdaq.setText("KOSDAQ: 가격 (전일대비, 등락율)")
        self.label_kosdaq.setStyleSheet('background-color: black ; color: yellow')

        if NightTime:
            self.label_samsung.setText("SP500: 가격 (전일대비, 등락율)")
        else:
            self.label_samsung.setText("SAMSUNG: 가격 (전일대비, 등락율)")

        self.label_samsung.setStyleSheet('background-color: black ; color: yellow')

        self.label_1st.setText("WTI: 가격 (전일대비, 등락율)")
        self.label_1st.setStyleSheet('background-color: black ; color: yellow')
        self.label_2nd.setText("DOW: 가격 (전일대비, 등락율, 진폭)")
        self.label_2nd.setStyleSheet('background-color: black ; color: yellow')
        self.label_3rd.setText("NASDAQ: 가격 (전일대비, 등락율)")
        self.label_3rd.setStyleSheet('background-color: black ; color: yellow')

        stylesheet = "::section{Background-color: lightGray}"

        # call tablewidget 초기화
        self.tableWidget_call.setRowCount(ActvalCount)
        self.tableWidget_call.setColumnCount(Option_column.OID.value + 1)
        
        self.tableWidget_call.horizontalHeader().setStyleSheet(stylesheet)
        self.tableWidget_call.horizontalHeader().setFont(QFont("Consolas", 9, QFont.Bold))

        self.tableWidget_call.setHorizontalHeaderLabels(['C', '행사가', '▲:▼\n✓', '기준가', '월저', '월고', '전저', '전고', 
        '종가\n✓', '피봇\n✓', '시가\n✓', '저가', '현재가', '고가', '시가갭\n(%)', '대비\n(%)', '진폭', '∑PVP', '∑OI', 'OI↕'])
        self.tableWidget_call.verticalHeader().setVisible(False)

        #self.tableWidget_call.horizontalHeader().setSectionResizeMode(1)

        self.tableWidget_call.setAlternatingRowColors(True)

        # put tablewidget 초기화
        self.tableWidget_put.setRowCount(ActvalCount)
        self.tableWidget_put.setColumnCount(Option_column.OID.value + 1)

        self.tableWidget_put.horizontalHeader().setStyleSheet(stylesheet)
        self.tableWidget_put.horizontalHeader().setFont(QFont("Consolas", 9, QFont.Bold))

        self.tableWidget_put.setHorizontalHeaderLabels(['P', '행사가', '▲:▼\n✓', '기준가', '월저', '월고', '전저', '전고', 
        '종가\n✓', '피봇\n✓', '시가\n✓', '저가', '현재가', '고가', '시가갭\n(%)', '대비\n(%)', '진폭', '∑PVP', '∑OI', 'OI↕'])
        self.tableWidget_put.verticalHeader().setVisible(False)

        #self.tableWidget_put.horizontalHeader().setSectionResizeMode(1)

        self.tableWidget_put.setAlternatingRowColors(True)
        
        call_cell_widget = []
        put_cell_widget = []
        
        for i in range(ActvalCount):

            call_cell_widget.append(QWidget())            
            lay_out = QHBoxLayout(call_cell_widget[i])
            lay_out.addWidget(QCheckBox())
            lay_out.setAlignment(Qt.AlignCenter)          
            call_cell_widget[i].setLayout(lay_out)         
            self.tableWidget_call.setCellWidget(i, 0, call_cell_widget[i])

            put_cell_widget.append(QWidget())            
            lay_out = QHBoxLayout(put_cell_widget[i])
            lay_out.addWidget(QCheckBox())
            lay_out.setAlignment(Qt.AlignCenter)           
            put_cell_widget[i].setLayout(lay_out)
            self.tableWidget_put.setCellWidget(i, 0, put_cell_widget[i])

            item = QTableWidgetItem("{0}".format(''))
            self.tableWidget_call.setItem(i, 0, item)
            self.tableWidget_call.item(i, 0).setBackground(QBrush(검정색))

            item = QTableWidgetItem("{0}".format(''))
            self.tableWidget_put.setItem(i, 0, item)
            self.tableWidget_put.item(i, 0).setBackground(QBrush(검정색))

            for j in range(self.tableWidget_call.columnCount() - 1):

                item = QTableWidgetItem("{0}".format(''))
                self.tableWidget_call.setItem(i, j + 1, item)
                self.tableWidget_call.item(i, j + 1).setBackground(QBrush(검정색))

                item = QTableWidgetItem("{0}".format(''))
                self.tableWidget_put.setItem(i, j + 1, item)
                self.tableWidget_put.item(i, j + 1).setBackground(QBrush(검정색))

        # 선물 tablewidget 초기화
        self.tableWidget_fut.setRowCount(3)
        self.tableWidget_fut.setColumnCount(Futures_column.OID.value + 1)

        self.tableWidget_fut.horizontalHeader().setStyleSheet(stylesheet)
        self.tableWidget_fut.horizontalHeader().setFont(QFont("Consolas", 9, QFont.Bold))

        self.tableWidget_fut.setHorizontalHeaderLabels(
            ['SBOM', '▲▼', 'HMSC', 'HMDC', 'HMSR', 'MDHR', 'HCR', 'HRR', '전저', '전고', '종가', '피봇', '시가', '저가',
             '현재가', '고가', '시가갭', '대비', '진폭', '체결', 'FR', 'OI', 'OI↕'])
        self.tableWidget_fut.verticalHeader().setVisible(False)

        #self.tableWidget_fut.horizontalHeader().setSectionResizeMode(1)

        self.tableWidget_fut.setAlternatingRowColors(True)

        item = QTableWidgetItem("{0}".format('CME'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(0, 0, item)

        item = QTableWidgetItem("{0}".format('KSE'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(1, 0, item)

        item = QTableWidgetItem("{0}".format('KP200'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(녹색))
        self.tableWidget_fut.setItem(2, 0, item)

        # future's value 초기화
        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.건수비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.건수비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.잔량비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.잔량비.value, item)  

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.거래량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.거래량.value, item)       

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.거래량.value, item) 

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.매수건수.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.매도건수.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.매수잔량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.매도잔량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.건수비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(검정색))
        item.setForeground(QBrush(흰색))
        self.tableWidget_fut.setItem(2, Futures_column.잔량비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.전저.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.전고.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.피봇.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.종가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.종가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.시가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.시가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.시가갭.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(옅은회색))
        self.tableWidget_fut.setItem(0, Futures_column.저가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(옅은회색))
        self.tableWidget_fut.setItem(1, Futures_column.저가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(옅은회색))
        self.tableWidget_fut.setItem(2, Futures_column.저가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.현재가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.현재가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.현재가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(옅은회색))
        self.tableWidget_fut.setItem(0, Futures_column.고가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(옅은회색))
        self.tableWidget_fut.setItem(1, Futures_column.고가.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(옅은회색))
        self.tableWidget_fut.setItem(2, Futures_column.고가.value, item)

        item = QTableWidgetItem("{0}".format('FD\n진폭비'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.대비.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.진폭.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.거래량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.거래량.value, item)

        item = QTableWidgetItem("{0}".format('중심가'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.거래량.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.FR.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.FR.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.FR.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.OI.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.OI.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.OI.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(0, Futures_column.OID.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(1, Futures_column.OID.value, item)

        item = QTableWidgetItem("{0}".format('-'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.OID.value, item)

        item = QTableWidgetItem("{0}".format('Scale\nFactor'))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.진폭.value, item)

        # Quote tablewidget 초기화
        self.tableWidget_quote.setRowCount(1)
        self.tableWidget_quote.setColumnCount(Quote_column.미결종합.value)

        self.tableWidget_quote.horizontalHeader().setStyleSheet(stylesheet)
        self.tableWidget_quote.horizontalHeader().setFont(QFont("Consolas", 9, QFont.Bold))

        self.tableWidget_quote.setHorizontalHeaderLabels(['콜CMSC', '콜CMDC', '콜CMSR', '콜CMDR',
                                                          '풋CMSC', '풋CMDC', '풋CMSR', '풋CMDCR', '콜HCR', '콜HRR',
                                                          '풋HCR', '풋HRR', '∑HCRΔ/∑HRRΔ', '∑콜OI:∑풋OI'])
        self.tableWidget_quote.verticalHeader().setVisible(False)

        header = self.tableWidget_quote.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeToContents)
        header.setSectionResizeMode(12, QHeaderView.Stretch)

        #self.tableWidget_quote.horizontalHeader().setSectionResizeMode(1)
        self.tableWidget_quote.verticalHeader().setStretchLastSection(True)
        self.tableWidget_quote.clearContents()

        # 수급 tablewidget 초기화
        self.tableWidget_supply.setRowCount(1)
        self.tableWidget_supply.setColumnCount(Supply_column.프로그램.value + 1)

        self.tableWidget_supply.horizontalHeader().setStyleSheet(stylesheet)
        self.tableWidget_supply.horizontalHeader().setFont(QFont("Consolas", 9, QFont.Bold))

        self.tableWidget_supply.setHorizontalHeaderLabels(['외인선물', '프로그램', '외인현물', '개인선물', '기관선물', '∑선물/∑현물'])
        self.tableWidget_supply.verticalHeader().setVisible(False)

        header = self.tableWidget_supply.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.Stretch)

        #self.tableWidget_supply.horizontalHeader().setSectionResizeMode(1)
        self.tableWidget_supply.verticalHeader().setStretchLastSection(True)
        self.tableWidget_supply.clearContents()        

        kp200_realdata['KP200'] = 0.0
        kp200_realdata['전저'] = 0.0
        kp200_realdata['전고'] = 0.0
        kp200_realdata['종가'] = 0.0
        kp200_realdata['피봇'] = 0.0
        kp200_realdata['시가'] = 0.0
        kp200_realdata['시가갭'] = 0.0
        kp200_realdata['저가'] = 0.0
        kp200_realdata['현재가'] = 0.0
        kp200_realdata['고가'] = 0.0
        kp200_realdata['대비'] = 0
        kp200_realdata['진폭'] = 0.0
        kp200_realdata['거래량'] = 0
        kp200_realdata['미결'] = 0
        kp200_realdata['미결증감'] = 0

        fut_realdata['KP200'] = 0.0
        fut_realdata['전저'] = 0.0
        fut_realdata['전고'] = 0.0
        fut_realdata['종가'] = 0.0
        fut_realdata['피봇'] = 0.0
        fut_realdata['시가'] = 0.0
        fut_realdata['시가갭'] = 0.0
        fut_realdata['저가'] = 0.0
        fut_realdata['현재가'] = 0.0
        fut_realdata['고가'] = 0.0
        fut_realdata['대비'] = 0
        fut_realdata['등락율'] = 0.0
        fut_realdata['진폭'] = 0.0
        fut_realdata['거래량'] = 0
        fut_realdata['미결'] = 0
        fut_realdata['미결증감'] = 0

        cme_realdata['KP200'] = 0.0
        cme_realdata['전저'] = 0.0
        cme_realdata['전고'] = 0.0
        cme_realdata['종가'] = 0.0
        cme_realdata['피봇'] = 0.0
        cme_realdata['시가'] = 0.0
        cme_realdata['시가갭'] = 0.0
        cme_realdata['저가'] = 0.0
        cme_realdata['현재가'] = 0.0
        cme_realdata['고가'] = 0.0
        cme_realdata['대비'] = 0
        cme_realdata['진폭'] = 0.0
        cme_realdata['거래량'] = 0
        cme_realdata['미결'] = 0
        cme_realdata['미결증감'] = 0              

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 0, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 2, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 3, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 4, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 5, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 6, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 7, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 8, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 9, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 10, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 11, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, 12, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_supply.setItem(0, Supply_column.외인선옵.value - 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_supply.setItem(0, Supply_column.개인선옵.value - 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_supply.setItem(0, Supply_column.기관선옵.value - 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_supply.setItem(0, Supply_column.외인현물.value - 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_supply.setItem(0, Supply_column.프로그램.value - 1, item)

        item = QTableWidgetItem('0')
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_supply.setItem(0, Supply_column.프로그램.value, item)
        
        fut_h_header = self.tableWidget_fut.horizontalHeader()
        fut_h_header.sectionClicked.connect(self.fut_horizontal_header_clicked)

        supply_h_header = self.tableWidget_supply.horizontalHeader()
        supply_h_header.sectionClicked.connect(self.supply_horizontal_header_clicked)

        quote_h_header = self.tableWidget_quote.horizontalHeader()
        quote_h_header.sectionClicked.connect(self.quote_horizontal_header_clicked)

        self.tableWidget_fut.cellClicked.connect(self.futtable_cell_clicked)
        self.tableWidget_supply.cellClicked.connect(self.supplytable_cell_clicked)
        self.tableWidget_quote.cellClicked.connect(self.quotetable_cell_clicked)        

        # 컬럼 헤더 click시 Event 처리용.
        call_h_header = self.tableWidget_call.horizontalHeader()
        call_h_header.sectionClicked.connect(self.call_horizontal_header_clicked)

        put_h_header = self.tableWidget_put.horizontalHeader()
        put_h_header.sectionClicked.connect(self.put_horizontal_header_clicked)

        self.tableWidget_call.cellClicked.connect(self.calltable_cell_clicked)
        self.tableWidget_put.cellClicked.connect(self.puttable_cell_clicked)
        
        self.tableWidget_call.verticalScrollBar().valueChanged.connect(self.calltable_vertical_scroll_position)
        self.tableWidget_put.verticalScrollBar().valueChanged.connect(self.puttable_vertical_scroll_position)        

        self.alternate_flag = True

        call_node_state = {'OLOH': True, '기준가': False, '월저': False, '월고': False, '전저': False, '전고': False, '종가': True, '피봇': True, '시가': True, '대비': False, '미결': False, '미결증감': False}
        put_node_state = {'OLOH': True, '기준가': False, '월저': False, '월고': False, '전저': False, '전고': False, '종가': True, '피봇': True, '시가': True, '대비': False, '미결': False, '미결증감': False}

        list_low1 = []
        list_low2 = []
        list_low3 = []
        list_low4 = []
        list_low5 = []

        list_high1 = []
        list_high2 = []
        list_high3 = []
        list_high4 = []
        list_high5 = []

        for i in range(len(DEFAULT_NODE_LIST)):

            list_low5.append(round(DEFAULT_NODE_LIST[i] - 0.05, 2))
            list_low4.append(round(DEFAULT_NODE_LIST[i] - 0.04, 2))
            list_low3.append(round(DEFAULT_NODE_LIST[i] - 0.03, 2))
            list_low2.append(round(DEFAULT_NODE_LIST[i] - 0.02, 2))
            list_low1.append(round(DEFAULT_NODE_LIST[i] - 0.01, 2))

            list_high1.append(round(DEFAULT_NODE_LIST[i] + 0.01, 2))
            list_high2.append(round(DEFAULT_NODE_LIST[i] + 0.02, 2))
            list_high3.append(round(DEFAULT_NODE_LIST[i] + 0.03, 2))
            list_high4.append(round(DEFAULT_NODE_LIST[i] + 0.04, 2))
            list_high5.append(round(DEFAULT_NODE_LIST[i] + 0.05, 2))

        if SELFID == 'soojin65':
            global ResizeRowsToContents

            ResizeRowsToContents = True
            COREVAL = DEFAULT_NODE_LIST
        else:
            COREVAL = DEFAULT_NODE_LIST + list_low1 + list_low2 + list_low3 + list_low4 + list_low5 + list_high1 + list_high2 + list_high3 + list_high4 + list_high5
        
        COREVAL.sort()
                        
        self.JIF = JIF(parent=self)

        self.YJ = YJ_(parent=self)
        self.YFC = YFC(parent=self)
        self.YS3 = YS3(parent=self)
        self.YOC = YOC(parent=self)

        self.IJ = IJ_(parent=self)
        self.S3 = S3_(parent=self)
        self.BM = BM_(parent=self)
        self.PM = PM_(parent=self)

        self.OVC = OVC(parent=self)
        self.OVH = OVH(parent=self)
        self.WOC = WOC(parent=self)
        self.MK2 = MK2(parent=self)
        
        dt = datetime.datetime.now()
        
        if int(current_str[0:2]) < 12:
            str = '[{0:02d}:{1:02d}:{2:02d}] ♣♣♣ Good Morning! Have a Good Day ♣♣♣\r'.format(dt.hour, dt.minute, dt.second)
        else:
            str = '[{0:02d}:{1:02d}:{2:02d}] ♣♣♣ Good Afternoon! Have a Good Day ♣♣♣\r'.format(dt.hour, dt.minute, dt.second)
        self.textBrowser.append(str)
        
        str = '[{0:02d}:{1:02d}:{2:02d}] OS Type : {3}\r'.format(dt.hour, dt.minute, dt.second, os_type)
        self.textBrowser.append(str) 
        
        if TARGET_MONTH_SELECT == 1:

            if os.path.exists('SkyBot_CM.exe'):

                buildtime = time.ctime(os.path.getmtime('SkyBot_CM.exe'))
            else:
                buildtime = time.ctime(os.path.getmtime(__file__))

        elif TARGET_MONTH_SELECT == 2:

            if os.path.exists('SkyBot_NM.exe'):

                buildtime = time.ctime(os.path.getmtime('SkyBot_NM.exe'))
            else:
                buildtime = time.ctime(os.path.getmtime(__file__))

        else:
            if os.path.exists('SkyBot_MAN.exe'):

                buildtime = time.ctime(os.path.getmtime('SkyBot_MAN.exe'))
            else:
                buildtime = time.ctime(os.path.getmtime(__file__))
        
        if TELEGRAM_SERVICE:

            # 텔레그램 Webhook 등록여부를 체크한다.
            chk_webhook = Check_Webhook()

            if chk_webhook is not None:

                if chk_webhook.url != '':
                    # Webhook을 삭제한다.                    
                    print('telegram webhook =', chk_webhook)

                    Delete_Webhook()

                    str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 웹훅을 삭제합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)
                    print(str)
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 웹훅이 없습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)
                    print(str)
            else:
                pass

            if not NightTime:

                if TARGET_MONTH_SELECT == 1:

                    if not REAL_SERVER:
                        widget_title = repr(current_month) + '월 만기 주간 선물옵션(모의투자) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    else:
                        widget_title = repr(current_month) + '월 만기 주간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                    print(widget_title)
                    ToYourTelegram("{0}월물 주간 선물옵션 SkyBot이 실행되었습니다.".format(repr(current_month)))

                elif TARGET_MONTH_SELECT == 2:

                    if not REAL_SERVER:
                        widget_title = repr(next_month) + '월 만기 주간 선물옵션(모의투자) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    else:
                        widget_title = repr(next_month) + '월 만기 주간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                    ToYourTelegram("{0}월물 주간 선물옵션 SkyBot이 실행되었습니다.".format(repr(next_month)))

                else:
                    widget_title = repr(month_after_next) + '월 만기 주간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                    ToYourTelegram("{0}월물 주간 선물옵션 SkyBot이 실행되었습니다.".format(repr(month_after_next)))
            else:
                KSE_START_HOUR = 18            

                if MANGI_YAGAN:

                    if TARGET_MONTH_SELECT == 1:

                        if not REAL_SERVER:
                            widget_title = repr(next_month) + '월 만기 야간 선물옵션(모의투자) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                        else:
                            widget_title = repr(next_month) + '월 만기 야간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                        ToYourTelegram("{0}월물 야간 선물옵션 SkyBot이 실행되었습니다.".format(repr(next_month)))

                        print('next_month =', next_month)

                    elif TARGET_MONTH_SELECT == 2:

                        if not REAL_SERVER:
                            widget_title = repr(month_after_next) + '월 만기 야간 선물옵션(모의투자) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                        else:
                            widget_title = repr(month_after_next) + '월 만기 야간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                        ToYourTelegram("{0}월물 야간 선물옵션 SkyBot이 실행되었습니다.".format(repr(month_after_next)))
                    else:
                        pass
                else:
                    if TARGET_MONTH_SELECT == 1:

                        if not REAL_SERVER:
                            widget_title = repr(current_month) + '월 만기 야간 선물옵션(모의투자) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                        else:
                            widget_title = repr(current_month) + '월 만기 야간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                        ToYourTelegram("{0}월물 야간 선물옵션 SkyBot이 실행되었습니다.".format(repr(current_month)))

                    elif TARGET_MONTH_SELECT == 2:

                        if not REAL_SERVER:
                            widget_title = repr(next_month) + '월 만기 야간 선물옵션(모의투자) 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                        else:
                            widget_title = repr(next_month) + '월 만기 야간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime

                        ToYourTelegram("{0}월물 야간 선물옵션 SkyBot이 실행되었습니다.".format(repr(next_month)))

                    else:
                        widget_title = repr(month_after_next) + '월 만기 야간 선물옵션 전광판' + '(' + today_title + ')' + ' build : ' + buildtime
                        ToYourTelegram("{0}월물 야간 선물옵션 SkyBot이 실행되었습니다.".format(repr(month_after_next)))
        else:
            pass
        
        self.setWindowTitle(widget_title)
                
        #str = '[{0:02d}:{1:02d}:{2:02d}] HL File Length = {3}\r'.format(adj_hour, adj_min, adj_sec, hlfile_line_number)
        #self.textBrowser.append(str)

        if SELFID == 'soojin65':
            str = '[{0:02d}:{1:02d}:{2:02d}] COREVAL = {3}\r'.format(adj_hour, adj_min, adj_sec, COREVAL)
            self.textBrowser.append(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] ResizeRowsToContents = {3}\r'.format(adj_hour, adj_min, adj_sec, ResizeRowsToContents)
            self.textBrowser.append(str)
        else:
            pass
        
        global 진성맥점

        진성맥점 = pre_진성맥점[:]
        print('진성맥점 =', 진성맥점)

        if bms_node_list:

            listsum = []

            for i in range(len(bms_node_list)):

                var1 = self.get_list_item(bms_node_list, i)
                var2 = self.get_list_item(bms_node_frequency_list, i)
                if var1 != None and var2 != None: # 유효한 것만 합친다 (결국 두 리스트중에서 작은 사이즈로)
                    listsum.append([var1, var2])

            new_node = sorted(listsum, key=operator.itemgetter(0))
            print('new node list =', new_node)

            for i in range(len(new_node)):

                str = '[{0:02d}:{1:02d}:{2:02d}] {3}번째 동적맥점 {4:.2f}(발생빈도수 = {5}) 추가됨...\r'.format \
                    (dt.hour, dt.minute, dt.second, i + 1, new_node[i][0], new_node[i][1])
                #self.textBrowser.append(str)

                item = QTableWidgetItem("{0:.2f}\n({1})".format(new_node[i][0], new_node[i][1]))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(lime))

                if NightTime:
                    self.tableWidget_fut.setItem(1, 2 + i, item)
                else:
                    self.tableWidget_fut.setItem(0, 2 + i, item)            
        else:
            pass    

        if bms_node_list:
            bms_node_list.sort()

            str = '[{0:02d}:{1:02d}:{2:02d}] 오늘의 중요맥점은'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] {3} 입니다.\r'.format(dt.hour, dt.minute, dt.second, bms_node_list)
            self.textBrowser.append(str)
        else:
            pass

        self.XingAdminCheck()

        self.checkBox_HS.stateChanged.connect(self.checkBox_HS_checkState)            
        
        # 쓰레드 시작은 start(), 종료는 terminate()
        '''
        self.t8416_callworker = t8416_Call_Worker()
        self.t8416_callworker.finished.connect(self.t8416_call_request)

        self.t8416_putworker = t8416_Put_Worker()
        self.t8416_putworker.finished.connect(self.t8416_put_request)
        '''
        # t2301 이벤트루프(1초당 2건) --> 옵션 실시간수신 문제 보완목적
        #self.t2301_event_loop = QEventLoop()
        #self.t2835_event_loop = QEventLoop()
        #self.o3126_event_loop = QEventLoop()

        # 이벤트루프를 사용하여 t8416 연속요청(1초당 1건) 처리
        #self.t8416_event_loop = QEventLoop()
        self.t8416_call_event_loop = QEventLoop()
        self.t8416_put_event_loop = QEventLoop()

        self.screen_update_worker = screen_update_worker()
        self.screen_update_worker.finished.connect(self.update_screen)
        
        self.telegram_send_worker = telegram_send_worker()
        self.telegram_send_worker.finished.connect(self.send_telegram_message)

        self.telegram_listen_worker = telegram_listen_worker()
        self.telegram_listen_worker.finished.connect(self.listen_telegram_message)
        
        self.tableWidget_call.resizeColumnsToContents()
        self.tableWidget_put.resizeColumnsToContents()
          
    @pyqtSlot()
    def process_realdata(self):

        if not self.consumer_queue.empty():

            data = self.consumer_queue.get()

            item = QTableWidgetItem("{0}".format(data['szTrCode']))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(검정색))
            item.setForeground(QBrush(녹색))
            self.tableWidget_fut.setItem(2, 0, item)

            self.RealData_Process(data)
        else:
            pass
            
    ## list에서 i번째 아이템을 리턴한다.
    def get_list_item(self, list, i):

        if i >= 0 and i < len(list):
            return list[i]
        else:
            return None
            
    # Xing 관리자모드 실행 체크함수
    def XingAdminCheck(self):

        # 프로세스가 관리자 권한으로 실행 여부
        dt = datetime.datetime.now()

        if ctypes.windll.shell32.IsUserAnAdmin():
            print('관리자권한으로 실행된 프로세스입니다.')
            str = '[{0:02d}:{1:02d}:{2:02d}] 관리자권한으로 실행된 프로세스입니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(str)
            return True
        else:
            '''
            print('일반권한으로 실행된 프로세스입니다.')
            str = '[{0:02d}:{1:02d}:{2:02d}] 일반권한으로 실행된 프로세스입니다.\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(str)
            '''
            return False

    # 다중모니터 스크린샷 함수
    def capture_screenshot(self):

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()

        if ResizeRowsToContents:
            self.tableWidget_fut.resizeRowsToContents()
        else:
            pass
        self.tableWidget_fut.resizeColumnsToContents()

        # Capture entire screen
        with mss() as sct:
            '''
            monitor = sct.monitors[2]
            sct_img = sct.grab(monitor)
            # Convert to PIL/Pillow Image
            return Image.frombytes('RGB', sct_img.size, sct_img.bgra, 'raw', 'BGRX')
            '''
            now = time.localtime()
            times = "%04d-%02d-%02d-%02d-%02d-%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

            for num, monitor in enumerate(sct.monitors[1:], 1):

                # Get raw pixels from the screen
                sct_img = sct.grab(monitor)

                # Create the Image
                img = Image.frombytes("RGB", sct_img.size, sct_img.bgra, "raw", "BGRX")

                # The same, but less efficient:
                # img = Image.frombytes('RGB', sct_img.size, sct_img.rgb)
                # saveas = "Screenshot {}{}".format(times, '.png')
                # And save it!
                # output = "monitor-{}.png".format(num)

                output = "Monitor{} {}.png".format(num, times)
                img.save(output)

                str = '[{0:02d}:{1:02d}:{2:02d}] {3}번째 화면을 캡처했습니다.\r'.format(now.tm_hour, now.tm_min, now.tm_sec, num)
                self.textBrowser.append(str)
                print(str)    

    def timeout(self):
        
        dt = datetime.datetime.now()
        str = '{0:02d}:{1:02d}:{2:02d}'.format(dt.hour, dt.minute, dt.second)
        self.label_msg.setText(str)

    def checkBox_HS_checkState(self):

        global flag_checkBox_HS, flag_telegram_on 

        dt = datetime.datetime.now()
        now = time.localtime()

        times = "%04d-%02d-%02d-%02d-%02d-%02d" % \
                (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

        if self.checkBox_HS.isChecked() == True:

            flag_checkBox_HS = True

            str = '[{0:02d}:{1:02d}:{2:02d}] HANGSENG, EUROFX, GOLD 실시간수신을 중지합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)
            
            self.OVC.UnadviseRealDataWithKey(종목코드=HANGSENG)
            self.OVC.UnadviseRealDataWithKey(종목코드=EUROFX)
            self.OVC.UnadviseRealDataWithKey(종목코드=GOLD)

            '''
            str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 수급요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)

            self.MK2.UnadviseRealData()
                        
            str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 호가요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)

            self.OVH.UnadviseRealData()
            '''

            if not NightTime:
                
                str = '[{0:02d}:{1:02d}:{2:02d}] S3, BM, PM요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)

                self.S3.UnadviseRealData()
                self.BM.UnadviseRealData()
                self.PM.UnadviseRealData()
            else:
                pass

            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 중지합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)

            if self.telegram_send_worker.isRunning():
                self.telegram_send_worker.terminate()
            else:
                pass

            if self.telegram_listen_worker.isRunning():
                self.telegram_listen_worker.terminate()
            else:
                pass

            self.pushButton_remove.setStyleSheet("background-color: lightGray")
            flag_telegram_on = False
            '''
            if not NightTime:

                futures_graph_csv = "Futures_temp {}{}".format(times, '.csv')
                df_futures_graph.to_csv(futures_graph_csv, encoding='ms949')

                str = '[{0:02d}:{1:02d}:{2:02d}] 국내선물 Graph 파일을 저장합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)
            else:
                pass  

            dow_graph_csv = "DOW_temp {}{}".format(times, '.csv')
            df_dow_graph.to_csv(dow_graph_csv, encoding='ms949')

            sp500_graph_csv = "SP500_temp {}{}".format(times, '.csv')
            df_sp500_graph.to_csv(sp500_graph_csv, encoding='ms949')

            nasdaq_graph_csv = "NASDAQ_temp {}{}".format(times, '.csv')
            df_nasdaq_graph.to_csv(nasdaq_graph_csv, encoding='ms949')

            wti_graph_csv = "WTI_temp {}{}".format(times, '.csv')
            df_wti_graph.to_csv(wti_graph_csv, encoding='ms949')

            str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 Graph 파일을 저장합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)
            '''
        else:
            flag_checkBox_HS = False

            str = '[{0:02d}:{1:02d}:{2:02d}] HANGSENG, EUROFX, GOLD 실시간수신을 재시작합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)

            self.OVC.AdviseRealData(종목코드=HANGSENG)
            self.OVC.AdviseRealData(종목코드=EUROFX)
            self.OVC.AdviseRealData(종목코드=GOLD)
            
            '''
            str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 호가를 재요청합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)
            
            # 해외선물 호가 실시간 요청(호가정보가 국내용인듯)
            self.OVH.AdviseRealData(종목코드=SP500)
            self.OVH.AdviseRealData(종목코드=DOW)
            self.OVH.AdviseRealData(종목코드=NASDAQ)
            self.OVH.AdviseRealData(종목코드=WTI)
            self.OVH.AdviseRealData(종목코드=HANGSENG)                
            self.OVH.AdviseRealData(종목코드=EUROFX)                
            self.OVH.AdviseRealData(종목코드=GOLD)
            
            self.MK2.AdviseRealData(심볼코드=KRWUSD)
            self.MK2.AdviseRealData(심볼코드=EURUSD)
            self.MK2.AdviseRealData(심볼코드=SP500_SND)
            self.MK2.AdviseRealData(심볼코드=DOW_SND)
            self.MK2.AdviseRealData(심볼코드=NASDAQ_SND)
            self.MK2.AdviseRealData(심볼코드=HANGSENG_SND)
            self.MK2.AdviseRealData(심볼코드=WTI_SND)
            self.MK2.AdviseRealData(심볼코드=GOLD_SND)
            '''

            if not NightTime:
                str = '[{0:02d}:{1:02d}:{2:02d}] S3, BM, PM을 재요청합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)

                self.S3.AdviseRealData(SAMSUNG)

                self.BM.AdviseRealData(FUTURES)
                self.BM.AdviseRealData(KOSPI)

                self.PM.AdviseRealData()
            else:
                pass

            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 재기동합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)
            
            self.telegram_send_worker.daemon = True
            self.telegram_send_worker.start()
            
            self.telegram_listen_worker.daemon = True
            self.telegram_listen_worker.start()

            self.pushButton_remove.setStyleSheet("background-color: lawngreen")
            flag_telegram_on = True

    @pyqtSlot(int)
    def call_horizontal_header_clicked(self, idx):

        global call_node_state

        if idx == Option_column.OLOH.value or idx == Option_column.기준가.value or idx == Option_column.월저.value or idx == Option_column.월고.value or \
            idx == Option_column.전저.value or idx == Option_column.전고.value or idx == Option_column.종가.value or \
                idx == Option_column.피봇.value or idx == Option_column.시가.value:

            col_text = self.tableWidget_call.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:
                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_call.setHorizontalHeaderItem(idx, item)
                print("call header column.. ", idx, col_text)

                if idx == Option_column.OLOH.value:
                    call_node_state['OLOH'] = True
                elif idx == Option_column.기준가.value:
                    call_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    call_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    call_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    call_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    call_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    call_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    call_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    call_node_state['시가'] = True
                else:
                    pass
            else:
                item = QTableWidgetItem(col_text.replace('\n✓', ''))
                self.tableWidget_call.setHorizontalHeaderItem(idx, item)
                print("call header column.. ", idx, col_text)

                global call_scroll_end_position

                if call_scroll_end_position > option_pairs_count:

                    call_scroll_end_position = option_pairs_count
                else:
                    pass

                if idx == Option_column.OLOH.value:

                    call_node_state['OLOH'] = False

                elif idx == Option_column.기준가.value:

                    call_node_state['기준가'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월저.value:

                    call_node_state['월저'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월고.value:

                    call_node_state['월고'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전저.value:

                    call_node_state['전저'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전고.value:

                    call_node_state['전고'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.종가.value:

                    call_node_state['종가'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.피봇.value:

                    call_node_state['피봇'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))

                elif idx == Option_column.시가.value:

                    call_node_state['시가'] = False

                    for i in range(call_scroll_begin_position, call_scroll_end_position):

                        self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
            
            # cell focus 이동
            self.tableWidget_call.setCurrentCell(ActvalCount, Option_column.OID.value)
            self.call_scroll_coloring()
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

    @pyqtSlot(int)
    def put_horizontal_header_clicked(self, idx):

        global put_node_state

        if idx == Option_column.OLOH.value or idx == Option_column.기준가.value or idx == Option_column.월저.value or idx == Option_column.월고.value or \
            idx == Option_column.전저.value or idx == Option_column.전고.value or idx == Option_column.종가.value or \
                idx == Option_column.피봇.value or idx == Option_column.시가.value:

            col_text = self.tableWidget_put.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:
                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_put.setHorizontalHeaderItem(idx, item)
                print("put header column.. ", idx, col_text)

                if idx == Option_column.OLOH.value:
                    put_node_state['OLOH'] = True
                elif idx == Option_column.기준가.value:
                    put_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    put_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    put_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    put_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    put_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    put_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    put_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    put_node_state['시가'] = True
                else:
                    pass
            else:
                item = QTableWidgetItem(col_text.replace('\n✓', ''))
                self.tableWidget_put.setHorizontalHeaderItem(idx, item)
                print("put header column.. ", idx, col_text)

                global put_scroll_end_position

                if put_scroll_end_position > option_pairs_count:

                    put_scroll_end_position = option_pairs_count
                else:
                    pass

                if idx == Option_column.OLOH.value:

                    put_node_state['OLOH'] = False

                elif idx == Option_column.기준가.value:

                    put_node_state['기준가'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월저.value:

                    put_node_state['월저'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.월고.value:

                    put_node_state['월고'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전저.value:

                    put_node_state['전저'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(검정색))

                elif idx == Option_column.전고.value:

                    put_node_state['전고'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))

                elif idx == Option_column.종가.value:

                    put_node_state['종가'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))

                elif idx == Option_column.피봇.value:

                    put_node_state['피봇'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))

                elif idx == Option_column.시가.value:

                    put_node_state['시가'] = False

                    for i in range(put_scroll_begin_position, put_scroll_end_position):

                        self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
            
            # cell focus 이동
            self.tableWidget_put.setCurrentCell(ActvalCount, Option_column.OID.value)
            self.put_scroll_coloring()
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()

    @pyqtSlot(int)
    def fut_horizontal_header_clicked(self, idx):

        # cell focus 이동
        self.tableWidget_fut.setCurrentCell(3, Futures_column.OID.value)

        self.tableWidget_fut.resizeRowsToContents()
        self.tableWidget_fut.resizeColumnsToContents()

    @pyqtSlot(int)
    def supply_horizontal_header_clicked(self, idx):

        # cell focus 이동
        self.tableWidget_supply.setCurrentCell(1, Supply_column.프로그램.value)

        self.tableWidget_supply.resizeRowsToContents()
        self.tableWidget_supply.resizeColumnsToContents()

    @pyqtSlot(int)
    def quote_horizontal_header_clicked(self, idx):

        # cell focus 이동
        self.tableWidget_quote.setCurrentCell(1, Quote_column.미결종합.value)

        self.tableWidget_quote.resizeRowsToContents()
        self.tableWidget_quote.resizeColumnsToContents()

    @pyqtSlot(int, int)
    def calltable_cell_clicked(self, row, col):

        cell = self.tableWidget_call.item(row, col)

        if cell is not None:

            txt = "call table cell({0},{1}) clicked = {2}".format(row, col, cell.text())
            print(txt)

            if atm_str != '':

                if row < atm_index:

                    call_positionCell = self.tableWidget_call.item(atm_index + 9, 1)
                else:
                    call_positionCell = self.tableWidget_call.item(atm_index - 9, 1)

                self.tableWidget_call.scrollToItem(call_positionCell)

            else:
                pass

            # cell focus 이동
            self.tableWidget_call.setCurrentCell(ActvalCount, Option_column.OID.value)
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

    @pyqtSlot(int, int)
    def puttable_cell_clicked(self, row, col):

        cell = self.tableWidget_put.item(row, col)

        if cell is not None:

            txt = "put table cell({0},{1}) clicked = {2}".format(row, col, cell.text())
            print(txt)

            if atm_str != '':

                if row < atm_index:

                    put_positionCell = self.tableWidget_put.item(atm_index + 20, 1)
                else:
                    put_positionCell = self.tableWidget_put.item(atm_index - 9, 1)

                self.tableWidget_put.scrollToItem(put_positionCell)
            else:
                pass

            # cell focus 이동
            self.tableWidget_put.setCurrentCell(ActvalCount, Option_column.OID.value)
        else:
            pass

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()

    @pyqtSlot(int, int)
    def futtable_cell_clicked(self, row, col):
        
        cell = self.tableWidget_fut.item(row, col)

        txt = "fut table cell({0},{1}) clicked = {2}".format(row, col, cell.text())
        print(txt)
        
        if cell is not None:

            global 콜매수, 콜매도, 풋매수, 풋매도, 손절, 익절
            
            fut_txt = cell.text()

            if row == 2 and col == Futures_column.OLOH.value:

                if self.telegram_flag:

                    콜매수 = self.tableWidget_fut.item(2, Futures_column.매수건수.value).text()
                    콜매도 = self.tableWidget_fut.item(2, Futures_column.매도건수.value).text()
                    풋매수 = self.tableWidget_fut.item(2, Futures_column.매수잔량.value).text()
                    풋매도 = self.tableWidget_fut.item(2, Futures_column.매도잔량.value).text()
                    손절 = self.tableWidget_fut.item(2, Futures_column.건수비.value).text()
                    익절 = self.tableWidget_fut.item(2, Futures_column.잔량비.value).text()

                    if 콜매수 != '콜매수':

                        str = '[{0:02d}:{1:02d}:{2:02d}] 콜매수 {3} 진입...\r'.format(adj_hour, adj_min, adj_sec, 콜매수)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if 콜매도 != '콜매도':

                        str = '[{0:02d}:{1:02d}:{2:02d}] 콜매도 {3} 진입...\r'.format(adj_hour, adj_min, adj_sec, 콜매도)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if 풋매수 != '풋매수':

                        str = '[{0:02d}:{1:02d}:{2:02d}] 풋매수 {3} 진입...\r'.format(adj_hour, adj_min, adj_sec, 풋매수)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if 풋매도 != '풋매도':

                        str = '[{0:02d}:{1:02d}:{2:02d}] 풋매도 {3} 진입...\r'.format(adj_hour, adj_min, adj_sec, 풋매도)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if 손절 != '손절':

                        str = '[{0:02d}:{1:02d}:{2:02d}] 손절 {3}틱 설정됨\r'.format(adj_hour, adj_min, adj_sec, 손절)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if 익절 != '익절':

                        str = '[{0:02d}:{1:02d}:{2:02d}] 익절 {3}틱 설정됨\r'.format(adj_hour, adj_min, adj_sec, 익절)
                        self.textBrowser.append(str)
                    else:
                        pass

                    item = QTableWidgetItem("{0}".format('R'))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 전송이 예약되었습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    #self.telegram_flag = not self.telegram_flag
                else:
                    item = QTableWidgetItem("{0}".format('T'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.OLOH.value, item)

                    item = QTableWidgetItem("{0}".format('콜매수'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.매수건수.value, item)

                    item = QTableWidgetItem("{0}".format('콜매도'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.매도건수.value, item)

                    item = QTableWidgetItem("{0}".format('풋매수'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.매수잔량.value, item)

                    item = QTableWidgetItem("{0}".format('풋매도'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.매도잔량.value, item)

                    item = QTableWidgetItem("{0}".format('손절'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.건수비.value, item)

                    item = QTableWidgetItem("{0}".format('익절'))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(흰색))
                    self.tableWidget_fut.setItem(2, Futures_column.잔량비.value, item)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 전송예약이 취소되었습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    #self.telegram_flag = not self.telegram_flag
            else:
                pass

            # cell focus 이동
            self.tableWidget_fut.setCurrentCell(3, Futures_column.OID.value)

            self.tableWidget_fut.resizeRowsToContents()
            self.tableWidget_fut.resizeColumnsToContents()             
        else:
            pass

    @pyqtSlot(int, int)
    def supplytable_cell_clicked(self, row, col):

        cell = self.tableWidget_supply.item(row, col)

        txt = "supply table cell({0},{1}) clicked = {2}".format(row, col, cell.text())
        print(txt)

        if cell is not None:

            # cell focus 이동
            self.tableWidget_supply.setCurrentCell(1, 5)

            self.tableWidget_supply.resizeRowsToContents()
            self.tableWidget_supply.resizeColumnsToContents()
        else:
            pass

    @pyqtSlot(int, int)
    def quotetable_cell_clicked(self, row, col):

        cell = self.tableWidget_quote.item(row, col)

        txt = "quote table cell({0},{1}) clicked = {2}".format(row, col, cell.text())
        print(txt)

        if cell is not None:

            # cell focus 이동
            self.tableWidget_quote.setCurrentCell(1, Quote_column.미결종합.value - 1)

            self.tableWidget_quote.resizeRowsToContents()
            self.tableWidget_quote.resizeColumnsToContents()
        else:
            pass
    
    @pyqtSlot(int)
    def calltable_vertical_scroll_position(self, row):

        global call_scroll_begin_position, call_scroll_end_position

        call_scroll_begin_position = row

        if call_scroll_begin_position <= option_pairs_count:

            scroll_depth = 19

            call_scroll_end_position = call_scroll_begin_position + scroll_depth

            print('call scroll position -----> from %d to %d' % (call_scroll_begin_position, call_scroll_end_position))

            self.call_scroll_coloring()

        elif call_scroll_begin_position > option_pairs_count:
            pass

        if ResizeRowsToContents:
            self.tableWidget_call.resizeRowsToContents()
        else:
            pass
        self.tableWidget_call.resizeColumnsToContents()

    @pyqtSlot(int)
    def puttable_vertical_scroll_position(self, row):

        global put_scroll_begin_position, put_scroll_end_position

        put_scroll_begin_position = row

        if put_scroll_begin_position <= option_pairs_count:

            scroll_depth = 19

            put_scroll_end_position = put_scroll_begin_position + scroll_depth

            print('put scroll position -----> from %d to %d' % (put_scroll_begin_position, put_scroll_end_position))

            self.put_scroll_coloring()

        elif put_scroll_begin_position > option_pairs_count:
            pass

        if ResizeRowsToContents:
            self.tableWidget_put.resizeRowsToContents()
        else:
            pass
        self.tableWidget_put.resizeColumnsToContents()
    
    def all_node_set(self):

        global call_node_state, put_node_state

        for idx in range(Option_column.기준가.value, Option_column.시가갭.value):

            col_text = self.tableWidget_call.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:
            
                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_call.setHorizontalHeaderItem(idx, item)

                if idx == Option_column.기준가.value:
                    call_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    call_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    call_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    call_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    call_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    call_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    call_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    call_node_state['시가'] = True
                else:
                    pass
            else:
            	pass

            col_text = self.tableWidget_put.horizontalHeaderItem(idx).text()

            if col_text.find('✓') == -1:

                item = QTableWidgetItem(col_text + '\n✓')
                self.tableWidget_put.setHorizontalHeaderItem(idx, item)

                if idx == Option_column.기준가.value:
                    put_node_state['기준가'] = True
                elif idx == Option_column.월저.value:
                    put_node_state['월저'] = True
                elif idx == Option_column.월고.value:
                    put_node_state['월고'] = True
                elif idx == Option_column.전저.value:
                    put_node_state['전저'] = True
                elif idx == Option_column.전고.value:
                    put_node_state['전고'] = True
                elif idx == Option_column.종가.value:
                    put_node_state['종가'] = True
                elif idx == Option_column.피봇.value:
                    put_node_state['피봇'] = True
                elif idx == Option_column.시가.value:
                    put_node_state['시가'] = True
                else:
                    pass
            else:
                pass    

    @pyqtSlot(int)
    def t8415_call_request(self, index):
        try:
            XQ = t8415(parent=self)

            if today_str == MONTH_FIRSTDAY:
                XQ.Query(단축코드=call_code[index], 시작일자=yesterday_str, 종료일자=today_str)
            else:
                XQ.Query(단축코드=call_code[index], 시작일자=MONTH_FIRSTDAY, 종료일자=today_str)

        except:
            pass

    @pyqtSlot(int)
    def t8415_put_request(self, index):
        try:
            XQ = t8415(parent=self)

            if today_str == MONTH_FIRSTDAY:
                XQ.Query(단축코드=put_code[index], 시작일자=yesterday_str, 종료일자=today_str)
            else:
                XQ.Query(단축코드=put_code[index], 시작일자=MONTH_FIRSTDAY, 종료일자=today_str)

        except:
            pass

    #@pyqtSlot(int)
    def t8416_call_request(self, index):
        try:
            XQ = t8416(parent=self)

            if today_str == MONTH_FIRSTDAY:
                XQ.Query(단축코드=call_code[index], 시작일자=yesterday_str, 종료일자=today_str)
            else:
                XQ.Query(단축코드=call_code[index], 시작일자=MONTH_FIRSTDAY, 종료일자=today_str)
        except:
            pass

    #@pyqtSlot(int)
    def t8416_put_request(self, index):
        try:
            XQ = t8416(parent=self)

            if today_str == MONTH_FIRSTDAY:
                XQ.Query(단축코드=put_code[index], 시작일자=yesterday_str, 종료일자=today_str)
            else:
                XQ.Query(단축코드=put_code[index], 시작일자=MONTH_FIRSTDAY, 종료일자=today_str)
        except:
            pass

    @pyqtSlot(str)
    def send_telegram_message(self, str):

        try:
            dt = datetime.datetime.now()

            if market_service:
                str = '[{0:02d}:{1:02d}:{2:02d}] Telegram Send Message = {3}\r'.format(adj_hour, adj_min, adj_sec, str)
                print(str)
            else:
                pass
        except:
            pass

    @pyqtSlot(str)
    def listen_telegram_message(self, str):

        try:
            dt = datetime.datetime.now()

            global telegram_command

            if market_service:
                
                if str != '':
                    telegram_command = str
                    
                    if SELFID == 'soojin65':
                        str = '[{0:02d}:{1:02d}:{2:02d}] Telegram Listen Command is {3}\r'.format(adj_hour, adj_min, adj_sec, telegram_command)                        
                        print(str)
                    else:
                        str = '[{0:02d}:{1:02d}:{2:02d}] Telegram Listen Message is {3}, {4:.2f}({5:.2f}) ms\r'.format \
                            (adj_hour, adj_min, adj_sec, telegram_command, main_ui_update_time, bc_ui_update_time)
                        self.textBrowser.append(str)
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] Telegram Listen Message is None, {3:.2f}({4:.2f}) ms\r'.format \
                        (adj_hour, adj_min, adj_sec, main_ui_update_time, bc_ui_update_time)
                    self.textBrowser.append(str)                
            else:
                pass
        except:
            pass

    # 처리시간 해법필요
    def OHLC_Gen(self):

        global fut_tick_list, fut_value_list, df_fut_ohlc, df_fut_ohlc_1min, df_fut_ohlc_5min, df_fut_ohlc_15min        
        global sp500_tick_list, sp500_value_list, df_sp500_ohlc, df_sp500_ohlc_1min, df_sp500_ohlc_5min, df_sp500_ohlc_15min
        global dow_tick_list, dow_value_list, df_dow_ohlc, df_dow_ohlc_1min, df_dow_ohlc_5min, df_dow_ohlc_15min
        global nasdaq_tick_list, nasdaq_value_list, df_nasdaq_ohlc, df_nasdaq_ohlc_1min, df_nasdaq_ohlc_5min, df_nasdaq_ohlc_15min
        global wti_tick_list, wti_value_list, df_wti_ohlc, df_wti_ohlc_1min, df_wti_ohlc_5min, df_wti_ohlc_15min
        global eurofx_tick_list, eurofx_value_list, df_eurofx_ohlc, df_eurofx_ohlc_1min, df_eurofx_ohlc_5min, df_eurofx_ohlc_15min
        global hangseng_tick_list, hangseng_value_list, df_hangseng_ohlc, df_hangseng_ohlc_1min, df_hangseng_ohlc_5min, df_hangseng_ohlc_15min
        global gold_tick_list, gold_value_list, df_gold_ohlc, df_gold_ohlc_1min, df_gold_ohlc_5min, df_gold_ohlc_15min

        start_time = timeit.default_timer()            
        dt = datetime.datetime.now()

        # 선물 OHLC 데이타프레임 생성
        if market_service and not NightTime:
                  
            time_str = 선물_체결시간[0:2] + ':' + 선물_체결시간[2:4] + ':' + 선물_체결시간[4:6]
            chetime = nowDate + ' ' + time_str

            fut_tick_list.append(chetime)
            fut_value_list.append(선물_현재가)

            temp_dict = {"value": fut_value_list}
            df_fut_ohlc = pd.DataFrame(temp_dict, index=fut_tick_list)
            
            # Converting the index as DatetimeIndex
            df_fut_ohlc.index = pd.to_datetime(df_fut_ohlc.index)

            # 1 Minute resample
            df_fut_ohlc_1min = df_fut_ohlc.resample('1T').ohlc()
            #print('\r선물 틱 데이타 {}\r 선물 OHLC {}\r'.format(df, df_fut_ohlc_1min))
            # 5 Minute resample
            #df_fut_ohlc_5min = df.resample('5T').ohlc()
            # 15 Minute resample
            #df_fut_ohlc_15min = df.resample('15T').ohlc()
        else:
            pass
        
        # SP500 OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        sp500_tick_list.append(chetime)
        sp500_value_list.append(SP500_현재가)

        temp_dict = {"value": sp500_value_list}
        df = pd.DataFrame(temp_dict, index=sp500_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_sp500_ohlc_1min = df.resample('1T').ohlc()
        # 5 Minute resample
        #df_sp500_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_sp500_ohlc_15min = df.resample('15T').ohlc()        

        # DOW OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        dow_tick_list.append(chetime)
        dow_value_list.append(DOW_현재가)

        temp_dict = {"value": dow_value_list}
        df = pd.DataFrame(temp_dict, index=dow_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_dow_ohlc_1min = df.resample('1T').ohlc()
        #print('\rDOW 틱 데이타 {}\r DOW OHLC {}\r'.format(df, df_dow_ohlc_1min))
        # 5 Minute resample
        #df_dow_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_dow_ohlc_15min = df.resample('15T').ohlc()
        
        # NASDAQ OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        nasdaq_tick_list.append(chetime)
        nasdaq_value_list.append(NASDAQ_현재가)

        temp_dict = {"value": nasdaq_value_list}
        df = pd.DataFrame(temp_dict, index=nasdaq_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_nasdaq_ohlc_1min = df.resample('1T').ohlc()
        # 5 Minute resample
        #df_nasdaq_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_nasdaq_ohlc_15min = df.resample('15T').ohlc()

        # WTI OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        wti_tick_list.append(chetime)
        wti_value_list.append(WTI_현재가)

        temp_dict = {"value": wti_value_list}
        df = pd.DataFrame(temp_dict, index=wti_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_wti_ohlc_1min = df.resample('1T').ohlc()
        # 5 Minute resample
        #df_wti_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_wti_ohlc_15min = df.resample('15T').ohlc()
        
        # EUROFX OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        eurofx_tick_list.append(chetime)
        eurofx_value_list.append(EUROFX_현재가)

        temp_dict = {"value": eurofx_value_list}
        df = pd.DataFrame(temp_dict, index=eurofx_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_eurofx_ohlc_1min = df.resample('1T').ohlc()
        # 5 Minute resample
        #df_eurofx_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_eurofx_ohlc_15min = df.resample('15T').ohlc()
        
        # HANGSENG OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        hangseng_tick_list.append(chetime)
        hangseng_value_list.append(HANGSENG_현재가)

        temp_dict = {"value": hangseng_value_list}
        df = pd.DataFrame(temp_dict, index=hangseng_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_hangseng_ohlc_1min = df.resample('1T').ohlc()
        # 5 Minute resample
        #df_hangseng_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_hangseng_ohlc_15min = df.resample('15T').ohlc()

        # GOLD OHLC 데이타프레임 생성        
        time_str = OVC_체결시간[0:2] + ':' + OVC_체결시간[2:4] + ':' + OVC_체결시간[4:6]
        chetime = nowDate + ' ' + time_str

        gold_tick_list.append(chetime)
        gold_value_list.append(GOLD_현재가)

        temp_dict = {"value": gold_value_list}
        df = pd.DataFrame(temp_dict, index=gold_tick_list)

        # Converting the index as DatetimeIndex
        df.index = pd.to_datetime(df.index)

        # 1 Minute resample
        df_gold_ohlc_1min = df.resample('1T').ohlc()
        # 5 Minute resample
        #df_gold_ohlc_5min = df.resample('5T').ohlc()
        # 15 Minute resample
        #df_gold_ohlc_15min = df.resample('15T').ohlc()        

        str = '[{0:02d}:{1:02d}:{2:02d}] OHLC_Gen Update : {3:.2f} ms...\r'.format(\
                    adj_hour, adj_min, adj_sec, (timeit.default_timer() - start_time) * 1000)
        print(str)

    #@pyqtSlot(dict)
    @pyqtSlot(str)
    def update_screen(self, data):

        try:
            start_time = timeit.default_timer()            
            dt = datetime.datetime.now()
            current_str = dt.strftime('%H:%M:%S')

            global main_ui_update_time

            global flag_fut_low, flag_fut_high
            global flag_kp200_low, flag_kp200_high
            global flag_offline, receive_real_ovc            

            global call_plot_data, put_plot_data, centerval_plot_data
            global selected_call, selected_put, selected_opt_list
            global SP500_당일종가, DOW_당일종가, NASDAQ_당일종가, WTI_당일종가, EUROFX_당일종가, HANGSENG_당일종가, GOLD_당일종가 
            global drate_scale_factor 
            
            self.alternate_flag = not self.alternate_flag
            
            # 서버시간 기준으로 1분마다 체크!!!
            if self.alternate_flag and flag_heartbeat:
                self.heartbeat_check()
            else:
                pass
            '''
            if flag_checkBox_HS and self.alternate_flag and dt.second % OPTION_BOARD_UPDATE_INTERVAL == 0:

                # 해외선물 옵션호가                
                XQ = o3126(parent=self)
                XQ.Query(시장구분='F',단축코드='HSIV20')
                self.o3126_event_loop.exec_()
                
                if NightTime:
                    XQ = t2835(parent=self)
                    XQ.Query(월물=t2835_month_info)
                    self.t2835_event_loop.exec_()
                else:
                    XQ = t2301(parent=self)                    
                    XQ.Query(월물=t2301_month_info, 미니구분='G')
                    self.t2301_event_loop.exec_()                
            else:
                pass
            '''
            # Market 유형을 시간과 함께 표시
            self.market_type_display(self.alternate_flag)

            # 실시간 서비스                     
            if FLAG_GUEST_CONTROL and receive_real_ovc:
                
                # 옵션 등락율 scale factor 읽어들임
                drate_scale_factor = float(self.tableWidget_fut.item(2, Futures_column.진폭.value).text())
                
                if not NightTime:
                    self.display_atm(self.alternate_flag)
                else:
                    pass
                
                if not self.alternate_flag and not flag_checkBox_HS:

                    # 선택된 콜, 풋 검사
                    old_selected_opt_list = copy.deepcopy(selected_opt_list)

                    call_idx = []
                    put_idx = []
                    selected_opt_list = []

                    for i in range(option_pairs_count):

                        if self.tableWidget_call.cellWidget(i, 0).findChild(type(QCheckBox())).isChecked():
                            call_idx.append(i)
                            selected_opt_list.append(opt_actval[i])
                        else:
                            pass

                        if self.tableWidget_put.cellWidget(i, 0).findChild(type(QCheckBox())).isChecked():
                            put_idx.append(i)
                            selected_opt_list.append(opt_actval[i])
                        else:
                            pass

                    selected_call = call_idx                    
                    selected_put = put_idx

                    # 마지막 행사가 추가해야 쓰레드 정상동작함(?)
                    selected_opt_list.append(opt_actval[option_pairs_count-1])
                else:
                    pass                
                
                # 전체 행사가 검색 및 저장 --> plot chart에서 직접 df_call_graph, df_put_graph 데이타 접근토록 수정
                '''
                for actval, infos in data.items():

                    index = opt_actval.index(actval)

                    # 옵션그래프 초기화 및 옵션데이타 가져오기
                    
                    # 선택된 콜그래프 저장
                    for i in range(len(selected_call)):

                        if index == selected_call[i]:

                            call_plot_data[index] = infos[0]                            
                        else:
                            pass                    

                    # 선택된 풋그래프 저장
                    for i in range(len(selected_put)):

                        if index == selected_put[i]:

                            put_plot_data[index] = infos[1]
                        else:
                            pass
                '''
                
                if market_service and flag_option_start:                    

                    # 수정미결 표시
                    if not NightTime:

                        if flag_checkBox_HS:

                            self.call_oi_update()
                            self.put_oi_update()
                        else:
                            pass

                        self.oi_sum_display()
                    else:
                        pass

                    if self.alternate_flag:

                        # 콜 테이블 데이타 갱신
                        self.call_db_update()
                        self.call_volume_power_display()
                    else:
                        # 풋 테이블 데이타 갱신
                        self.put_db_update()
                        self.put_volume_power_display()
                    
                    # 시작과 동시에 컬러링 갱신
                    if not flag_checkBox_HS:

                        # 선물, 콜, 풋 현재가 클리어
                        #self.cv_color_clear()
                        #self.price_color_clear()

                        global flag_call_low_update, flag_call_high_update, flag_put_low_update, flag_put_high_update
                        global flag_call_cross_coloring, flag_put_cross_coloring, flag_clear

                        # 매 10분마다 교차컬러링 수행
                        if not flag_call_low_update and not flag_call_high_update and not flag_put_low_update and not flag_put_high_update:

                            if flag_put_cross_coloring or (self.alternate_flag and dt.minute % CROSS_COLOR_INTERVAL == 0 and dt.second == 0):

                                flag_call_cross_coloring = True

                                str = '[{0:02d}:{1:02d}:{2:02d}] Call 교차컬러링을 수행합니다.\r'.format(adj_hour, adj_min, adj_sec)
                                self.textBrowser.append(str)
                                print(str)

                                if not flag_clear:
                                    
                                    self.call_node_color_clear()
                                    self.put_node_color_clear()
                                    flag_clear = True
                                    
                                    if bms_node_list:
                                        self.search_moving_node()
                                    else:
                                        pass
                                else:
                                    pass 

                                self.call_open_check()   
                                self.call_cross_color_update()        
                                self.call_node_color_update()
                                self.call_coreval_color_update()                                

                            elif flag_call_cross_coloring or (not self.alternate_flag and dt.minute % CROSS_COLOR_INTERVAL == 0 and dt.second == 0):

                                flag_put_cross_coloring = True

                                str = '[{0:02d}:{1:02d}:{2:02d}] Put 교차컬러링을 수행합니다.\r'.format(adj_hour, adj_min, adj_sec)
                                self.textBrowser.append(str)
                                print(str)                                        
                                
                                if not flag_clear:

                                    self.call_node_color_clear()
                                    self.put_node_color_clear()
                                    flag_clear = True

                                    if bms_node_list:
                                        self.search_moving_node()
                                    else:
                                        pass
                                else:
                                    pass

                                self.put_open_check()
                                self.put_cross_color_update()         
                                self.put_node_color_update()
                                self.put_coreval_color_update()
                            else:
                                pass
                        else:
                            pass

                        if flag_call_cross_coloring and flag_put_cross_coloring:

                            flag_call_cross_coloring = False
                            flag_put_cross_coloring = False
                            flag_clear = False
                        else:
                            pass
                        
                        if self.alternate_flag:

                            # 콜 테이블 데이타 갱신
                            #self.call_db_update()
                            #self.call_volume_power_display()
                            #self.call_oi_update()                          

                            # 콜 저가, 고가 맥점 컬러갱신
                            if flag_call_low_update:

                                if bms_node_list:
                                    self.search_moving_node()
                                else:
                                    pass
                                
                                self.call_low_node_coloring()
                                
                                item = QTableWidgetItem('저가')
                                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                                item = QTableWidgetItem('고가')
                                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                                flag_call_low_update = False
                            else:
                                pass

                            if flag_call_high_update:

                                if bms_node_list:
                                    self.search_moving_node()
                                else:
                                    pass

                                self.call_high_node_coloring()
                                
                                item = QTableWidgetItem('저가')
                                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                                item = QTableWidgetItem('고가')
                                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                                flag_call_high_update = False
                            else:
                                pass                                                               
                        else:
                            # 풋 테이블 데이타 갱신
                            #self.put_db_update()
                            #self.put_volume_power_display()
                            #self.put_oi_update()                       
                            
                            # 풋 저가, 고가 맥점 컬러갱신
                            if flag_put_low_update:

                                if bms_node_list:
                                    self.search_moving_node()
                                else:
                                    pass

                                self.put_low_node_coloring()

                                item = QTableWidgetItem('저가')
                                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
                                
                                item = QTableWidgetItem('고가')
                                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                                flag_put_low_update = False
                            else:
                                pass

                            if flag_put_high_update:

                                if bms_node_list:
                                    self.search_moving_node()
                                else:
                                    pass

                                self.put_high_node_coloring()
                                
                                item = QTableWidgetItem('저가')
                                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                                item = QTableWidgetItem('고가')
                                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                                flag_put_high_update = False
                            else:
                                pass                                                 

                        if not dongsi_hoga:
                        
                            # 진성 의미가인 경우 blinking(매우 중요 !!!)
                            global call_low_coreval_str, call_high_coreval_str, put_low_coreval_str, put_high_coreval_str
                            global call_low_node_count, call_high_node_count, put_low_node_count, put_high_node_count
                            global call_low_node_list, call_high_node_list, put_low_node_list, put_high_node_list
                            global call_low_node_str, call_high_node_str, put_low_node_str, put_high_node_str

                            if flag_call_low_coreval:
                                self.call_low_coreval_color_blink(self.alternate_flag)
                            else:                        
                                call_low_coreval_str = ''
                                #call_low_node_count = 0
                                call_low_node_list = []
                                call_low_node_str = ''

                            if flag_call_high_coreval:
                                self.call_high_coreval_color_blink(self.alternate_flag)
                            else:
                                call_high_coreval_str = ''
                                #call_high_node_count = 0
                                call_high_node_list = []
                                call_high_node_str = ''

                            if flag_put_low_coreval:
                                self.put_low_coreval_color_blink(self.alternate_flag)
                            else:
                                put_low_coreval_str = ''
                                #put_low_node_count = 0
                                put_low_node_list = []
                                put_low_node_str = ''

                            if flag_put_high_coreval:
                                self.put_high_coreval_color_blink(self.alternate_flag)                        
                            else:
                                put_high_coreval_str = '' 
                                #put_high_node_count = 0
                                put_high_node_list = []
                                put_high_node_str = ''

                            global kp200_low_node_str, kp200_high_node_str                            

                            if flag_kp200_low_node:

                                self.kp200_low_color_blink(self.alternate_flag)
                            else:
                                kp200_low_node_str = ''

                            if flag_kp200_high_node:

                                self.kp200_high_color_blink(self.alternate_flag)
                            else:
                                kp200_high_node_str = ''
                        else:
                            pass                                               
                    else:
                        pass

                    # 비대칭장 탐색
                    if not flag_checkBox_HS and not dongsi_hoga and abs(콜대비_퍼센트_평균) > 0 and abs(풋대비_퍼센트_평균) > 0:

                        self.asym_detect(self.alternate_flag)
                    else:
                        pass                                              
                else:
                    pass          
            else:
                pass

            # 증권사 서버초기화(오전 7시 10분경)전에 프로그램을 미리 오프라인으로 전환하여야 Crash 발생안함
            if NightTime:
                
                #시스템시간 = dt.hour * 3600 + dt.minute * 60 + dt.second
                #보정된시간 = 시스템시간 - 시스템_서버_시간차

                if 서버시간 == 6 * 3600:

                    # 해외선물 지수요청 취소                    
                    self.OVC.UnadviseRealData()

                    str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 지수요청을 취소합니다. \r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)
                    print(str)
                else:
                    pass

                # 장종료 1분후에 프로그램을 오프라인으로 전환시킴
                if yagan_service_terminate and 서버시간 >= (6 * 3600 + 1 * 60):

                    if self.parent.connection.IsConnected():

                        SP500_당일종가 = SP500_현재가
                        DOW_당일종가 = DOW_현재가
                        NASDAQ_당일종가 = NASDAQ_현재가
                        WTI_당일종가 = WTI_현재가
                        EUROFX_당일종가 = EUROFX_현재가
                        HANGSENG_당일종가 = HANGSENG_현재가
                        GOLD_당일종가 = GOLD_현재가

                        # 다음날 해외선물 피봇계산을 위해 종료시(오전 6시) 마지막 값 저장
                        str = '[{0:02d}:{1:02d}:{2:02d}] CME 종가 = {3:.2f}\r'.format(adj_hour, adj_min, adj_sec, CME_당일종가)
                        self.textBrowser.append(str)
                        print(str)

                        str = '[{0:02d}:{1:02d}:{2:02d}] SP500 Low = {3:.2f}, SP500 High = {4:.2f}, SP500 Close = {5:.2f}\r'.format \
                            (adj_hour, 
                            adj_min, 
                            adj_sec,
                            SP500_저가, SP500_고가, SP500_당일종가)
                        self.textBrowser.append(str)
                        print(str)

                        str = '[{0:02d}:{1:02d}:{2:02d}] DOW Low = {3:0.1f}, DOW High = {4:0.1f}, DOW Close = {5:0.1f}\r'.format \
                            (adj_hour, 
                            adj_min, 
                            adj_sec,
                            DOW_저가, DOW_고가, DOW_당일종가)
                        self.textBrowser.append(str)
                        print(str)

                        str = '[{0:02d}:{1:02d}:{2:02d}] NASDAQ Low = {3:.2f}, NASDAQ High = {4:.2f}, NASDAQ Close = {5:.2f}\r'.format \
                            (adj_hour, 
                            adj_min, 
                            adj_sec,
                            NASDAQ_저가, NASDAQ_고가, NASDAQ_당일종가)
                        self.textBrowser.append(str)
                        print(str)

                        str = '[{0:02d}:{1:02d}:{2:02d}] WTI Low = {3:.2f}, WTI High = {4:.2f}, WTI Close = {5:.2f}\r'.format \
                            (adj_hour, 
                            adj_min, 
                            adj_sec,
                            WTI_저가, WTI_고가, WTI_당일종가)
                        self.textBrowser.append(str)
                        print(str)

                        str = '[{0:02d}:{1:02d}:{2:02d}] 야간장 주요정보를 저징합니다...\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                        print(str)
                        
                        # 야간장의 주요정보를 저장
                        with open('nighttime.txt', mode='w') as nighttime_file:

                            now = time.localtime()

                            times = "%04d-%02d-%02d-%02d-%02d-%02d" % \
                                    (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

                            file_str = '{}\n'.format(times)
                            nighttime_file.write(file_str)
                            file_str = '\n'
                            nighttime_file.write(file_str)
                            file_str = '################# < Futures Index of the Last Night > ###################\n'
                            nighttime_file.write(file_str)                            
                            file_str = 'CME FUT Last Close = {0}\n'.format(CME_당일종가)
                            nighttime_file.write(file_str)
                            file_str = '##################### < Foreign Futures Index of the Last Night > ####################\n'
                            nighttime_file.write(file_str)
                            file_str = 'S&P 500 Last Low = {0}\n'.format(SP500_저가)
                            nighttime_file.write(file_str)
                            file_str = 'S&P 500 Last High = {0}\n'.format(SP500_고가)
                            nighttime_file.write(file_str)
                            file_str = 'S&P 500 Last Close = {0}\n'.format(SP500_당일종가)
                            nighttime_file.write(file_str)
                            file_str = 'DOW Last Low = {0}\n'.format(DOW_저가)
                            nighttime_file.write(file_str)
                            file_str = 'DOW Last High = {0}\n'.format(DOW_고가)
                            nighttime_file.write(file_str)
                            file_str = 'DOW Last Close = {0}\n'.format(DOW_당일종가)
                            nighttime_file.write(file_str)
                            file_str = 'NASDAQ Last Low = {0}\n'.format(NASDAQ_저가)
                            nighttime_file.write(file_str)
                            file_str = 'NASDAQ Last High = {0}\n'.format(NASDAQ_고가)
                            nighttime_file.write(file_str)
                            file_str = 'NASDAQ Last Close = {0}\n'.format(NASDAQ_당일종가)
                            nighttime_file.write(file_str)
                            file_str = 'WTI Last Low = {0}\n'.format(WTI_저가)
                            nighttime_file.write(file_str)
                            file_str = 'WTI Last High = {0}\n'.format(WTI_고가)
                            nighttime_file.write(file_str)
                            file_str = 'WTI Last Close = {0}\n'.format(WTI_당일종가)
                            nighttime_file.write(file_str)
                            file_str = 'EUROFX Last Low = {0}\n'.format(EUROFX_저가)
                            nighttime_file.write(file_str)
                            file_str = 'EUROFX Last High = {0}\n'.format(EUROFX_고가)
                            nighttime_file.write(file_str)
                            file_str = 'EUROFX Last Close = {0}\n'.format(EUROFX_당일종가)
                            nighttime_file.write(file_str)
                            file_str = 'HANGSENG Last Low = {0}\n'.format(HANGSENG_저가)
                            nighttime_file.write(file_str)
                            file_str = 'HANGSENG Last High = {0}\n'.format(HANGSENG_고가)
                            nighttime_file.write(file_str)
                            file_str = 'HANGSENG Last Close = {0}\n'.format(HANGSENG_당일종가)
                            nighttime_file.write(file_str)
                            file_str = 'GOLD Last Low = {0}\n'.format(GOLD_저가)
                            nighttime_file.write(file_str)
                            file_str = 'GOLD Last High = {0}\n'.format(GOLD_고가)
                            nighttime_file.write(file_str)
                            file_str = 'GOLD Last Close = {0}\n'.format(GOLD_당일종가)
                            nighttime_file.write(file_str)
                            nighttime_file.close()

                        str = '[{0:02d}:{1:02d}:{2:02d}] 서버연결을 종료합니다...\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                        print(str)

                        flag_offline = True  

                        self.parent.connection.disconnect()
                    else:
                        self.parent.statusbar.showMessage("오프라인")
                else:
                    pass
            else:
                # 장종료 1분후에 프로그램을 오프라인으로 전환시킴
                if jugan_service_terminate and 서버시간 >= (15 * 3600 + 46 * 60):

                    if self.parent.connection.IsConnected():

                        str = '[{0:02d}:{1:02d}:{2:02d}] 서버연결을 종료합니다...\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                        print(str)

                        flag_offline = True  

                        self.parent.connection.disconnect()
                    else:
                        self.parent.statusbar.showMessage("오프라인")
                else:
                    pass  
            
            if not flag_offline:

                main_ui_update_time = (timeit.default_timer() - start_time) * 1000

                if flag_checkBox_HS and dt.second % 10 == 0 and self.alternate_flag:

                    str = '[{0:02d}:{1:02d}:{2:02d}] UI Screen Update : {3:.2f}({4:.2f}) ms...\r'.format(\
                        dt.hour, dt.minute, dt.second, main_ui_update_time, bc_ui_update_time)
                    self.textBrowser.append(str)
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] UI Screen Update : {3:.2f} ms...\r'.format(\
                        dt.hour, dt.minute, dt.second, main_ui_update_time)
                    print(str)
            else:
                pass
            
        except:
            pass

    def heartbeat_check(self):

        global flag_heartbeat

        str = '[{0:02d}:{1:02d}:{2:02d}] 1 Min Heartbeat({3})을 수신하였습니다.(시간차 = {4}초)\r'.format(SERVER_HOUR, SERVER_MIN, SERVER_SEC, server_x_idx, 시스템_서버_시간차)
        self.textBrowser.append(str)
        print(str)

        flag_heartbeat = False 

    def opt_high_low_list_update(self):

        global call_저가, call_고가, put_저가, put_고가 
        global call_low_list, call_high_list, put_low_list, put_high_list, high_low_list, moving_list

        dt = datetime.datetime.now()
        
        call_low_list = []
        call_high_list = []
        put_low_list = []
        put_high_list = []
        high_low_list = []
        moving_list = []
        
        call_저가 = df_call['저가'].values.tolist()
        call_고가 = df_call['고가'].values.tolist()
        put_저가 = df_put['저가'].values.tolist()
        put_고가 = df_put['고가'].values.tolist()
        
        call_저가.sort()
        index1 = bisect(call_저가, 1.20)
        index2 = bisect(call_저가, 9.99)
        call_low_list = call_저가[index1:index2]

        call_고가.sort()
        index1 = bisect(call_고가, 1.20)
        index2 = bisect(call_고가, 9.99)
        call_high_list = call_고가[index1:index2]

        put_저가.sort()
        index1 = bisect(put_저가, 1.20)
        index2 = bisect(put_저가, 9.99)
        put_low_list = put_저가[index1:index2]

        put_고가.sort()
        index1 = bisect(put_고가, 1.20)
        index2 = bisect(put_고가, 9.99)
        put_high_list = put_고가[index1:index2]

        high_low_list = call_low_list + call_high_list + put_low_list + put_high_list
        high_low_list.sort()
        
        moving_list = FILE_HIGH_LOW_LIST + high_low_list
        moving_list.sort()

    def get_value_frequency(self, value):

        frequency = moving_list.count(value)

        return frequency
    
    def get_maxval_info(self, input_list):
    
        input_list.sort()
        input_list.reverse()

        result = list(Counter(input_list).values())
        빈도수 = max(result)
        
        if 빈도수 > 2:

            max_index = result.index(max(result))

            # 최대 중복값 산출
            result = list(Counter(input_list).keys())
            value = float(result[max_index])

            return value, 빈도수
        else:
            return None, None

    def search_moving_node(self):

        global 진성맥점
        global 동적맥점_리스트, 동적맥점_빈도수_리스트 
        global flag_first_search 

        dt = datetime.datetime.now()

        str = '[{0:02d}:{1:02d}:{2:02d}] 동적 맥점 탐색을 시작합니다.\r'.format(adj_hour, adj_min, adj_sec)
        self.textBrowser.append(str)
        print(str)
                
        동적맥점_리스트 = []
        동적맥점_빈도수_리스트 = []

        OLD_진성맥점 = 진성맥점[:]

        self.opt_high_low_list_update()
        '''
        if not flag_first_search:

            str = '[{0:02d}:{1:02d}:{2:02d}] call_저가 list = {3}\r'.format(adj_hour, adj_min, adj_sec, call_저가)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] call low list = {3}\r'.format(adj_hour, adj_min, adj_sec, call_low_list)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] call_고가 list = {3}\r'.format(adj_hour, adj_min, adj_sec, call_고가)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] call high list = {3}\r'.format(adj_hour, adj_min, adj_sec, call_high_list)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] put_저가 list = {3}\r'.format(adj_hour, adj_min, adj_sec, put_저가)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] put low list = {3}\r'.format(adj_hour, adj_min, adj_sec, put_low_list)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] put_고가 list = {3}\r'.format(adj_hour, adj_min, adj_sec, put_고가)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] put high list = {3}\r'.format(adj_hour, adj_min, adj_sec, put_high_list)
            self.textBrowser.append(str)
            print(str)

            flag_first_search = True
        else:
            pass
        '''
        str = '[{0:02d}:{1:02d}:{2:02d}] high low list in search_moving_node = {3}\r'.format(adj_hour, adj_min, adj_sec, high_low_list)
        #self.textBrowser.append(str)
        print(str)        

        # 1st search
        동적맥점1, 동적맥점1_빈도수 = self.get_maxval_info(moving_list)
        동적맥점_리스트.append(동적맥점1)
        동적맥점_빈도수_리스트.append(동적맥점1_빈도수)

        # 2nd search
        list_2 = list(filter((동적맥점1).__ne__, moving_list))
        동적맥점2, 동적맥점2_빈도수 = self.get_maxval_info(list_2)
        동적맥점_리스트.append(동적맥점2)
        동적맥점_빈도수_리스트.append(동적맥점2_빈도수)

        # 3rd search
        list_3 = list(filter((동적맥점2).__ne__, list_2))
        동적맥점3, 동적맥점3_빈도수 = self.get_maxval_info(list_3)
        동적맥점_리스트.append(동적맥점3)
        동적맥점_빈도수_리스트.append(동적맥점3_빈도수)

        # 4th search
        list_4 = list(filter((동적맥점3).__ne__, list_3))
        동적맥점4, 동적맥점4_빈도수 = self.get_maxval_info(list_4)
        동적맥점_리스트.append(동적맥점4)
        동적맥점_빈도수_리스트.append(동적맥점4_빈도수)

        # 5th search
        list_5 = list(filter((동적맥점4).__ne__, list_4))
        동적맥점5, 동적맥점5_빈도수 = self.get_maxval_info(list_5)
        동적맥점_리스트.append(동적맥점5)
        동적맥점_빈도수_리스트.append(동적맥점5_빈도수)

        # 6th search
        list_6 = list(filter((동적맥점5).__ne__, list_5))
        동적맥점6, 동적맥점6_빈도수 = self.get_maxval_info(list_6)
        동적맥점_리스트.append(동적맥점6)
        동적맥점_빈도수_리스트.append(동적맥점6_빈도수)

        # 7th search
        list_7 = list(filter((동적맥점6).__ne__, list_6))
        동적맥점7, 동적맥점7_빈도수 = self.get_maxval_info(list_7)
        동적맥점_리스트.append(동적맥점7)
        동적맥점_빈도수_리스트.append(동적맥점7_빈도수)

        # 8th search
        list_8 = list(filter((동적맥점7).__ne__, list_7))
        동적맥점8, 동적맥점8_빈도수 = self.get_maxval_info(list_8)
        동적맥점_리스트.append(동적맥점8)
        동적맥점_빈도수_리스트.append(동적맥점8_빈도수)

        # 9th search
        list_9 = list(filter((동적맥점8).__ne__, list_8))
        동적맥점9, 동적맥점9_빈도수 = self.get_maxval_info(list_9)
        동적맥점_리스트.append(동적맥점9)
        동적맥점_빈도수_리스트.append(동적맥점9_빈도수)

        # 10th search
        list_10 = list(filter((동적맥점9).__ne__, list_9))
        동적맥점10, 동적맥점10_빈도수 = self.get_maxval_info(list_10)
        동적맥점_리스트.append(동적맥점10)
        동적맥점_빈도수_리스트.append(동적맥점10_빈도수)

        # 11th search
        list_11 = list(filter((동적맥점10).__ne__, list_10))
        동적맥점11, 동적맥점11_빈도수 = self.get_maxval_info(list_11)
        동적맥점_리스트.append(동적맥점11)
        동적맥점_빈도수_리스트.append(동적맥점11_빈도수)

        # 12th search
        list_12 = list(filter((동적맥점11).__ne__, list_11))
        동적맥점12, 동적맥점12_빈도수 = self.get_maxval_info(list_12)
        동적맥점_리스트.append(동적맥점12)
        동적맥점_빈도수_리스트.append(동적맥점12_빈도수)

        listsum = []

        for i in range(len(동적맥점_리스트)):

            var1 = self.get_list_item(동적맥점_리스트, i)
            var2 = self.get_list_item(동적맥점_빈도수_리스트, i)
            if var1 != None and var2 != None: # 유효한 것만 합친다 (결국 두 리스트중에서 작은 사이즈로)
                listsum.append([var1, var2])

        new_node = sorted(listsum, key=operator.itemgetter(0))

        str = '[{0:02d}:{1:02d}:{2:02d}] new node list = {3}\r'.format(adj_hour, adj_min, adj_sec, new_node)
        self.textBrowser.append(str)
        print(str)
        
        for i in range(len(new_node)):

            item = QTableWidgetItem("{0:.2f}\n({1})".format(new_node[i][0], new_node[i][1]))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(lime))

            if i < 6:
                if NightTime:
                    self.tableWidget_fut.setItem(1, 2 + i, item)
                else:
                    self.tableWidget_fut.setItem(0, 2 + i, item)
            else:
                self.tableWidget_fut.setItem(2, i - 4, item)

            if high_low_list is not None and new_node[i][0] in high_low_list:

                str = '[{0:02d}:{1:02d}:{2:02d}] {3}번째 동적맥점 {4:.2f}(빈도수 = {5}) 발생 !!!\r'.format \
                    (adj_hour, adj_min, adj_sec, i + 1, new_node[i][0], new_node[i][1])
                self.textBrowser.append(str)
                print(str)

                진성맥점.append(new_node[i][0])

                item_str = "{0:.2f}\n({1})✓".format(new_node[i][0], new_node[i][1])
                item = QTableWidgetItem(item_str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(lime))

                if i < 6:
                    if NightTime:
                        self.tableWidget_fut.setItem(1, 2 + i, item)
                    else:
                        self.tableWidget_fut.setItem(0, 2 + i, item)
                else:
                    self.tableWidget_fut.setItem(2, i - 4, item)
            else:
                pass        
        
        진성맥점 = list(set(진성맥점))
        진성맥점.sort()            

        if 진성맥점 != OLD_진성맥점:
            
            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

            new_list = list(set(진성맥점) - set(DEFAULT_NODE_LIST))
            new_list.sort()
            str = '[{0:02d}:{1:02d}:{2:02d}] 탐색된 진성맥점 = {3}\r'.format(adj_hour, adj_min, adj_sec, new_list)
            self.textBrowser.append(str)
        else:
            pass            

    def market_type_display(self, blink):

        global 시스템시간, adj_hour, adj_min, adj_sec 

        dt = datetime.datetime.now()

        # 해외선물 한국시간 표시
        if OVC_체결시간 == '000000':

            str = '{0:02d}:{1:02d}:{2:02d}'.format(dt.hour, dt.minute, dt.second)
        else:
            시스템시간 = dt.hour * 3600 + dt.minute * 60 + dt.second
            adj_time = 시스템시간 - 시스템_서버_시간차

            adj_hour = adj_time // 3600
            adj_min = (adj_time - adj_hour * 3600) // 60
            adj_sec = adj_time - (adj_hour * 3600 + adj_min * 60)

            str = '{0:02d}:{1:02d}:{2:02d}({3:+d})'.format(adj_hour, adj_min, adj_sec, 시스템_서버_시간차)
        
        # 클래스간 데이타 교환
        
        #print(화면_뉴스.news_on)
        '''
        if 화면_뉴스.news_on:

            str = 'sky...\r'
            화면_뉴스.testcode(str)
        else:
            pass
        '''

        if flag_option_start and not flag_checkBox_HS:

            # 콜 매수 OneWay장
            if call_ms_oneway:

                if blink:
                    self.label_msg.setStyleSheet('background-color: red; color: white')
                else:
                    self.label_msg.setStyleSheet('background-color: white; color: red')

            # 콜 매수 비대칭장
            elif call_ms_asymmetric:

                self.label_msg.setStyleSheet('background-color: red; color: white')

            # 콜 매도 비대칭장
            elif call_md_asymmetric:

                self.label_msg.setStyleSheet('background-color: black; color: pink')

            # 콜 매도 양꽝장
            elif call_md_all_down:

                self.label_msg.setStyleSheet('background-color: black; color: magenta')

            # 콜 매수 양빵장
            elif call_ms_all_up:

                self.label_msg.setStyleSheet('background-color: magenta; color: black')

            # 풋 매수 OneWay장
            elif put_ms_oneway:

                if blink:
                    self.label_msg.setStyleSheet('background-color: blue; color: white')
                else:
                    self.label_msg.setStyleSheet('background-color: white; color: blue')

            # 풋 매수 비대칭장
            elif put_ms_asymmetric:

                self.label_msg.setStyleSheet('background-color: blue; color: white')

            # 풋 매도 비대칭장
            elif put_md_asymmetric:

                self.label_msg.setStyleSheet('background-color: black; color: lightskyblue')

            # 풋 매도 양꽝장
            elif put_md_all_down:

                self.label_msg.setStyleSheet('background-color: black; color: cyan')

            # 풋 매수 양빵장
            elif put_ms_all_up:

                self.label_msg.setStyleSheet('background-color: cyan; color: black')
            else:
                # 대칭장
                self.label_msg.setStyleSheet('background-color: lawngreen; color: black')
        else:
            self.label_msg.setStyleSheet('background-color: lawngreen; color: black')            
        
        self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))    
        self.label_msg.setText(str)
    
    def call_scroll_coloring(self):

        global coloring_done_time
        global node_coloring
        global call_scroll

        dt = datetime.datetime.now()
        start_time = timeit.default_timer()
        
        node_coloring = True
        call_scroll = True
            
        self.call_node_color_clear()         
        self.call_open_check()   
        self.call_only_cross_color_update()        
        self.call_node_color_update()
        self.call_coreval_color_update()

        node_coloring = False
        call_scroll = False

        process_time = (timeit.default_timer() - start_time) * 1000

        if market_service:

            str = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Call Node Color Check : {3:.2f} ms\r'.format(\
                adj_hour, adj_min, adj_sec, process_time)
            self.textBrowser.append(str)
            print(str)
        else:
            str = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Call Node Color Check : {3:.2f} ms\r'.format(adj_hour, adj_min, adj_sec, process_time)
            self.textBrowser.append(str)
            print(str)

    def call_low_node_coloring(self):

        dt = datetime.datetime.now()

        start_time = timeit.default_timer()
        
        self.call_node_color_clear()
        self.call_open_check()
        self.call_only_cross_color_update()        
        self.call_node_color_update()
        self.call_low_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        str = '[{0:02d}:{1:02d}:{2:02d}] Call Low Node Color Check : {3:.2f} ms\r'.format(\
            adj_hour, adj_min, adj_sec, process_time)
        self.textBrowser.append(str)

    def call_high_node_coloring(self):

        dt = datetime.datetime.now()

        start_time = timeit.default_timer()
               
        self.call_node_color_clear() 
        self.call_open_check()
        self.call_only_cross_color_update()        
        self.call_node_color_update()
        self.call_high_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        str = '[{0:02d}:{1:02d}:{2:02d}] Call High Node Color Check : {3:.2f} ms\r'.format(\
            adj_hour, adj_min, adj_sec, process_time)
        self.textBrowser.append(str)            
    
    def put_scroll_coloring(self):

        global coloring_done_time
        global node_coloring
        global put_scroll

        dt = datetime.datetime.now()
        start_time = timeit.default_timer()
        
        node_coloring = True
        put_scroll = True
            
        self.put_node_color_clear()        
        self.put_open_check()    
        self.put_only_cross_color_update()        
        self.put_node_color_update()
        self.put_coreval_color_update()

        node_coloring = False
        put_scroll = False

        process_time = (timeit.default_timer() - start_time) * 1000

        if market_service:

            str = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Put Node Color Check : {3:.2f} ms\r'.format(\
                adj_hour, adj_min, adj_sec, process_time)
            self.textBrowser.append(str)
            print(str)                                 
        else:

            str = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Put Node Color Check : {3:.2f} ms\r'.format(adj_hour, adj_min, adj_sec, process_time)
            self.textBrowser.append(str)
            print(str)

    def put_low_node_coloring(self):

        dt = datetime.datetime.now()

        start_time = timeit.default_timer()
             
        self.put_node_color_clear()        
        self.put_open_check()    
        self.put_only_cross_color_update()        
        self.put_node_color_update()
        self.put_low_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        str = '[{0:02d}:{1:02d}:{2:02d}] Put Low Node Color Check : {3:.2f} ms\r'.format(\
            adj_hour, adj_min, adj_sec, process_time)
        self.textBrowser.append(str)

    def put_high_node_coloring(self):

        dt = datetime.datetime.now()

        start_time = timeit.default_timer()
            
        self.put_node_color_clear()        
        self.put_open_check()     
        self.put_only_cross_color_update()        
        self.put_node_color_update()
        self.put_high_coreval_color_update()

        process_time = (timeit.default_timer() - start_time) * 1000

        str = '[{0:02d}:{1:02d}:{2:02d}] Put High Node Color Check : {3:.2f} ms\r'.format(\
            adj_hour, adj_min, adj_sec, process_time)
        self.textBrowser.append(str)            


    # 탐색순서가 중요(교차탐색) !!!
    def opt_all_node_coloring(self):

        global coloring_done_time
        global node_coloring
        global refresh_coloring

        dt = datetime.datetime.now()

        start_time = timeit.default_timer()

        node_coloring = True
        refresh_coloring = True
        
        self.call_node_color_clear() 
        self.put_node_color_clear()
        
        #start_time = timeit.default_timer()

        self.call_open_check()    
        self.put_open_check()

        #process_time = (timeit.default_timer() - start_time) * 1000

        self.call_cross_color_update()
        self.put_cross_color_update()

        self.call_node_color_update()
        self.put_node_color_update()

        if not pre_start and bms_node_list:
        #if bms_node_list:
            self.search_moving_node()
        else:
            pass

        self.call_coreval_color_update()        
        self.put_coreval_color_update()
        
        node_coloring = False
        refresh_coloring = False

        process_time = (timeit.default_timer() - start_time) * 1000

        str = '[{0:02d}:{1:02d}:{2:02d}] 옵션 Node Color Check : {3:.2f} ms\r'.format(adj_hour, adj_min, adj_sec, process_time)
        self.textBrowser.append(str)
        print(str)        

    def display_atm(self, blink):

        global basis
        global atm_str, atm_index, old_atm_index, call_atm_value, put_atm_value 
        global atm_zero_sum, atm_zero_cha
        
        global CENTER_VAL, df_call_total_graph 

        dt = datetime.datetime.now()
        
        # 등가 check & coloring        
        old_atm_index = atm_index

        atm_str = self.get_atm_str(fut_realdata['KP200'])
        atm_index = opt_actval.index(atm_str)
        
        if atm_index != old_atm_index:

            self.tableWidget_call.item(old_atm_index, Option_column.행사가.value).setBackground(QBrush(라임))
            self.tableWidget_call.cellWidget(old_atm_index, 0).findChild(type(QCheckBox())).setCheckState(Qt.Unchecked)
            self.tableWidget_call.item(atm_index, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_call.cellWidget(atm_index, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)

            self.tableWidget_put.item(old_atm_index, Option_column.행사가.value).setBackground(QBrush(라임))
            self.tableWidget_put.cellWidget(old_atm_index, 0).findChild(type(QCheckBox())).setCheckState(Qt.Unchecked)
            self.tableWidget_put.item(atm_index, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_put.cellWidget(atm_index, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)

            selected_call = [atm_index]
            selected_put = [atm_index]
        else:
            pass

        basis = round((fut_realdata['현재가'] - fut_realdata['KP200']), 2)

        call_atm_value = df_call.at[atm_index, '현재가']
        put_atm_value = df_put.at[atm_index, '현재가']

        atm_minus_5 = round((df_call.at[atm_index - 5, '현재가'] + df_put.at[atm_index - 5, '현재가']), 2)
        atm_minus_4 = round((df_call.at[atm_index - 4, '현재가'] + df_put.at[atm_index - 4, '현재가']), 2)   
        atm_minus_3 = round((df_call.at[atm_index - 3, '현재가'] + df_put.at[atm_index - 3, '현재가']), 2)
        atm_minus_2 = round((df_call.at[atm_index - 2, '현재가'] + df_put.at[atm_index - 2, '현재가']), 2)
        atm_minus_1 = round((df_call.at[atm_index - 1, '현재가'] + df_put.at[atm_index - 1, '현재가']) , 2)
        atm_zero_sum = round((df_call.at[atm_index, '현재가'] + df_put.at[atm_index, '현재가']) , 2)

        if call_atm_value >= put_atm_value:
            atm_zero_cha = round((call_atm_value - put_atm_value) , 2)
        else:
            atm_zero_cha = round((put_atm_value - call_atm_value) , 2)

        atm_plus_1 = round((df_call.at[atm_index + 1, '현재가'] + df_put.at[atm_index + 1, '현재가']) , 2)
        atm_plus_2 = round((df_call.at[atm_index + 2, '현재가'] + df_put.at[atm_index + 2, '현재가']) , 2)
        atm_plus_3 = round((df_call.at[atm_index + 3, '현재가'] + df_put.at[atm_index + 3, '현재가']) , 2)
        atm_plus_4 = round((df_call.at[atm_index + 4, '현재가'] + df_put.at[atm_index + 4, '현재가']) , 2)
        atm_plus_5 = round((df_call.at[atm_index + 5, '현재가'] + df_put.at[atm_index + 5, '현재가']) , 2)             

        if FLAG_ATM:            

            if 장시작_양합 > 0:
                str = '{0}({1:.2f}:{2})'.format(basis, 장시작_양합, abs(atm_zero_cha))
            else :
                str = '{0}({1}:{2})'.format(basis, atm_zero_sum, abs(atm_zero_cha))

            if basis < 0:
                self.label_atm.setStyleSheet('background-color: black; color: yellow')
                self.label_atm.setFont(QFont("Consolas", 9, QFont.Bold))
            else:
                self.label_atm.setStyleSheet('background-color: yellow; color: black')
                self.label_atm.setFont(QFont("Consolas", 9, QFont.Bold))

            self.label_atm.setText(str)
        else:
            pass

        # 예상 중심가 표시
        if call_atm_value > put_atm_value:

            CENTER_VAL = round((put_atm_value + atm_zero_cha / 2), 2)

        elif put_atm_value > call_atm_value:

            CENTER_VAL = round((call_atm_value + atm_zero_cha / 2), 2)
        else:
            CENTER_VAL = call_atm_value

            str = '[{0:02d}:{1:02d}:{2:02d}] 등가 {3}에서 교차 중심가 {4} 발생 !!!\r'.format(adj_hour, adj_min, adj_sec, atm_str, CENTER_VAL)
            self.textBrowser.append(str)
        
        item = QTableWidgetItem("{0:.2f}".format(CENTER_VAL))
        item.setTextAlignment(Qt.AlignCenter)

        if abs(atm_zero_cha) <= GOLDEN_RATIO:

            if SELFID != 'soojin65':
                if blink:
                    item.setBackground(QBrush(검정색))
                    item.setForeground(QBrush(대맥점색))
                else:
                    item.setBackground(QBrush(대맥점색))
                    item.setForeground(QBrush(검정색))
            else:
                item.setBackground(QBrush(대맥점색))
                item.setForeground(QBrush(검정색))
        else:
            item.setBackground(QBrush(대맥점색))
            item.setForeground(QBrush(검정색))

        self.tableWidget_fut.setItem(2, Futures_column.거래량.value, item)

        df_call_total_graph.at[ovc_x_idx, 'centerval'] = CENTER_VAL

        atm_list = []
        atm_list.append(atm_minus_5)
        atm_list.append(atm_minus_4)
        atm_list.append(atm_minus_3)
        atm_list.append(atm_minus_2)
        atm_list.append(atm_minus_1)
        atm_list.append(atm_zero_sum)
        atm_list.append(atm_plus_1)
        atm_list.append(atm_plus_2)
        atm_list.append(atm_plus_3)
        atm_list.append(atm_plus_4)
        atm_list.append(atm_plus_5)   

        min_index = atm_list.index(min(atm_list)) + atm_index - 5

        # 풋에만 양합표시(콜에는 중심가 표시)
        val = df_put.at[atm_index - 5, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_5))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index - 5, Option_column.기준가.value, item)

        val = df_put.at[atm_index - 4, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_4))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index - 4, Option_column.기준가.value, item)

        val = df_put.at[atm_index - 3, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_3))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index - 3, Option_column.기준가.value, item)

        val = df_put.at[atm_index - 2, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_2))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index - 2, Option_column.기준가.value, item)    

        val = df_put.at[atm_index - 1, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_1))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index - 1, Option_column.기준가.value, item)            

        val = df_put.at[atm_index, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_zero_sum))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(노란색))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index, Option_column.기준가.value, item)            

        val = df_put.at[atm_index + 1, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_1))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index + 1, Option_column.기준가.value, item)

        val = df_put.at[atm_index + 2, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_2))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index + 2, Option_column.기준가.value, item)

        val = df_put.at[atm_index + 3, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_3))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index + 3, Option_column.기준가.value, item)

        val = df_put.at[atm_index + 4, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_4))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index + 4, Option_column.기준가.value, item)

        val = df_put.at[atm_index + 5, '기준가']
        item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_5))
        item.setTextAlignment(Qt.AlignCenter)
        item.setBackground(QBrush(라임))
        item.setForeground(QBrush(검정색))
        self.tableWidget_put.setItem(atm_index + 5, Option_column.기준가.value, item)

        if min_index != atm_index:

            #self.tableWidget_call.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
            #self.tableWidget_call.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
            self.tableWidget_put.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
            self.tableWidget_put.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
        else:
            pass

    def is_within_n_tick(self, source, target, n):

        if round((target - 0.01*n), 2) <= source <= round((target + 0.01*n), 2):
            return True
        else:
            return False

    def calc_pivot(self, jl, jh, jc, do):

        if jl > 0 and jh > 0 and jc > 0 and do > 0:
            tmp = (jl + jh + jc)/3 + (do - jc)
            pivot = round(tmp, 2)

            return pivot
        else:
            return 0

    def make_node_list(self, input_list):

        list_low = []
        list_zero = []
        list_high = []

        if 0 in input_list:
            input_list.remove(0)
        else:
            pass

        if 0.01 in input_list:
            input_list.remove(0.01)
        else:
            pass

        temp = list(set(input_list))
        temp.sort()

        # 컬러링 탐색구간 설정(0.1 ~ 20)
        index1 = bisect(temp, nodelist_low_cutoff)
        index2 = bisect(temp, nodelist_high_cutoff)

        list_singleval = temp[index1:index2]

        for i in range(len(list_singleval)):
            list_low.append(round(list_singleval[i] - 0.01, 2))
            list_zero.append(round(list_singleval[i] + 0.0, 2))
            list_high.append(round(list_singleval[i] + 0.01, 2))

        output_list = list_low + list_zero + list_high
        output_list.sort()

        return output_list

    def get_atm_str(self, kp200):

        temp = math.floor(round(kp200 / 2.5, 0) * 2.5)
        str_atm = '{0:.0f}'.format(temp)

        return str_atm

    '''
    def image_grab(self):
        
        now = time.localtime()
        times = "%04d-%02d-%02d-%02d-%02d-%02d" % (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)
        
        hwnd = win32gui.FindWindow(None, widget_title)
        win32gui.SetForegroundWindow(hwnd)
        dimensions = win32gui.GetWindowRect(hwnd)
        img = ImageGrab.grab(dimensions)

        print('ImageGrab dimensions = ', dimensions)
        
        #img = self.capture_screenshot()

        #saveas = "Screenshot {}{}".format(times, '.png')
        #img.save(saveas)

        #str = '[{0:02d}:{1:02d}:{2:02d}] 화면을 캡처했습니다.\r'.format(now.tm_hour, now.tm_min, now.tm_sec)
        #self.textBrowser.append(str)
    '''

    # 현재가 클리어
    def cv_color_clear(self):

        if NightTime:
            self.tableWidget_fut.item(0, Futures_column.현재가.value).setBackground(QBrush(옅은회색))
        else:
            self.tableWidget_fut.item(1, Futures_column.현재가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(2, Futures_column.현재가.value).setBackground(QBrush(옅은회색))

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            self.tableWidget_call.item(i, Option_column.현재가.value).setBackground(QBrush(옅은회색))

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            self.tableWidget_put.item(i, Option_column.현재가.value).setBackground(QBrush(옅은회색))

    # 저가, 현재가, 고가 클리어
    def price_color_clear(self):

        # 선물
        if NightTime:
            self.tableWidget_fut.item(0, Futures_column.현재가.value).setBackground(QBrush(흰색))
        else:
            self.tableWidget_fut.item(1, Futures_column.현재가.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(2, Futures_column.현재가.value).setBackground(QBrush(흰색))
        
        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        # 콜
        for i in range(call_scroll_begin_position, call_scroll_end_position):

            self.tableWidget_call.item(i, Option_column.현재가.value).setBackground(QBrush(흰색))

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        # 풋
        for i in range(put_scroll_begin_position, put_scroll_end_position):

            self.tableWidget_put.item(i, Option_column.현재가.value).setBackground(QBrush(흰색))

    '''
    # 선물 현재가 클리어
    def fut_cv_color_clear(self):

        if NightTime:
            self.tableWidget_fut.item(0, Futures_column.현재가.value).setBackground(QBrush(옅은회색))
        else:
            self.tableWidget_fut.item(1, Futures_column.현재가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(2, Futures_column.현재가.value).setBackground(QBrush(옅은회색))

    # Call 컬러처리
    def call_cv_color_clear(self):

        if call_scroll_end_position <= option_pairs_count:

            for i in range(call_scroll_begin_position, call_scroll_end_position):

                self.tableWidget_call.item(i, Option_column.현재가.value).setBackground(QBrush(옅은회색))
        else:
            pass
    
    # Put 컬러처리
    def put_cv_color_clear(self):

        if put_scroll_end_position <= option_pairs_count:

            for i in range(put_scroll_begin_position, put_scroll_end_position):

                self.tableWidget_put.item(i, Option_column.현재가.value).setBackground(QBrush(옅은회색))
        else:
            pass
    '''

    '''
    def check_oneway(self, blink):

        dt = datetime.datetime.now()
        current_str = dt.strftime('%H:%M:%S')

        global call_ms_oneway, put_ms_oneway
        global call_oneway_level1, call_oneway_level2, call_oneway_level3, call_oneway_level4, call_oneway_level5
        global put_oneway_level1, put_oneway_level2, put_oneway_level3, put_oneway_level4, put_oneway_level5
        global oneway_first_touch, oneway_str

        if NightTime:

            pass
        else:
            # oneway check
            if (풋대비합 > 0 and 콜대비합 < 0) and (FUT_INSTITUTIONAL_거래대금순매수 > ONEWAY_THRESHOLD or FUT_RETAIL_거래대금순매수 > ONEWAY_THRESHOLD):

                if 선물_거래대금순매수 > 0 and 현물_거래대금순매수 < 0 \
                    and FUT_FOREIGNER_거래대금순매수 < 0 and 프로그램_전체순매수금액 < 0 and KOSPI_FOREIGNER_거래대금순매수 < 0 and fut_realdata['거래량'] < 0:

                    if blink:
                        self.label_msg.setStyleSheet('background-color: blue; color: white')
                        self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))
                    else:
                        self.label_msg.setStyleSheet('background-color: white; color: blue')
                        self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))

                    put_ms_oneway = True

                    # 시가갭 & 퍼센트로 oneway 판단
                    if 풋시가갭합 > 0 and 풋시가갭합_퍼센트 < 0:
                        
                        put_oneway_level3 = False
                        put_oneway_level4 = False
                        put_oneway_level5 = True

                        if blink:
                            self.label_msg.setStyleSheet('background-color: blue; color: white')
                            self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))                            

                            if dt.second % 10 == 0:
                                str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성 매우 높음(★★★★★)\r'.format(adj_hour, adj_min, adj_sec)
                                self.textBrowser.append(str)
                            else:
                                pass

                            if not oneway_first_touch:

                                oneway_str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성 매우 높음 !!!\r'.format(adj_hour, adj_min, adj_sec)
                                oneway_first_touch = True
                            else:
                                pass
                        else:
                            self.label_msg.setStyleSheet('background-color: white; color: blue')
                            self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))                        
                    else:
                        
                        put_oneway_level3 = False
                        put_oneway_level4 = True
                        put_oneway_level5 = False

                        if blink:                            

                            if dt.second % 10 == 0:
                                str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성 높음(★★★★)\r'.format(adj_hour, adj_min, adj_sec)
                                self.textBrowser.append(str)
                            else:
                                pass

                            if not oneway_first_touch:

                                oneway_str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성 높음 !!\r'.format(adj_hour, adj_min, adj_sec)
                                oneway_first_touch = True
                            else:
                                pass                 
                        else:
                            pass                 

                elif 선물_거래대금순매수 > 0 and 현물_거래대금순매수 < 0 \
                    and FUT_FOREIGNER_거래대금순매수 < 0 and 프로그램_전체순매수금액 < 0 and KOSPI_FOREIGNER_거래대금순매수 > 0 and fut_realdata['거래량'] < 0:

                    self.label_msg.setStyleSheet('background-color: blue; color: white')
                    self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))

                    put_ms_oneway = True

                    put_oneway_level3 = True
                    put_oneway_level4 = False
                    put_oneway_level5 = False                    

                    if dt.second % 10 == 0:
                        str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성(★★★)\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if not oneway_first_touch:

                        oneway_str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성 !\r'.format(adj_hour, adj_min, adj_sec)
                        oneway_first_touch = True
                    else:
                        pass

                elif 선물_거래대금순매수 > 0 and 현물_거래대금순매수 < 0 \
                    and FUT_FOREIGNER_거래대금순매수 < 0 and 프로그램_전체순매수금액 > 0 and KOSPI_FOREIGNER_거래대금순매수 < 0 and fut_realdata['거래량'] < 0:

                    self.label_msg.setStyleSheet('background-color: blue; color: white')
                    self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))

                    put_ms_oneway = True
                    oneway_str = ''                    

                    if dt.second % 10 == 0:
                        str = '[{0:02d}:{1:02d}:{2:02d}] 풋 OneWay 가능성(★★)\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                    else:
                        pass                   
                else:
                    pass     

            elif (풋대비합 < 0 and 콜대비합 > 0) and (FUT_INSTITUTIONAL_거래대금순매수 < -ONEWAY_THRESHOLD or FUT_RETAIL_거래대금순매수 < -ONEWAY_THRESHOLD):

                if 선물_거래대금순매수 < 0 and 현물_거래대금순매수 > 0 \
                    and FUT_FOREIGNER_거래대금순매수 > 0 and 프로그램_전체순매수금액 > 0 and KOSPI_FOREIGNER_거래대금순매수 > 0 and fut_realdata['거래량'] > 0:

                    if blink:
                        self.label_msg.setStyleSheet('background-color: red; color: white')
                        self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))
                    else:
                        self.label_msg.setStyleSheet('background-color: white; color: red')
                        self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))

                    call_ms_oneway = True

                    # 시가갭 & 퍼센트로 oneway 판단
                    if 콜시가갭합 > 0 and 콜시가갭합_퍼센트 < 0:
                        
                        call_oneway_level3 = False
                        call_oneway_level4 = False
                        call_oneway_level5 = True

                        if blink:
                            self.label_msg.setStyleSheet('background-color: red; color: white')
                            self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))                            

                            if dt.second % 10 == 0:
                                str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성 매우 높음(★★★★★)\r'.format(adj_hour, adj_min, adj_sec)
                                self.textBrowser.append(str)
                            else:
                                pass

                            if not oneway_first_touch:

                                oneway_str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성 매우 높음 !!!\r'.format(adj_hour, adj_min, adj_sec)
                                oneway_first_touch = True
                            else:
                                pass
                        else:
                            self.label_msg.setStyleSheet('background-color: white; color: red')
                            self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))                        
                    else:
                        
                        call_oneway_level3 = False
                        call_oneway_level4 = True
                        call_oneway_level5 = False

                        if blink:                            

                            if dt.second % 10 == 0:
                                str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성 높음(★★★★)\r'.format(adj_hour, adj_min, adj_sec)
                                self.textBrowser.append(str)
                            else:
                                pass

                            if not oneway_first_touch:

                                oneway_str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성 높음 !!\r'.format(adj_hour, adj_min, adj_sec)
                                oneway_first_touch = True
                            else:
                                pass
                        else:
                            pass                 

                elif 선물_거래대금순매수 < 0 and 현물_거래대금순매수 > 0 \
                    and FUT_FOREIGNER_거래대금순매수 > 0 and 프로그램_전체순매수금액 > 0 and KOSPI_FOREIGNER_거래대금순매수 < 0 and fut_realdata['거래량'] > 0:

                    self.label_msg.setStyleSheet('background-color: red; color: white')
                    self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))

                    call_ms_oneway = True

                    call_oneway_level3 = True
                    call_oneway_level4 = False
                    call_oneway_level5 = False                    

                    if dt.second % 10 == 0:
                        str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성(★★★)\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                    else:
                        pass

                    if not oneway_first_touch:

                        oneway_str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성 !\r'.format(adj_hour, adj_min, adj_sec)
                        oneway_first_touch = True
                    else:
                        pass

                elif 선물_거래대금순매수 < 0 and 현물_거래대금순매수 > 0 \
                    and FUT_FOREIGNER_거래대금순매수 > 0 and 프로그램_전체순매수금액 < 0 and KOSPI_FOREIGNER_거래대금순매수 > 0 and fut_realdata['거래량'] > 0:

                    self.label_msg.setStyleSheet('background-color: red; color: white')
                    self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))

                    call_ms_oneway = True
                    oneway_str = ''                    

                    if dt.second % 10 == 0:
                        str = '[{0:02d}:{1:02d}:{2:02d}] 콜 OneWay 가능성(★★)\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)
                    else:
                        pass
                else:
                    pass
            else:
                oneway_str = ''

                put_oneway_level3 = False
                put_oneway_level4 = False
                put_oneway_level5 = False

                call_oneway_level3 = False
                call_oneway_level4 = False
                call_oneway_level5 = False            
            
            if not call_ms_oneway and not put_ms_oneway:
                self.label_msg.setStyleSheet('background-color: lawngreen; color: blue')
                self.label_msg.setFont(QFont("Consolas", 9, QFont.Bold))
            else:
                pass
    '''    

    def asym_detect(self, blink):
        
        global 비대칭장
        global call_ms_oneway, put_ms_oneway, call_md_all_down, put_md_all_down 
        global call_ms_asymmetric, put_ms_asymmetric, call_md_asymmetric, put_md_asymmetric
        global call_ms_all_up, put_ms_all_up

        dt = datetime.datetime.now()

        if 콜대비_퍼센트_평균 > 0 and 풋대비_퍼센트_평균 < 0:

            if abs(콜대비_퍼센트_평균/풋대비_퍼센트_평균) >= ASYM_RATIO:
                
                if abs(콜대비_퍼센트_평균/풋대비_퍼센트_평균) >= ONEWAY_RATIO and abs(선물_등락율) > abs(DOW_등락율):

                    if TARGET_MONTH_SELECT == 1 and not call_ms_oneway:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 콜 매수({3:0.1f}:{4:0.1f}) OneWay장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2 and not call_ms_oneway:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 콜 매수({3:0.1f}:{4:0.1f}) OneWay장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3 and not call_ms_oneway:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 콜 매수({3:0.1f}:{4:0.1f}) OneWay장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass
                    
                    # 콜 원웨이(원웨이장은 플래그 세팅을 나중에 해줌 --> 발생시각 표시를 위해)
                    call_ms_oneway = True
                    call_ms_asymmetric = False
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = False 
                    put_ms_asymmetric = False
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False

                    if dt.second % 10 == 0 and not blink:

                        self.textBrowser.append(비대칭장)
                        str = '[{0:02d}:{1:02d}:{2:02d}] 시가갭 = {3:.2f}:{4:.2f}\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜시가갭합, 풋시가갭합)
                        self.textBrowser.append(str)
                    else:
                        pass
                else:
                    # 콜매수 비대칭
                    call_ms_oneway = False
                    call_ms_asymmetric = True
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = False 
                    put_ms_asymmetric = False
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False
                    '''
                    if TARGET_MONTH_SELECT == 1:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 콜 매수({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 콜 매수({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 콜 매수({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass 
                    
                    if dt.second % 10 == 0 and not blink:

                        self.textBrowser.append(비대칭장)
                        str = '[{0:02d}:{1:02d}:{2:02d}] 시가갭 = {3:.2f}:{4:.2f}\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜시가갭합, 풋시가갭합)
                        self.textBrowser.append(str)
                    else:
                        pass
                    '''

            elif abs(풋대비_퍼센트_평균/콜대비_퍼센트_평균) >= ASYM_RATIO:

                # 풋매도 비대칭
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = True
                put_md_all_down = False
                put_ms_all_up = False
                '''
                if TARGET_MONTH_SELECT == 1:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 풋 매도({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 2:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 풋 매도({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 3:
                    
                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 풋 매도({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                else:
                    pass
                
                if dt.second % 10 == 0 and not blink:
                    self.textBrowser.append(비대칭장)
                else:
                    pass
                '''
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False

        elif 콜대비_퍼센트_평균 < 0 and 풋대비_퍼센트_평균 > 0:

            if abs(콜대비_퍼센트_평균/풋대비_퍼센트_평균) >= ASYM_RATIO:

                # 콜매도 비대칭
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = True
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
                '''
                if TARGET_MONTH_SELECT == 1:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 콜 매도({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)                    

                elif TARGET_MONTH_SELECT == 2:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 콜 매도({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 3:
                    
                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 콜 매도({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                else:
                    pass
                
                if dt.second % 10 == 0 and not blink:
                    self.textBrowser.append(비대칭장)
                else:
                    pass
                '''

            elif abs(풋대비_퍼센트_평균/콜대비_퍼센트_평균) >= ASYM_RATIO:

                if abs(풋대비_퍼센트_평균/콜대비_퍼센트_평균) >= ONEWAY_RATIO and abs(선물_등락율) > abs(DOW_등락율):

                    if TARGET_MONTH_SELECT == 1 and not put_ms_oneway:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 풋 매수({3:0.1f}:{4:0.1f}) OneWay장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2 and not put_ms_oneway:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 풋 매수({3:0.1f}:{4:0.1f}) OneWay장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3 and not put_ms_oneway:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 풋 매수({3:0.1f}:{4:0.1f}) OneWay장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass
                    
                    # 풋 원웨이(원웨이장은 플래그 세팅을 나중에 해줌 --> 발생시각 표시를 위해)
                    call_ms_oneway = False
                    call_ms_asymmetric = False
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = True 
                    put_ms_asymmetric = False
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False

                    if dt.second % 10 == 0 and not blink:

                        self.textBrowser.append(비대칭장)
                        str = '[{0:02d}:{1:02d}:{2:02d}] 시가갭 = {3:.2f}:{4:.2f}\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜시가갭합, 풋시가갭합)
                        self.textBrowser.append(str)
                    else:
                        pass
                else:
                    # 풋매수
                    call_ms_oneway = False
                    call_ms_asymmetric = False
                    call_md_asymmetric = False
                    call_md_all_down = False
                    call_ms_all_up = False
                    put_ms_oneway = False 
                    put_ms_asymmetric = True
                    put_md_asymmetric = False
                    put_md_all_down = False
                    put_ms_all_up = False
                    '''
                    if TARGET_MONTH_SELECT == 1:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 풋 매수({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 풋 매수({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3:
                        
                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 풋 매수({3:0.1f}:{4:0.1f}) 비대칭장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass
                    
                    if dt.second % 10 == 0 and not blink:

                        self.textBrowser.append(비대칭장)
                        str = '[{0:02d}:{1:02d}:{2:02d}] 시가갭 = {3:.2f}:{4:.2f}\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜시가갭합, 풋시가갭합)
                        self.textBrowser.append(str)
                    else:
                        pass
                    '''
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False

        elif 콜대비_퍼센트_평균 < 0 and 풋대비_퍼센트_평균 < 0:

            if 콜대비_퍼센트_평균 < 풋대비_퍼센트_평균:

                # 콜매도 양꽝장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = True
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
                '''
                if TARGET_MONTH_SELECT == 1:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 콜 매도({3:0.1f}:{4:0.1f}) 양꽝장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 2:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 콜 매도({3:0.1f}:{4:0.1f}) 양꽝장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 3:
                    
                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 콜 매도({3:0.1f}:{4:0.1f}) 양꽝장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                else:
                    pass
                
                if dt.second % 10 == 0 and not blink:
                    self.textBrowser.append(비대칭장)
                else:
                    pass
                '''

            elif 콜대비_퍼센트_평균 > 풋대비_퍼센트_평균:

                # 풋매도 양꽝장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = True
                put_ms_all_up = False
                '''
                if TARGET_MONTH_SELECT == 1:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 풋 매도({3:0.1f}:{4:0.1f}) 양꽝장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 2:

                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 풋 매도({3:0.1f}:{4:0.1f}) 양꽝장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                elif TARGET_MONTH_SELECT == 3:
                    
                    비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 풋 매도({3:0.1f}:{4:0.1f}) 양꽝장\r'.format \
                        (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                else:
                    pass
                
                if dt.second % 10 == 0 and not blink:
                    self.textBrowser.append(비대칭장)
                else:
                    pass
                '''
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False

        elif 콜대비_퍼센트_평균 > 0 and 풋대비_퍼센트_평균 > 0:

            if 콜대비_퍼센트_평균 > 풋대비_퍼센트_평균:

                # 콜매수 양빵장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = True
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
                '''
                if 선물_대비 > 0:

                    if TARGET_MONTH_SELECT == 1:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 풋 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 풋 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 풋 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass
                else:
                    if TARGET_MONTH_SELECT == 1:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 콜 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 콜 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3:
                        
                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 콜 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass                

                if dt.second % 10 == 0 and not blink:
                    self.textBrowser.append(비대칭장)
                else:
                    pass
                '''

            elif 콜대비_퍼센트_평균 < 풋대비_퍼센트_평균:

                # 풋매수 양빵장
                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = True
                '''
                if 선물_대비 > 0:

                    if TARGET_MONTH_SELECT == 1:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 풋 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 풋 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 풋 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass
                else:
                    if TARGET_MONTH_SELECT == 1:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] CM 콜 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 2:

                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] NM 콜 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)

                    elif TARGET_MONTH_SELECT == 3:
                        
                        비대칭장 = '[{0:02d}:{1:02d}:{2:02d}] MAN 콜 매수({3:0.1f}:{4:0.1f}) 양빵장\r'.format \
                            (adj_hour, adj_min, adj_sec, 콜대비_퍼센트_평균, 풋대비_퍼센트_평균)
                    else:
                        pass                

                if dt.second % 10 == 0 and not blink:
                    self.textBrowser.append(비대칭장)
                else:
                    pass
                '''
            else:
                # 대칭장
                비대칭장 = ''

                call_ms_oneway = False
                call_ms_asymmetric = False
                call_md_asymmetric = False
                call_md_all_down = False
                call_ms_all_up = False
                put_ms_oneway = False 
                put_ms_asymmetric = False
                put_md_asymmetric = False
                put_md_all_down = False
                put_ms_all_up = False
        else:
            pass        

    def label_clear(self, toggle):

        dt = datetime.datetime.now()

        if kospi_text_color != '':

            if kospi_text_color == 'red':
                self.label_kospi.setStyleSheet('background-color: white; color: red')
            elif kospi_text_color == 'blue':
                self.label_kospi.setStyleSheet('background-color: white; color: blue')
            else:
                self.label_kospi.setStyleSheet('background-color: white; color: black')
        else:
            pass        

        if kosdaq_text_color != '':

            if kosdaq_text_color == 'red':
                self.label_kosdaq.setStyleSheet('background-color: white; color: red')
            elif kosdaq_text_color == 'blue':
                self.label_kosdaq.setStyleSheet('background-color: white; color: blue')
            else:
                self.label_kosdaq.setStyleSheet('background-color: white; color: black')
        else:
            pass 

        if samsung_text_color != '':

            if samsung_text_color == 'red':
                self.label_samsung.setStyleSheet('background-color: white; color: red')
            elif samsung_text_color == 'blue':
                self.label_samsung.setStyleSheet('background-color: white; color: blue')
            else:
                self.label_samsung.setStyleSheet('background-color: white; color: black')
        else:
            pass 
        '''
        if not NightTime:

            if comboindex1 == 8 or comboindex2 == 8:

                if wti_text_color != '':

                    if wti_text_color == 'red':
                        self.label_1st.setStyleSheet('background-color: white; color: red')
                    elif wti_text_color == 'blue':
                        self.label_1st.setStyleSheet('background-color: white; color: blue')
                    else:
                        self.label_1st.setStyleSheet('background-color: white; color: black')
                else:
                    pass
            else:
                if sp500_text_color != '':

                    if sp500_text_color == 'red':
                        self.label_1st.setStyleSheet('background-color: white; color: red')
                    elif sp500_text_color == 'blue':
                        self.label_1st.setStyleSheet('background-color: white; color: blue')
                    else:
                        self.label_1st.setStyleSheet('background-color: white; color: black')
                else:
                    pass
        else:
            if sp500_text_color != '':

                if sp500_text_color == 'red':
                    self.label_1st.setStyleSheet('background-color: white; color: red')
                elif sp500_text_color == 'blue':
                    self.label_1st.setStyleSheet('background-color: white; color: blue')
                else:
                    self.label_1st.setStyleSheet('background-color: white; color: black')
            else:
                pass
        '''

        if wti_text_color != '':

            if wti_text_color == 'red':
                self.label_1st.setStyleSheet('background-color: white; color: red')
            elif wti_text_color == 'blue':
                self.label_1st.setStyleSheet('background-color: white; color: blue')
            else:
                self.label_1st.setStyleSheet('background-color: white; color: black')
        else:
            pass        

        if dow_text_color != '':

            if dow_text_color == 'red':
                self.label_2nd.setStyleSheet('background-color: white; color: red')
            elif dow_text_color == 'blue':
                self.label_2nd.setStyleSheet('background-color: white; color: blue')
            else:
                self.label_2nd.setStyleSheet('background-color: white; color: black')
        else:
            pass        

        if nasdaq_text_color != '':

            if nasdaq_text_color == 'red':
                self.label_3rd.setStyleSheet('background-color: white; color: red')
            elif nasdaq_text_color == 'blue':
                self.label_3rd.setStyleSheet('background-color: white; color: blue')
            else:
                self.label_3rd.setStyleSheet('background-color: white; color: black')
        else:
            pass

        if dt.second % 30 == 0 and toggle:
            
            if kospi_text_color != kosdaq_text_color:

                str = '[{0:02d}:{1:02d}:{2:02d}] KOSPI, KOSDAQ의 극성이 상이합니다... \r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)
            else:
                pass
            
            if dow_text_color != nasdaq_text_color:

                str = '[{0:02d}:{1:02d}:{2:02d}] DOW, NASDAQ의 극성이 상이합니다... \r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)
            else:
                pass                
        else:
            pass 
    '''
    def call_low_color_clear(self, index):

        self.tableWidget_call.item(index, Option_column.저가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_call.item(index, Option_column.저가.value).setForeground(QBrush(검정색))            

    def call_high_color_clear(self, index):

        self.tableWidget_call.item(index, Option_column.고가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_call.item(index, Option_column.고가.value).setForeground(QBrush(검정색))            
    '''
    def call_node_color_clear(self):

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            if not market_service or call_scroll or refresh_coloring:
            
                oloh_str = ''                           
                item = QTableWidgetItem(oloh_str)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(i, Option_column.OLOH.value, item)
            else:
                pass
            
            if call_node_state['기준가']:
                self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['월저']:
                self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['월고']:
                self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['전저']:
                self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['전고']:
                self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
            else:
                pass
           
            if call_node_state['종가']:
                self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['피봇']:
                self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
            else:
                pass

            if call_node_state['시가']:

                시가 = df_call.at[i, '시가']
                종가 = df_call.at[i, '종가']

                self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(흰색))

                if 시가 > 종가:
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(적색))
                elif 시가 < 종가:
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(청색))
                else:
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
            else:
                pass

            if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(흰색))
                self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
   
    def call_cross_color_update(self):

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in put_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in put_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in call_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))                  
                else:
                    pass

                if 고가 > 1.0 and 고가 in put_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in put_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in call_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))   
                else:
                    pass
            else:
                pass            
    
    def put_cross_color_update(self):

        global put_scroll_end_position        

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in call_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in call_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 저가 > 1.0 and 저가 in put_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))                 
                else:
                    pass

                if 고가 > 1.0 and 고가 in call_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in call_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                else:
                    pass

                if 고가 > 1.0 and 고가 in put_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))                  
                else:
                    pass
            else:
                pass            

    def call_only_cross_color_update(self):

        global call_scroll_end_position

        if call_scroll_end_position > option_pairs_count:

            call_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(call_scroll_begin_position, call_scroll_end_position):

            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in call_고가_node_list:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))                  
                else:
                    pass
                
                if 고가 > 1.0 and 고가 in call_저가_node_list:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))   
                else:
                    pass
            else:
                pass
    
    def put_only_cross_color_update(self):

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if 저가 < 고가:

                if 저가 > 1.0 and 저가 in put_고가_node_list:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))                 
                else:
                    pass
                
                if 고가 > 1.0 and 고가 in put_저가_node_list:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))                  
                else:
                    pass
            else:
                pass           

    def kp200_low_color_blink(self, blink):

        if blink:

            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(대맥점색))

    def kp200_high_color_blink(self, blink):

        if blink:

            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(대맥점색))

    def call_low_coreval_color_blink(self, blink):

        global call_low_node_count, call_low_node_list, call_low_node_str
        global telegram_send_str_call_low

        dt = datetime.datetime.now()
        
        if call_open_list:

            loop_list = call_open_list
        else:
            loop_list = opt_total_list

        count = 0
        call_low_node_list = [] 

        call_low_node_old_count = call_low_node_count           

        for i in loop_list:

            저가 = df_call.at[i, '저가']

            if 저가 in 진성맥점:

                count += 1
                call_low_node_list.append(저가)

                if blink:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
            else:
                pass

        if call_low_node_list and call_low_node_str == '':

            if TARGET_MONTH_SELECT == 1:

                call_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 {3} 발생 C ▲".format(adj_hour, adj_min, adj_sec, call_low_node_list)

            elif TARGET_MONTH_SELECT == 2:

                call_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 {3} 발생 C ▲".format(adj_hour, adj_min, adj_sec, call_low_node_list)

            elif TARGET_MONTH_SELECT == 3:

                call_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜저가 맥점 {3} 발생 C ▲".format(adj_hour, adj_min, adj_sec, call_low_node_list)
            else:
                pass                        
        else:
            call_low_node_str == ''

        call_low_node_count = count

        if count == 0:

            telegram_send_str_call_low = ''

        elif count == 1:
            
            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                telegram_send_str_call_low = ''
            else:
                pass

        elif count == 2:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜저가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass  
            else:
                pass

        elif count == 3: 

            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜저가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass  
            else:
                pass

        else:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.저가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] CM 콜저가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] NM 콜저가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and call_low_node_count != call_low_node_old_count:

                    telegram_send_str_call_low = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜저가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass  
            else:
                pass

    def call_high_coreval_color_blink(self, blink):

        global call_high_node_count, call_high_node_list, call_high_node_str
        global telegram_send_str_call_high 

        dt = datetime.datetime.now()
        
        if call_open_list:

            loop_list = call_open_list
        else:
            loop_list = opt_total_list 

        count = 0
        call_high_node_list = [] 

        call_high_node_old_count = call_high_node_count           

        for i in loop_list:

            고가 = df_call.at[i, '고가']

            if 고가 in 진성맥점:

                count += 1
                call_high_node_list.append(고가)
                    
                if blink:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))                    
                else:
                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))
            else:
                pass

        if call_high_node_list and call_high_node_str == '':

            if TARGET_MONTH_SELECT == 1:

                call_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 {3} 발생 C ▼".format(adj_hour, adj_min, adj_sec, call_high_node_list)

            elif TARGET_MONTH_SELECT == 2:

                call_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 {3} 발생 C ▼".format(adj_hour, adj_min, adj_sec, call_high_node_list)

            elif TARGET_MONTH_SELECT == 3:

                call_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜고가 맥점 {3} 발생 C ▼".format(adj_hour, adj_min, adj_sec, call_high_node_list)
            else:
                pass
        else:
            call_high_node_str == ''

        call_high_node_count = count 

        if count == 0:

            telegram_send_str_call_high = ''   

        elif count == 1:
            
            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                telegram_send_str_call_high = '' 
            else:
                pass

        elif count == 2:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜고가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass  
            else:
                pass

        elif count == 3: 

            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜고가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass 
            else:
                pass

        else:

            if self.tableWidget_call.horizontalHeaderItem(Option_column.고가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_call.resizeRowsToContents()
                self.tableWidget_call.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] CM 콜고가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] NM 콜고가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and call_high_node_count != call_high_node_old_count:

                    telegram_send_str_call_high = "[{0:02d}:{1:02d}:{2:02d}] MAN 콜고가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass 
            else:
                pass

    def call_coreval_color_update(self):

        global flag_call_low_coreval, flag_call_high_coreval
        global call_low_node_count, call_high_node_count
        global telegram_send_str_call_low, telegram_send_str_call_high

        dt = datetime.datetime.now()
        
        flag_call_low_coreval = False
        flag_call_high_coreval = False

        item = QTableWidgetItem('저가')
        self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

        item = QTableWidgetItem('고가')
        self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

        if call_open_list:

            loop_list = call_open_list
        else:
            loop_list = opt_total_list

        count_low = 0
        count_high = 0

        for i in loop_list:

            시가 = df_call.at[i, '시가']
            저가 = df_call.at[i, '저가']
            고가 = df_call.at[i, '고가']

            if opt_coreval_search_start_value < 시가 < opt_search_end_value:

                if 시가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] call low 진성맥점 = {3}, low = {4}\r'.format(adj_hour, adj_min, adj_sec, 진성맥점, 저가)
                    self.textBrowser.append(str)

                    flag_call_low_coreval = True

                    count_low += 1

                    '''
                    if fut_code == cmshcode:

                        txt = '차월물 콜 저까 가 {} 입니다'.format(df_call.iloc[i]['저가'])
                    else:
                        txt = '콜 저까 가 {} 입니다'.format(df_call.iloc[i]['저가'])

                    Speak(txt)
                    '''
                else:
                    pass

                if 고가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] call high 진성맥점 = {3}, high = {4}\r'.format(adj_hour, adj_min, adj_sec, 진성맥점, 고가)
                    self.textBrowser.append(str)

                    flag_call_high_coreval = True

                    count_high += 1

                    '''                        
                    if fut_code == cmshcode:

                        txt = '차월물 콜 고까 가 {} 입니다'.format(df_call.iloc[i]['고가'])
                    else:
                        txt = '콜 고까 가 {} 입니다'.format(df_call.iloc[i]['고가'])

                    Speak(txt)
                    '''
                else:
                    pass
            else:
                pass

        call_low_node_count = count_low

        if count_low == 0:

            telegram_send_str_call_low = ''  

        elif count_low == 1:            

            item = QTableWidgetItem('★')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)
            telegram_send_str_call_low = ''

        elif count_low == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

        elif count_low == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)

        call_high_node_count = count_high

        if count_high == 0:

            telegram_send_str_call_high = ''    

        elif count_high == 1:            

            item = QTableWidgetItem('★')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)
            telegram_send_str_call_high = ''

        elif count_high == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)

        elif count_high == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)        

    def call_low_coreval_color_update(self):

        global flag_call_low_coreval

        dt = datetime.datetime.now()

        flag_call_low_coreval = False 

        if call_open_list:

            loop_list = call_open_list
        else:
            loop_list = opt_total_list

        for i in loop_list:

            시가 = df_call.at[i, '시가']
            저가 = df_call.at[i, '저가']

            if opt_coreval_search_start_value < 시가 < opt_search_end_value:

                if 시가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:

                    flag_call_low_coreval = True                        

                    '''
                    if fut_code == cmshcode:

                        txt = '차월물 콜 저까 가 {} 입니다'.format(df_call.iloc[i]['저가'])
                    else:
                        txt = '콜 저까 가 {} 입니다'.format(df_call.iloc[i]['저가'])

                    Speak(txt)
                    '''
                else:
                    pass                
            else:
                pass

    def call_high_coreval_color_update(self):

        global flag_call_high_coreval

        dt = datetime.datetime.now()

        flag_call_high_coreval = False

        if call_open_list:

            loop_list = call_open_list
        else:
            loop_list = opt_total_list

        for i in loop_list:

            시가 = df_call.at[i, '시가']
            고가 = df_call.at[i, '고가']

            if opt_coreval_search_start_value < 시가 < opt_search_end_value:

                if 시가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass                

                if 고가 in COREVAL:

                    self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:

                    flag_call_high_coreval = True                                

                    '''
                    if fut_code == cmshcode:

                        txt = '차월물 콜 고까 가 {} 입니다'.format(df_call.iloc[i]['고가'])
                    else:
                        txt = '콜 고까 가 {} 입니다'.format(df_call.iloc[i]['고가'])

                    Speak(txt)
                    '''
                else:
                    pass
            else:
                pass

    # 콜 컬러링 Apply 함수
    # 콜 저가, 고가가 풋시가에 있는지 검사
    def check_call_low_isin_put_open_list(self, x):

        if x > 0.3 and x in put_시가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))            
        else:
            pass
    
    def check_call_high_isin_put_open_list(self, x):

        if x > 0.3 and x in put_시가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 콜 저가, 고가가 풋종가에 있는지 검사
    def check_call_low_isin_put_close_list(self, x):

        if x > 0.3 and x in put_종가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_high_isin_put_close_list(self, x):

        if x > 0.3 and x in put_종가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))       
        else:
            pass

    # 콜 저가, 고가가 풋피봇에 있는지 검사
    def check_call_low_isin_put_pivot_list(self, x):

        if x > 0.3 and x in put_피봇_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))      
        else:
            pass

    def check_call_high_isin_put_pivot_list(self, x):

        if x > 0.3 and x in put_피봇_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))      
        else:
            pass

    # 콜 저가, 고가가 콜시가에 있는지 검사
    def check_call_low_isin_call_open_list(self, x):

        if x > 0.3 and x in call_시가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))  
        else:
            pass

    def check_call_high_isin_call_open_list(self, x):

        if x > 0.3 and x in call_시가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))  
        else:
            pass

    # 콜 저가, 고가가 콜종가에 있는지 검사
    def check_call_low_isin_call_close_list(self, x):

        if x > 0.3 and x in call_종가_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

    def check_call_high_isin_call_close_list(self, x):

        if x > 0.3 and x in call_종가_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

    # 콜 저가, 고가가 콜피봇에 있는지 검사
    def check_call_low_isin_call_pivot_list(self, x):

        if x > 0.3 and x in call_피봇_node_list:

            i = call_저가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

    def check_call_high_isin_call_pivot_list(self, x):

        if x > 0.3 and x in call_피봇_node_list:

            i = call_고가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

    # 콜종가가 풋, 콜의 저가, 고가에 있는지 검사
    def check_call_close_isin_put_low_list(self, x):

        if x > 0.3 and x in put_저가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    def check_call_close_isin_put_high_list(self, x):

        if x > 0.3 and x in put_고가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    def check_call_close_isin_call_low_list(self, x):

        if x > 0.3 and x in call_저가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    def check_call_close_isin_call_high_list(self, x):

        if x > 0.3 and x in call_고가_node_list:

            i = call_종가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))         
        else:
            pass

    # 콜피봇이 풋, 콜의 저가, 고가에 있는지 검사
    def check_call_pivot_isin_put_low_list(self, x):

        if x > 0.3 and x in put_저가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_pivot_isin_put_high_list(self, x):

        if x > 0.3 and x in put_고가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_pivot_isin_call_low_list(self, x):

        if x > 0.3 and x in call_저가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    def check_call_pivot_isin_call_high_list(self, x):

        if x > 0.3 and x in call_고가_node_list:

            i = call_피봇.index(x) + 1

            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))       
        else:
            pass

    # 콜시가가 풋, 콜의 저가, 고가에 있는지 검사
    def check_call_open_isin_put_low_list(self, x):

        if x > 0.3 and x in put_저가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))     
        else:
            pass

    def check_call_open_isin_put_high_list(self, x):

        if x > 0.3 and x in put_고가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))     
        else:
            pass

    def check_call_open_isin_call_low_list(self, x):

        if x > 0.3 and x in call_저가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))     
        else:
            pass

    def check_call_open_isin_call_high_list(self, x):

        if x > 0.3 and x in call_고가_node_list:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))     
        else:
            pass

    # 콜시가가 맥점에 있는지 검사
    def check_call_open_isin_coreval_list(self, x):

        if x > 0.3 and x in COREVAL:

            i = call_시가.index(x) + 1

            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))  
        else:
            pass
    
    def call_node_color_update(self):

        if 0:
            df_call['저가'].apply(self.check_call_low_isin_put_open_list)
            df_call['고가'].apply(self.check_call_high_isin_put_open_list)
            df_call['저가'].apply(self.check_call_low_isin_put_close_list)
            df_call['고가'].apply(self.check_call_high_isin_put_close_list)

            df_call['저가'].apply(self.check_call_low_isin_put_pivot_list) 
            df_call['고가'].apply(self.check_call_high_isin_put_pivot_list)
            df_call['저가'].apply(self.check_call_low_isin_call_open_list) 
            df_call['고가'].apply(self.check_call_high_isin_call_open_list) 

            df_call['저가'].apply(self.check_call_low_isin_call_close_list)
            df_call['고가'].apply(self.check_call_high_isin_call_close_list)
            df_call['저가'].apply(self.check_call_low_isin_call_pivot_list)
            df_call['고가'].apply(self.check_call_high_isin_call_pivot_list) 

            df_call['종가'].apply(self.check_call_close_isin_put_low_list)
            df_call['종가'].apply(self.check_call_close_isin_put_high_list)
            df_call['종가'].apply(self.check_call_close_isin_call_low_list)
            df_call['종가'].apply(self.check_call_close_isin_call_high_list) 

            df_call['피봇'].apply(self.check_call_pivot_isin_put_low_list)
            df_call['피봇'].apply(self.check_call_pivot_isin_put_high_list)
            df_call['피봇'].apply(self.check_call_pivot_isin_call_low_list)
            df_call['피봇'].apply(self.check_call_pivot_isin_call_high_list) 

            df_call['시가'].apply(self.check_call_open_isin_put_low_list)
            df_call['시가'].apply(self.check_call_open_isin_put_high_list)
            df_call['시가'].apply(self.check_call_open_isin_call_low_list)
            df_call['시가'].apply(self.check_call_open_isin_call_high_list)

            df_call['시가'].apply(self.check_call_open_isin_coreval_list)
        else:            
            global call_scroll_end_position

            if call_scroll_end_position > option_pairs_count:

                call_scroll_end_position = option_pairs_count
            else:
                pass

            for i in range(call_scroll_begin_position, call_scroll_end_position):

                저가 = df_call.at[i, '저가']
                고가 = df_call.at[i, '고가']

                if 저가 < 고가:

                    # 콜 저가,고가를 풋 node와 비교후 컬러링                            
                    if put_node_state['시가']:

                        if 저가 in put_시가_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_시가_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                   
                    else:
                        pass

                    if put_node_state['기준가']:

                        if 저가 in put_기준가_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_기준가_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['월저']:

                        if 저가 in put_월저_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_월저_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['월고']:

                        if 저가 in put_월고_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_월고_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['전저']:

                        if 저가 in put_전저_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_전저_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['전고']:

                        if 저가 in put_전고_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in put_전고_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['종가']:

                        if 저가 in put_종가_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in put_종가_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['피봇']:

                        if 저가 in put_피봇_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in put_피봇_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                   
                    else:
                        pass
                    
                    # 콜 저가,고가를 콜 node와 비교후 컬러링            
                    if call_node_state['시가']:

                        if 저가 in call_시가_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in call_시가_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                   
                    else:
                        pass

                    if call_node_state['기준가']:

                        if 저가 in call_기준가_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_기준가_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                   
                    else:
                        pass

                    if call_node_state['월저']:

                        if 저가 in call_월저_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in call_월저_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['월고']:

                        if 저가 in call_월고_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_월고_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['전저']:

                        if 저가 in call_전저_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_전저_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['전고']:

                        if 저가 in call_전고_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_전고_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['종가']:

                        if 저가 in call_종가_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_종가_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['피봇']:

                        if 저가 in call_피봇_node_list:

                            self.tableWidget_call.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_call.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_피봇_node_list:

                            self.tableWidget_call.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_call.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    # 콜 맥점을 콜,풋의 저가,고가와 비교후 컬러링
                    if call_node_state['기준가']:      

                        기준가 = df_call.at[i, '기준가']              

                        if 기준가 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 기준가 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 기준가 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 기준가 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.기준가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_call.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
                        else:
                            pass              
                    else:
                        pass

                    if call_node_state['월저']:

                        월저 = df_call.at[i, '월저']

                        if 월저 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월저 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월저 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월저 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.월저.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_call.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass              
                    else:
                        pass

                    if call_node_state['월고']:

                        월고 = df_call.at[i, '월고']

                        if 월고 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 월고 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 월고 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 월고 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.월고.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_call.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
                        else:
                            pass           
                    else:
                        pass

                    if call_node_state['전저']:

                        전저 = df_call.at[i, '전저']

                        if 전저 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전저 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전저 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전저 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.전저.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_call.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
                        else:
                            pass          
                    else:
                        pass

                    if call_node_state['전고']:

                        전고 = df_call.at[i, '전고']

                        if 전고 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전고 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전고 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전고 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.전고.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_call.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass          
                    else:
                        pass

                    if call_node_state['종가']:

                        종가 = df_call.at[i, '종가']

                        if 종가 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass         
                    else:
                        pass

                    if call_node_state['피봇']:

                        피봇 = df_call.at[i, '피봇']

                        if 피봇 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 피봇 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 피봇 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 피봇 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.피봇.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_call.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass          
                    else:
                        pass

                    if call_node_state['시가']:

                        시가 = df_call.at[i, '시가']

                        if 시가 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 시가 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 시가 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 시가 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass     
                    else:
                        pass

                    if call_node_state['시가']:

                        시가 = df_call.at[i, '시가']

                        if 시가 in COREVAL:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass
                    else:
                        pass          
                else:
                    if call_node_state['종가']:

                        종가 = df_call.at[i, '종가']

                        if 종가 in put_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in put_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in call_저가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in call_고가_node_list:

                            self.tableWidget_call.item(i, Option_column.종가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_call.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass         
                    else:
                        pass
            

    # 풋 컬러링 Apply 함수
    # 풋 저가, 고가가 콜시가에 있는지 검사
    def check_put_low_isin_call_open_list(self, x):

        if x > 0.3 and x in call_시가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_high_isin_call_open_list(self, x): 

        if x > 0.3 and x in call_시가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 풋 저가, 고가가 콜종가에 있는지 검사
    def check_put_low_isin_call_close_list(self, x):

        if x > 0.3 and x in call_종가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_call_close_list(self, x):

        if x > 0.3 and x in call_종가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 콜피봇에 있는지 검사
    def check_put_low_isin_call_pivot_list(self, x):

        if x > 0.3 and x in call_피봇_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_call_pivot_list(self, x):

        if x > 0.3 and x in call_피봇_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 풋시가에 있는지 검사
    def check_put_low_isin_put_open_list(self, x):

        if x > 0.3 and x in put_시가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_high_isin_put_open_list(self, x):

        if x > 0.3 and x in put_시가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 풋 저가, 고가가 풋종가에 있는지 검사
    def check_put_low_isin_put_close_list(self, x):

        if x > 0.3 and x in put_종가_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_put_close_list(self, x):

        if x > 0.3 and x in put_종가_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋 저가, 고가가 풋피봇에 있는지 검사
    def check_put_low_isin_put_pivot_list(self, x):

        if x > 0.3 and x in put_피봇_node_list:

            i = put_저가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_high_isin_put_pivot_list(self, x):

        if x > 0.3 and x in put_피봇_node_list:

            i = put_고가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋종가가 콜, 풋의 저가, 고가에 있는지 검사
    def check_put_close_isin_call_low_list(self, x):

        if x > 0.3 and x in call_저가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_close_isin_call_high_list(self, x):

        if x > 0.3 and x in call_고가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_close_isin_put_low_list(self, x):

        if x > 0.3 and x in put_저가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_close_isin_put_high_list(self, x):

        if x > 0.3 and x in put_고가_node_list:

            i = put_종가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋피봇이 콜, 풋의 저가, 고가에 있는지 검사
    def check_put_pivot_isin_call_low_list(self, x):

        if x > 0.3 and x in call_저가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_pivot_isin_call_high_list(self, x):

        if x > 0.3 and x in call_고가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_pivot_isin_put_low_list(self, x):

        if x > 0.3 and x in put_저가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    def check_put_pivot_isin_put_high_list(self, x):

        if x > 0.3 and x in put_고가_node_list:

            i = put_피봇.index(x) + 1

            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))            
        else:
            pass

    # 풋시가가 콜, 풋의 저가, 고가에 있는지 검사
    def check_put_open_isin_call_low_list(self, x):

        if x > 0.3 and x in call_저가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_open_isin_call_high_list(self, x):

        if x > 0.3 and x in call_고가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_open_isin_put_low_list(self, x):

        if x > 0.3 and x in put_저가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    def check_put_open_isin_put_high_list(self, x):

        if x > 0.3 and x in put_고가_node_list:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))            
        else:
            pass

    # 풋시가가 맥점에 있는지 검사
    def check_put_open_isin_coreval_list(self, x):

        if x > 0.3 and x in COREVAL:

            i = put_시가.index(x) + 1

            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))            
        else:
            pass

    def put_node_color_update(self):	

        if 0:
            df_put['저가'].apply(self.check_put_low_isin_call_open_list)
            df_put['고가'].apply(self.check_put_high_isin_call_open_list)
            df_put['저가'].apply(self.check_put_low_isin_call_close_list)
            df_put['고가'].apply(self.check_put_high_isin_call_close_list)

            df_put['저가'].apply(self.check_put_low_isin_call_pivot_list) 
            df_put['고가'].apply(self.check_put_high_isin_call_pivot_list)
            df_put['저가'].apply(self.check_put_low_isin_put_open_list) 
            df_put['고가'].apply(self.check_put_high_isin_put_open_list) 

            df_put['저가'].apply(self.check_put_low_isin_put_close_list)
            df_put['고가'].apply(self.check_put_high_isin_put_close_list)
            df_put['저가'].apply(self.check_put_low_isin_put_pivot_list)
            df_put['고가'].apply(self.check_put_high_isin_put_pivot_list) 

            df_put['종가'].apply(self.check_put_close_isin_call_low_list)
            df_put['종가'].apply(self.check_put_close_isin_call_high_list)
            df_put['종가'].apply(self.check_put_close_isin_put_low_list)
            df_put['종가'].apply(self.check_put_close_isin_put_high_list) 

            df_put['피봇'].apply(self.check_put_pivot_isin_call_low_list)
            df_put['피봇'].apply(self.check_put_pivot_isin_call_high_list)
            df_put['피봇'].apply(self.check_put_pivot_isin_put_low_list)
            df_put['피봇'].apply(self.check_put_pivot_isin_put_high_list) 

            df_put['시가'].apply(self.check_put_open_isin_call_low_list)
            df_put['시가'].apply(self.check_put_open_isin_call_high_list)
            df_put['시가'].apply(self.check_put_open_isin_put_low_list)
            df_put['시가'].apply(self.check_put_open_isin_put_high_list)

            df_put['시가'].apply(self.check_put_open_isin_coreval_list)
        else:
            global put_scroll_end_position

            if put_scroll_end_position > option_pairs_count:

                put_scroll_end_position = option_pairs_count
            else:
                pass
            
            for i in range(put_scroll_begin_position, put_scroll_end_position):

                저가 = df_put.at[i, '저가']
                고가 = df_put.at[i, '고가']

                if 저가 < 고가:

                    # 풋 저가,고가를 콜 node와 비교후 컬러링            
                    if call_node_state['시가']:

                        if 저가 in call_시가_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in call_시가_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜시가색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['기준가']:

                        if 저가 in call_기준가_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_기준가_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜기준가색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['월저']:

                        if 저가 in call_월저_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in call_월저_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜월저색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['월고']:

                        if 저가 in call_월고_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_월고_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜월고색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['전저']:

                        if 저가 in call_전저_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_전저_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜전저색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                   
                    else:
                        pass

                    if call_node_state['전고']:

                        if 저가 in call_전고_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_전고_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜전고색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['종가']:

                        if 저가 in call_종가_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_종가_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜종가색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if call_node_state['피봇']:

                        if 저가 in call_피봇_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in call_피봇_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(콜피봇색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    # 풋 저가,고가를 풋 node와 비교후 컬러링            
                    if put_node_state['시가']:

                        if 저가 in put_시가_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_시가_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass         

                    if put_node_state['기준가']:

                        if 저가 in put_기준가_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_기준가_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['월저']:

                        if 저가 in put_월저_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_월저_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                   
                    else:
                        pass

                    if put_node_state['월고']:

                        if 저가 in put_월고_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_월고_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['전저']:

                        if 저가 in put_전저_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 고가 in put_전저_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(흰색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['전고']:

                        if 저가 in put_전고_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in put_전고_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['종가']:

                        if 저가 in put_종가_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in put_종가_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass

                    if put_node_state['피봇']:

                        if 저가 in put_피봇_node_list:

                            self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 고가 in put_피봇_node_list:

                            self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                        else:
                            pass                    
                    else:
                        pass                  

                    # 풋 맥점을 콜,풋의 저가,고가와 비교후 컬러링
                    if put_node_state['기준가']:

                        기준가 = df_put.at[i, '기준가']

                        if 기준가 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 기준가 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 기준가 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 기준가 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(풋기준가색))
                            self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(흰색))
                        else:
                            pass           
                    else:
                        pass

                    if put_node_state['월저']:

                        월저 = df_put.at[i, '월저']

                        if 월저 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월저 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월저 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월저 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(풋월저색))
                            self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(흰색))
                        else:
                            pass           
                    else:
                        pass

                    if put_node_state['월고']:

                        월고 = df_put.at[i, '월고']

                        if 월고 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월고 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월고 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 월고 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(풋월고색))
                            self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(흰색))
                        else:
                            pass         
                    else:
                        pass

                    if put_node_state['전저']:

                        전저 = df_put.at[i, '전저']

                        if 전저 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 전저 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 전저 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 전저 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(풋전저색))
                            self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(흰색))
                        else:
                            pass        
                    else:
                        pass

                    if put_node_state['전고']:

                        전고 = df_put.at[i, '전고']

                        if 전고 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전고 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전고 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 전고 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(풋전고색))
                            self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
                        else:
                            pass       
                    else:
                        pass

                    if put_node_state['종가']:

                        종가 = df_put.at[i, '종가']

                        if 종가 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass    
                    else:
                        pass

                    if put_node_state['피봇']:

                        피봇 = df_put.at[i, '피봇']

                        if 피봇 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 피봇 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 피봇 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 피봇 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(풋피봇색))
                            self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
                        else:
                            pass           
                    else:
                        pass

                    if put_node_state['시가']:

                        시가 = df_put.at[i, '시가']

                        if 시가 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 시가 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 시가 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass

                        if 시가 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(풋시가색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(흰색))
                        else:
                            pass       
                    else:
                        pass           

                    if put_node_state['시가']:

                        시가 = df_put.at[i, '시가']

                        if 시가 in COREVAL:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass 
                    else:
                        pass           
                else:
                    if put_node_state['종가']:

                        종가 = df_put.at[i, '종가']

                        if 종가 in call_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in call_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in put_저가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if 종가 in put_고가_node_list:

                            self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(풋종가색))
                            self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
                        else:
                            pass    
                    else:
                        pass            

    def put_node_color_clear(self):

        global put_scroll_end_position

        if put_scroll_end_position > option_pairs_count:

            put_scroll_end_position = option_pairs_count
        else:
            pass

        for i in range(put_scroll_begin_position, put_scroll_end_position):

            if not market_service or put_scroll or refresh_coloring:
            
                oloh_str = ''                           
                item = QTableWidgetItem(oloh_str)
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(i, Option_column.OLOH.value, item)
            else:
                pass
            
            if put_node_state['기준가']:
                self.tableWidget_put.item(i, Option_column.기준가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.기준가.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['월저']:
                self.tableWidget_put.item(i, Option_column.월저.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.월저.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['월고']:
                self.tableWidget_put.item(i, Option_column.월고.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.월고.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['전저']:
                self.tableWidget_put.item(i, Option_column.전저.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.전저.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['전고']:
                self.tableWidget_put.item(i, Option_column.전고.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.전고.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['종가']:
                self.tableWidget_put.item(i, Option_column.종가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.종가.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['피봇']:
                self.tableWidget_put.item(i, Option_column.피봇.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.피봇.value).setForeground(QBrush(검정색))
            else:
                pass

            if put_node_state['시가']:

                시가 = df_put.at[i, '시가']
                종가 = df_put.at[i, '종가']

                self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(흰색))

                if 시가 > 종가:
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(적색))
                elif 시가 < 종가:
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(청색))
                else:
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
            else:
                pass

            if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))

                self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(흰색))
                self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
      
    def put_low_coreval_color_blink(self, blink):

        global put_low_node_count, put_low_node_list, put_low_node_str
        global telegram_send_str_put_low

        dt = datetime.datetime.now()
        
        if put_open_list:

            loop_list = put_open_list
        else:
            loop_list = opt_total_list

        count = 0
        put_low_node_list = [] 

        put_low_node_old_count = put_low_node_count      

        for i in loop_list:

            저가 = df_put.at[i, '저가']

            if 저가 in 진성맥점:

                count += 1
                put_low_node_list.append(저가)

                if blink:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))                                                                     
                else:
                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
            else:
                pass

        if put_low_node_list and put_low_node_str == '':

            if TARGET_MONTH_SELECT == 1:

                put_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 {3} 발생 P ▲".format(adj_hour, adj_min, adj_sec, put_low_node_list)

            elif TARGET_MONTH_SELECT == 2:

                put_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 {3} 발생 P ▲".format(adj_hour, adj_min, adj_sec, put_low_node_list)

            elif TARGET_MONTH_SELECT == 3:

                put_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋저가 맥점 {3} 발생 P ▲".format(adj_hour, adj_min, adj_sec, put_low_node_list)
            else:
                pass
        else:
            put_low_node_str == ''    

        put_low_node_count = count

        if count == 0:

            telegram_send_str_put_low = ''

        elif count == 1:
            
            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                telegram_send_str_put_low = ''
            else:
                pass

        elif count == 2:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋저가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass
            else:
                pass

        elif count == 3: 

            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋저가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass
            else:
                pass

        else:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.저가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] CM 풋저가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] NM 풋저가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and put_low_node_count != put_low_node_old_count:

                    telegram_send_str_put_low = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋저가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass
            else:
                pass

    def put_high_coreval_color_blink(self, blink):

        global put_high_node_count, put_high_node_list, put_high_node_str
        global telegram_send_str_put_high

        dt = datetime.datetime.now()

        if put_open_list:

            loop_list = put_open_list
        else:
            loop_list = opt_total_list

        count = 0
        put_high_node_list = []

        put_high_node_old_count = put_high_node_count             

        for i in loop_list:

            고가 = df_put.at[i, '고가']

            if 고가 in 진성맥점:

                count += 1
                put_high_node_list.append(고가)

                if blink:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))                    
                else:
                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))                 
            else:
                pass

        if put_high_node_list and put_high_node_str == '':

            if TARGET_MONTH_SELECT == 1: 

                put_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 {3} 발생 P ▼".format(adj_hour, adj_min, adj_sec, put_high_node_list)

            elif TARGET_MONTH_SELECT == 2:

                put_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 {3} 발생 P ▼".format(adj_hour, adj_min, adj_sec, put_high_node_list)

            elif TARGET_MONTH_SELECT == 3:

                put_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋고가 맥점 {3} 발생 P ▼".format(adj_hour, adj_min, adj_sec, put_high_node_list)
            else:
                pass
        else:
            put_high_node_str == ''

        put_high_node_count = count

        if count == 0:

            telegram_send_str_put_high = ''

        elif count == 1:
            
            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★':
            
                item = QTableWidgetItem('★')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                telegram_send_str_put_high = ''
            else:
                pass

        elif count == 2:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★ 2':
            
                item = QTableWidgetItem('★ 2')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋고가 맥점 ★ 2 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass
            else:
                pass

        elif count == 3: 

            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★ 3':
            
                item = QTableWidgetItem('★ 3')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋고가 맥점 ★ 3 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass
            else:
                pass
        else:

            if self.tableWidget_put.horizontalHeaderItem(Option_column.고가.value).text() != '★ +':
            
                item = QTableWidgetItem('★ +')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

                #self.tableWidget_put.resizeRowsToContents()
                self.tableWidget_put.resizeColumnsToContents()

                if TARGET_MONTH_SELECT == 1 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] CM 풋고가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 2 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] NM 풋고가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()

                elif TARGET_MONTH_SELECT == 3 and put_high_node_count != put_high_node_old_count:

                    telegram_send_str_put_high = "[{0:02d}:{1:02d}:{2:02d}] MAN 풋고가 맥점 ★ + 발생".format(adj_hour, adj_min, adj_sec)

                    #self.tableWidget_fut.resizeRowsToContents()
                    #self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass
            else:
                pass
    
    def put_coreval_color_update(self):

        global flag_put_low_coreval, flag_put_high_coreval
        global put_low_node_count, put_high_node_count
        global telegram_send_str_put_low, telegram_send_str_put_high

        dt = datetime.datetime.now()
        
        flag_put_low_coreval = False
        flag_put_high_coreval = False

        item = QTableWidgetItem('저가')
        self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

        item = QTableWidgetItem('고가')
        self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

        if put_open_list:

            loop_list = put_open_list
        else:
            loop_list = opt_total_list

        count_low = 0
        count_high = 0

        for i in loop_list:

            시가 = df_put.at[i, '시가']
            저가 = df_put.at[i, '저가']
            고가 = df_put.at[i, '고가']

            if opt_coreval_search_start_value < 시가 < opt_search_end_value:

                if 시가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(대맥점색))
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] put low 진성맥점 = {3}, low = {4}\r'.format(adj_hour, adj_min, adj_sec, 진성맥점, 저가)
                    self.textBrowser.append(str)

                    flag_put_low_coreval = True

                    count_low += 1

                    '''                        
                    if fut_code == cmshcode:

                        txt = '차월물 풋 저까 가 {} 입니다'.format(df_put.iloc[i]['저가'])
                    else:
                        txt = '풋 저까 가 {} 입니다'.format(df_put.iloc[i]['저가'])

                    Speak(txt)
                    '''
                else:
                    pass

                if 고가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(대맥점색))
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] put high 진성맥점 = {3}, high = {4}\r'.format(adj_hour, adj_min, adj_sec, 진성맥점, 고가)
                    self.textBrowser.append(str)

                    flag_put_high_coreval = True

                    count_high += 1

                    '''
                    if fut_code == cmshcode:

                        txt = '차월물 풋 고까 가 {} 입니다'.format(df_put.iloc[i]['고가'])
                    else:
                        txt = '풋 고까 가 {} 입니다'.format(df_put.iloc[i]['고가'])

                    Speak(txt)
                    '''
                else:
                    pass
            else:
                pass

        put_low_node_count = count_low

        if count_low == 0:

            telegram_send_str_put_low = ''  

        elif count_low == 1:              

            item = QTableWidgetItem('★')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
            telegram_send_str_put_low = '' 

        elif count_low == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

        elif count_low == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)

        put_high_node_count = count_high

        if count_high == 0:

            telegram_send_str_put_high = ''

        elif count_high == 1:          

            item = QTableWidgetItem('★')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
            telegram_send_str_put_high = ''

        elif count_high == 2:

            item = QTableWidgetItem('★ 2')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)

        elif count_high == 3:

            item = QTableWidgetItem('★ 3')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
        else:
            item = QTableWidgetItem('★ +')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
        
    def put_low_coreval_color_update(self):

        global flag_put_low_coreval

        dt = datetime.datetime.now()

        flag_put_low_coreval = False

        if put_open_list:

            loop_list = put_open_list
        else:
            loop_list = opt_total_list

        for i in loop_list:

            시가 = df_put.at[i, '시가']
            저가 = df_put.at[i, '저가']

            if opt_coreval_search_start_value < 시가 < opt_search_end_value:

                if 시가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass

                if 저가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.저가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.저가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 저가 in 진성맥점:

                    flag_put_low_coreval = True                            

                    '''                        
                    if fut_code == cmshcode:

                        txt = '차월물 풋 저까 가 {} 입니다'.format(df_put.iloc[i]['저가'])
                    else:
                        txt = '풋 저까 가 {} 입니다'.format(df_put.iloc[i]['저가'])

                    Speak(txt)
                    '''
                else:
                    pass                
            else:
                pass 

    def put_high_coreval_color_update(self):

        global flag_put_high_coreval

        dt = datetime.datetime.now()

        flag_put_high_coreval = False

        if put_open_list:

            loop_list = put_open_list
        else:
            loop_list = opt_total_list

        for i in loop_list:

            시가 = df_put.at[i, '시가']
            고가 = df_put.at[i, '고가']

            if opt_coreval_search_start_value < 시가 < opt_search_end_value:

                if 시가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                else:
                    pass                

                if 고가 in COREVAL:

                    self.tableWidget_put.item(i, Option_column.고가.value).setBackground(QBrush(대맥점색))
                    self.tableWidget_put.item(i, Option_column.고가.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if 고가 in 진성맥점:

                    flag_put_high_coreval = True                        

                    '''
                    if fut_code == cmshcode:

                        txt = '차월물 풋 고까 가 {} 입니다'.format(df_put.iloc[i]['고가'])
                    else:
                        txt = '풋 고까 가 {} 입니다'.format(df_put.iloc[i]['고가'])

                    Speak(txt)
                    '''
                else:
                    pass
            else:
                pass
    
    def kp200_node_color_clear(self):

        self.tableWidget_fut.item(2, Futures_column.전저.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.전저.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.전고.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.전고.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.종가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.종가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.피봇.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.피봇.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.시가.value).setBackground(QBrush(흰색))
        self.tableWidget_fut.item(2, Futures_column.시가.value).setForeground(QBrush(검정색))
        
        self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))

        self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(옅은회색))
        self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))            

    def fut_node_color_clear(self):

        if NightTime:

            self.tableWidget_fut.item(0, Futures_column.전저.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(0, Futures_column.전저.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(0, Futures_column.전고.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(0, Futures_column.전고.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(0, Futures_column.종가.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(0, Futures_column.종가.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(0, Futures_column.피봇.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(0, Futures_column.피봇.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(검정색))
            
            self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색)) 
        else:
            self.tableWidget_fut.item(1, Futures_column.전저.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(1, Futures_column.전저.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(1, Futures_column.전고.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(1, Futures_column.전고.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(1, Futures_column.종가.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(1, Futures_column.종가.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(1, Futures_column.피봇.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(1, Futures_column.피봇.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(흰색))
            self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(검정색))
            
            self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))

            self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(옅은회색))
            self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))

    def kp200_low_node_coloring(self):

        dt = datetime.datetime.now()

        global flag_kp200_low_node, kp200_low_node_time, kp200_low_node_str  

        flag_kp200_low_node = False    
        
        # kp200 맥점 컬러링
        #self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(옅은회색))
        #self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))
        
        for i in range(10):

            if self.is_within_n_tick(kp200_realdata['저가'], KP200_COREVAL[i], 10):
                
                self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(대맥점색))
                self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))

                flag_kp200_low_node = True

                kp200_low_node_str = "[{0:02d}:{1:02d}:{2:02d}] kp200 저가맥점 {3:.2f} 발생 !!!".format(\
                                        adj_hour, adj_min, adj_sec, kp200_realdata['저가'])
            else:
                pass

    def kp200_high_node_coloring(self):  

        dt = datetime.datetime.now() 

        global flag_kp200_high_node, kp200_high_node_time, kp200_high_node_str 

        flag_kp200_high_node = False    
        
        # kp200 맥점 컬러링
        #self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(옅은회색))
        #self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))
        
        for i in range(10):

            if self.is_within_n_tick(kp200_realdata['고가'], KP200_COREVAL[i], 10):
                
                self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(대맥점색))
                self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))

                flag_kp200_high_node = True

                kp200_high_node_str = "[{0:02d}:{1:02d}:{2:02d}] kp200 고가맥점 {3:.2f} 발생 !!!".format(\
                                        adj_hour, adj_min, adj_sec, kp200_realdata['고가'])
            else:
                pass

    def fut_oloh_check(self):

        global flag_fut_ol, flag_fut_oh, fut_oloh_str, flag_fut_oloh

        dt = datetime.datetime.now()

        # FUT OL/OH
        if self.is_within_n_tick(선물_시가, 선물_저가, 10) and not self.is_within_n_tick(선물_시가, 선물_고가, 10):

            item = QTableWidgetItem('▲')
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(적색))
            item.setForeground(QBrush(흰색))

            if NightTime:
                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)
            else:
                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(흰색))
            else:
                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(적색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(흰색))

            if TARGET_MONTH_SELECT == 1 and not flag_fut_ol and not flag_fut_oloh:

                fut_oloh_str = "[{0:02d}:{1:02d}:{2:02d}] CM 선물 OL ▲".format(adj_hour, adj_min, adj_sec)
                flag_fut_oloh = True

            elif TARGET_MONTH_SELECT == 2 and not flag_fut_ol and not flag_fut_oloh:

                fut_oloh_str = "[{0:02d}:{1:02d}:{2:02d}] NM 선물 OL ▲".format(adj_hour, adj_min, adj_sec)
                flag_fut_oloh = True

            elif TARGET_MONTH_SELECT == 3 and not flag_fut_ol and not flag_fut_oloh:

                fut_oloh_str = "[{0:02d}:{1:02d}:{2:02d}] MAN 선물 OL ▲".format(adj_hour, adj_min, adj_sec)
                flag_fut_oloh = True
            else:
                pass
            
            flag_fut_ol = True

        elif not self.is_within_n_tick(선물_시가, 선물_저가, 10) and self.is_within_n_tick(선물_시가, 선물_고가, 10):

            item = QTableWidgetItem('▼')
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(청색))
            item.setForeground(QBrush(흰색))

            if NightTime:
                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)
            else:
                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item)

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(흰색))
            else:
                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(흰색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(청색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(흰색))

            if TARGET_MONTH_SELECT == 1 and not flag_fut_oh and not flag_fut_oloh:

                fut_oloh_str = "[{0:02d}:{1:02d}:{2:02d}] CM 선물 OH ▼".format(adj_hour, adj_min, adj_sec)
                flag_fut_oloh = True

            elif TARGET_MONTH_SELECT == 2 and not flag_fut_oh and not flag_fut_oloh:

                fut_oloh_str = "[{0:02d}:{1:02d}:{2:02d}] NM 선물 OH ▼".format(adj_hour, adj_min, adj_sec)
                flag_fut_oloh = True

            elif TARGET_MONTH_SELECT == 3 and not flag_fut_oh and not flag_fut_oloh:

                fut_oloh_str = "[{0:02d}:{1:02d}:{2:02d}] MAN 선물 OH ▼".format(adj_hour, adj_min, adj_sec)
                flag_fut_oloh = True
            else:
                pass
            
            flag_fut_oh = True

        else:
            flag_fut_ol = False
            flag_fut_oh = False
            fut_oloh_str = ''
            flag_fut_oloh = False

            item = QTableWidgetItem('')

            if NightTime:
                self.tableWidget_fut.setItem(0, Futures_column.OLOH.value, item)
            else:
                self.tableWidget_fut.setItem(1, Futures_column.OLOH.value, item) 

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.시가.value).setBackground(QBrush(흰색))
                self.tableWidget_fut.item(0, Futures_column.시가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.시가.value).setBackground(QBrush(흰색))
                self.tableWidget_fut.item(1, Futures_column.시가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(옅은회색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))
    
    def kp200_node_coloring(self):

        dt = datetime.datetime.now()
                
        # 전저, 전고, 종가, 피봇 컬러링
        if self.is_within_n_tick(KP200_전저, kp200_realdata['저가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if self.is_within_n_tick(KP200_전고, kp200_realdata['저가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if self.is_within_n_tick(KP200_전일종가, kp200_realdata['저가'], 10):

            self.tableWidget_fut.item(2, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if kp200_피봇 > 0:

            if self.is_within_n_tick(kp200_피봇, kp200_realdata['저가'], 10):

                self.tableWidget_fut.item(2, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(2, Futures_column.저가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.저가.value).setForeground(QBrush(검정색))                    
            else:
                pass
        else:
            pass        

        if self.is_within_n_tick(KP200_전저, kp200_realdata['고가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전저.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.전저.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜전저색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass        

        if self.is_within_n_tick(KP200_전고, kp200_realdata['고가'], 10):

            self.tableWidget_fut.item(2, Futures_column.전고.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.전고.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜전고색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass        

        if self.is_within_n_tick(KP200_전일종가, kp200_realdata['고가'], 10):

            self.tableWidget_fut.item(2, Futures_column.종가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.종가.value).setForeground(QBrush(검정색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜종가색))
            self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                
        else:
            pass

        if kp200_피봇 > 0:

            if self.is_within_n_tick(kp200_피봇, kp200_realdata['고가'], 10):                

                self.tableWidget_fut.item(2, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(2, Futures_column.고가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(2, Futures_column.고가.value).setForeground(QBrush(검정색))                    
            else:
                pass  
        else:
            pass

        # 선물 맥점 컬러링
        str = '[{0:02d}:{1:02d}:{2:02d}] KP200 맥점 컬러링을 완료했습니다.\r'.format(adj_hour, adj_min, adj_sec)
        self.textBrowser.append(str)

    def fut_node_coloring(self):

        dt = datetime.datetime.now()

        if 선물_시가 > 0:

            if 선물_현재가 > 선물_시가:

                if NightTime:

                    self.tableWidget_fut.item(0, 0).setBackground(QBrush(적색))
                    self.tableWidget_fut.item(0, 0).setForeground(QBrush(검정색))
                else:
                    self.tableWidget_fut.item(1, 0).setBackground(QBrush(적색))
                    self.tableWidget_fut.item(1, 0).setForeground(QBrush(검정색))

            elif 선물_현재가 < 선물_시가:

                if NightTime:

                    self.tableWidget_fut.item(0, 0).setBackground(QBrush(청색))
                    self.tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, 0).setBackground(QBrush(청색))
                    self.tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))

            else:

                if NightTime:

                    self.tableWidget_fut.item(0, 0).setBackground(QBrush(검정색))
                    self.tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, 0).setBackground(QBrush(검정색))
                    self.tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))
        else:
            pass
                
        # 전저, 전고, 종가, 피봇 컬러링
        if self.is_within_n_tick(선물_전저, 선물_저가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.전저.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(0, Futures_column.전저.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.전저.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(1, Futures_column.전저.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

        if self.is_within_n_tick(선물_전고, 선물_저가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.전고.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(0, Futures_column.전고.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.전고.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(1, Futures_column.전고.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

        if self.is_within_n_tick(선물_종가, 선물_저가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.종가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(0, Futures_column.종가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.종가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(1, Futures_column.종가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass

        if 선물_피봇 > 0 and self.is_within_n_tick(선물_피봇, 선물_저가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(0, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(0, Futures_column.저가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(1, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(1, Futures_column.저가.value).setForeground(QBrush(검정색))
        else:
            pass       

        if self.is_within_n_tick(선물_전저, 선물_고가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.전저.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(0, Futures_column.전저.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.전저.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(1, Futures_column.전저.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜전저색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass        

        if self.is_within_n_tick(선물_전고, 선물_고가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.전고.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(0, Futures_column.전고.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.전고.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(1, Futures_column.전고.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜전고색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass        

        if self.is_within_n_tick(선물_종가, 선물_고가, 10):

            if NightTime:

                self.tableWidget_fut.item(0, Futures_column.종가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(0, Futures_column.종가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.종가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(1, Futures_column.종가.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜종가색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

        if 선물_피봇 > 0 and self.is_within_n_tick(선물_피봇, 선물_고가, 10):                

            if NightTime:
                
                self.tableWidget_fut.item(0, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(0, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(0, Futures_column.고가.value).setForeground(QBrush(검정색))
            else:
                self.tableWidget_fut.item(1, Futures_column.피봇.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(1, Futures_column.피봇.value).setForeground(QBrush(검정색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setBackground(QBrush(콜피봇색))
                self.tableWidget_fut.item(1, Futures_column.고가.value).setForeground(QBrush(검정색))
        else:
            pass

        # 선물 맥점 컬러링
        str = '[{0:02d}:{1:02d}:{2:02d}] 선물 맥점 컬러링을 완료했습니다.\r'.format(adj_hour, adj_min, adj_sec)
        #self.textBrowser.append(str)

    # 선물표시	
    def futures_display(self, result):        

        global cme_realdata, fut_realdata
        global df_fut
        global atm_str, atm_val, atm_index, old_atm_index        
        global 선물_시가, 선물_현재가, 선물_저가, 선물_고가, 선물_피봇
        global flag_fut_low, flag_fut_high 
        global fut_volume_power
        global flag_first_arrive, fut_first_arrive_time
        global telegram_send_worker_on_time, flag_telegram_send_worker, flag_telegram_listen_worker
        global 선물_저가, 선물_현재가, 선물_대비, 선물_전일대비, 선물_등락율, 선물_고가, 선물_진폭
        global 선물_진폭비, 선물_체결시간
        global fut_tick_list, fut_value_list, df_fut_ohlc
        global 선물_현재가_버퍼
        global flag_futures_ohlc_open
        global df_futures_graph

        dt = datetime.datetime.now()
        current_str = dt.strftime('%H:%M:%S')

        선물_체결시간 = result['체결시간']

        시가 = result['시가']
        현재가 = result['현재가']
        저가 = result['저가']
        고가 = result['고가']       
        
        선물_시가 = float(시가)
        선물_현재가 = float(현재가)
        선물_저가 = float(저가)
        선물_고가 = float(고가)
        
        선물_대비 = 선물_현재가 - 선물_시가
        선물_전일대비 = 선물_현재가 - 선물_종가         
        선물_등락율 = result['등락율']
        선물_진폭 = 선물_고가 - 선물_저가        

        if receive_real_ovc:

            # Plot 데이타프레임 생성
            df_futures_graph.at[ovc_x_idx, 'price'] = 선물_현재가

            df_futures_graph.at[ovc_x_idx, 'drate'] = result['등락율']

            # 1T OHLC 생성
            df_futures_graph.at[ovc_x_idx, 'ctime'] = OVC_체결시간

            if 선물_현재가 > 0:

                if OVC_SEC == 0:

                    if not flag_futures_ohlc_open:

                        df_futures_graph.at[ovc_x_idx, 'open'] = 선물_현재가
                        df_futures_graph.at[ovc_x_idx, 'high'] = 선물_현재가
                        df_futures_graph.at[ovc_x_idx, 'low'] = 선물_현재가
                        df_futures_graph.at[ovc_x_idx, 'middle'] = 선물_현재가
                        df_futures_graph.at[ovc_x_idx, 'close'] = 선물_현재가
                        df_futures_graph.at[ovc_x_idx, 'price'] = 선물_현재가

                        del 선물_현재가_버퍼[:]

                        flag_futures_ohlc_open = True
                    else:
                        선물_현재가_버퍼.append(선물_현재가)              
                else:
                    if df_futures_graph.at[ovc_x_idx, 'open'] != df_futures_graph.at[ovc_x_idx, 'open']:
                        df_futures_graph.at[ovc_x_idx, 'open'] = df_futures_graph.at[ovc_x_idx - 1, 'close']
                        del 선물_현재가_버퍼[:]
                    else:
                        pass

                    선물_현재가_버퍼.append(선물_현재가)

                    if max(선물_현재가_버퍼) > 0:
                        df_futures_graph.at[ovc_x_idx, 'high'] = max(선물_현재가_버퍼)
                    else:
                        pass

                    if min(선물_현재가_버퍼) == 0:

                        if max(선물_현재가_버퍼) > 0:
                            df_futures_graph.at[ovc_x_idx, 'low'] = max(선물_현재가_버퍼)
                        else:
                            pass
                    else:
                        df_futures_graph.at[ovc_x_idx, 'low'] = min(선물_현재가_버퍼)

                    df_futures_graph.at[ovc_x_idx, 'close'] = 선물_현재가

                    flag_futures_ohlc_open = False
            else:
                pass                

            # Bollinger Bands
            df_futures_graph.at[ovc_x_idx, 'middle'] = (df_futures_graph.at[ovc_x_idx, 'high'] + df_futures_graph.at[ovc_x_idx, 'low']) / 2 
            upper, middle, lower = talib.BBANDS(np.array(df_futures_graph['middle'], dtype=float), timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_TYPE)

            df_futures_graph['BBUpper'] = upper
            df_futures_graph['BBMiddle'] = middle
            df_futures_graph['BBLower'] = lower

            # MACD
            # list of values for the Moving Average Type:  
            # 0: MA_Type.SMA (simple)  
            # 1: MA_Type.EMA (exponential)  
            # 2: MA_Type.WMA (weighted)  
            # 3: MA_Type.DEMA (double exponential)  
            # 4: MA_Type.TEMA (triple exponential)  
            # 5: MA_Type.TRIMA (triangular)  
            # 6: MA_Type.KAMA (Kaufman adaptive)  
            # 7: MA_Type.MAMA (Mesa adaptive)  
            # 8: MA_Type.T3 (triple exponential T3)           

            #macd, macdsignal, macdhist = talib.MACDEXT(np.array(df_futures_graph['close'], dtype=float), fastperiod=12, slowperiod=26, signalperiod=9, \
                #fastmatype=MA_TYPE, slowmatype=MA_TYPE, signalmatype=MA_TYPE)

            #df_futures_graph['MACD'] = macd
            #df_futures_graph['MACDSig'] = macdsignal
            #df_futures_graph['MACDHist'] = macdhist

            # Parabolic SAR
            parabolic_sar = talib.SAR(np.array(df_futures_graph['high'], dtype=float), np.array(df_futures_graph['low'], dtype=float), acceleration=0.02, maximum=0.2)

            # PSARIndicator 함수 오동작하는 듯...
            #ta_psar = ta.trend.PSARIndicator(df_futures_graph['high'], df_futures_graph['low'], df_futures_graph['close'])        

            df_futures_graph['PSAR'] = parabolic_sar
            #df_futures_graph['TA_PSAR'] = ta_psar.psar()

            # MAMA
            mama, fama = talib.MAMA(np.array(df_futures_graph['close'], dtype=float), fastlimit=0.5, slowlimit=0.05)

            df_futures_graph['MAMA'] = mama
            df_futures_graph['FAMA'] = fama

            if df_futures_graph.at[ovc_x_idx, 'FAMA'] == df_futures_graph.at[ovc_x_idx, 'FAMA'] and df_futures_graph.at[ovc_x_idx, 'BBLower'] == df_futures_graph.at[ovc_x_idx, 'BBLower']:

                if df_futures_graph.at[ovc_x_idx, 'FAMA'] < df_futures_graph.at[ovc_x_idx, 'BBLower']:
                    df_futures_graph.at[ovc_x_idx, 'A_FAMA'] = df_futures_graph.at[ovc_x_idx, 'BBLower']
                else:
                    df_futures_graph.at[ovc_x_idx, 'A_FAMA'] = df_futures_graph.at[ovc_x_idx, 'FAMA']
            else:
                pass

            # Ichimoku Indicator
            #futures_Ichimoku = ta.trend.IchimokuIndicator(df_futures_graph['high'], df_futures_graph['low'], n1=9, n2=26, n3=52, visual=True)
            futures_Ichimoku = ta.trend.IchimokuIndicator(df_futures_graph['high'], df_futures_graph['low'])

            df_futures_graph['SPAN_A'] = futures_Ichimoku.ichimoku_a()
            df_futures_graph['SPAN_B'] = futures_Ichimoku.ichimoku_b()

            # 일목균형표의 기준선을 FAMA 대용으로 사용가능한지 확인필요!!!
            df_futures_graph['OE_BASE'] = futures_Ichimoku.ichimoku_base_line()
            df_futures_graph['OE_CONV'] = futures_Ichimoku.ichimoku_conversion_line()

            # 데이타프레임의 모든 요소가 NaN인지 검사!!!
            '''
            if not df_futures_graph['OE_CONV'].isnull().values.all():
                print('OE_CONV =', df_futures_graph['OE_CONV'].tolist())
            else:
                pass
            '''
        else:
            pass       

        #print('fut_first_arrive_time = {0}, flag_first_arrive = {1}, market_service = {2}\r'.format(fut_first_arrive_time, flag_first_arrive, market_service))

        fut_time = dt.hour * 3600 + dt.minute * 60 + dt.second        
        
        if not flag_first_arrive:
            fut_first_arrive_time = fut_time
            flag_first_arrive = True
        else:
            pass

        if TELEGRAM_SERVICE and not flag_telegram_send_worker and not NightTime:
            
            self.telegram_send_worker.daemon = True
            self.telegram_send_worker.start()

            telegram_send_worker_on_time = fut_first_arrive_time 

            str = '[{0:02d}:{1:02d}:{2:02d}] telegram send worker({3})가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second, telegram_send_worker_on_time)
            self.textBrowser.append(str)
            print(str) 

            if TARGET_MONTH_SELECT == 1:

                str = '[{0:02d}:{1:02d}:{2:02d}] CM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                ToYourTelegram(str)

            elif TARGET_MONTH_SELECT == 2:

                str = '[{0:02d}:{1:02d}:{2:02d}] NM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                ToYourTelegram(str)

            elif TARGET_MONTH_SELECT == 3:

                str = '[{0:02d}:{1:02d}:{2:02d}] MAN 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                ToYourTelegram(str)
                
                self.telegram_listen_worker.daemon = True
                self.telegram_listen_worker.start()

                # 차차월물은 시작과 동시에 Polling 시작
                ToYourTelegram("MAN 텔레그램 Polling이 시작됩니다.")

                self.pushButton_remove.setStyleSheet("background-color: lawngreen")

                flag_telegram_listen_worker = True
            else:
                pass         

            flag_telegram_send_worker = True             
        else:
            pass

        # Telegram Send Worker 시작 후 TELEGRAM_START_TIME분에 Telegram Listen을 위한 Polling Thread 시작 !!!
        if not flag_telegram_listen_worker and fut_time > telegram_send_worker_on_time + 60 * TELEGRAM_START_TIME and not NightTime:

            if TELEGRAM_SERVICE:
                
                self.telegram_listen_worker.daemon = True
                self.telegram_listen_worker.start()

                if TARGET_MONTH_SELECT == 1:

                    if SELFID == 'soojin65':
                        str = '[{0:02d}:{1:02d}:{2:02d}] ***님 텔레그램 Polling이 시작됩니다.'.format(dt.hour, dt.minute, dt.second)
                        #ToMyTelegram(str)
                    else:
                        ToYourTelegram("CM 텔레그램 Polling이 시작됩니다.")

                elif TARGET_MONTH_SELECT == 2:

                    ToYourTelegram("NM 텔레그램 Polling이 시작됩니다.")
                else:
                    pass
                
                self.pushButton_remove.setStyleSheet("background-color: lawngreen")

                flag_telegram_listen_worker = True
            else:
                pass            
        else:
            pass

        if fut_time == fut_first_arrive_time + 2 or fut_time == fut_first_arrive_time + 3:
            
            # 선물 시가갭 컬러링(주간 장시작시 표시안되는 오류 대응)
            if NightTime:

                if 선물_시가 > 선물_종가:
                    self.tableWidget_fut.item(0, Futures_column.시가갭.value).setBackground(QBrush(콜기준가색))
                    self.tableWidget_fut.item(0, Futures_column.시가갭.value).setForeground(QBrush(검정색))
                elif 선물_시가 < 선물_종가:
                    self.tableWidget_fut.item(0, Futures_column.시가갭.value).setBackground(QBrush(풋기준가색))
                    self.tableWidget_fut.item(0, Futures_column.시가갭.value).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(0, Futures_column.시가갭.value).setBackground(QBrush(흰색))
            else:

                if 선물_시가 > 선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setBackground(QBrush(콜기준가색))
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setForeground(QBrush(검정색))
                elif 선물_시가 < 선물_종가:
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setBackground(QBrush(풋기준가색))
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, Futures_column.시가갭.value).setBackground(QBrush(흰색))   
        else:
            pass        
        
        # 시가 및 피봇 갱신
        if NightTime:
            fut_open = self.tableWidget_fut.item(0, Futures_column.시가.value).text()
        else:
            fut_open = self.tableWidget_fut.item(1, Futures_column.시가.value).text()

        if 시가 != fut_open:

            df_futures_graph.at[GuardTime + 1, 'open'] = 선물_시가

            선물_피봇 = self.calc_pivot(선물_전저, 선물_전고, 선물_종가, 선물_시가)

            시가갭 = 선물_시가 - 선물_종가

            item = QTableWidgetItem(시가)
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(흰색))        

            if 선물_시가 > 선물_종가:
                item.setForeground(QBrush(적색))
            elif 선물_시가 < 선물_종가:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))    

            if NightTime:

                self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                df_fut.loc[0, '시가'] = 선물_시가
                cme_realdata['시가'] = 선물_시가

                item = QTableWidgetItem("{0:.2f}".format(선물_피봇))
                item.setTextAlignment(Qt.AlignCenter)

                self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)

                df_fut.loc[0, '피봇'] = 선물_피봇
                cme_realdata['피봇'] = 선물_피봇

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if 선물_시가 > 선물_종가:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif 선물_시가 < 선물_종가:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))  

                self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)
                
                cme_realdata['시가갭'] = 시가갭
                df_fut.loc[0, '시가갭'] = 시가갭
            else:
                self.tableWidget_fut.setItem(1, Futures_column.시가.value, item)

                df_fut.loc[1, '시가'] = 선물_시가
                fut_realdata['시가'] = 선물_시가

                item = QTableWidgetItem("{0:.2f}".format(선물_피봇))
                item.setTextAlignment(Qt.AlignCenter)

                self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)

                df_fut.loc[1, '피봇'] = 선물_피봇
                fut_realdata['피봇'] = 선물_피봇             

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if 선물_시가 > 선물_종가:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif 선물_시가 < 선물_종가:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))  

                self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)
                
                fut_realdata['시가갭'] = 시가갭
                df_fut.loc[1, '시가갭'] = 시가갭                
        else:
            pass
            '''
            if 선물_피봇 == 0 and 선물_시가 > 0:

                선물_피봇 = self.calc_pivot(선물_전저, 선물_전고, 선물_종가, 선물_시가)

                시가갭 = 선물_시가 - 선물_종가

                item = QTableWidgetItem("{0:.2f}".format(선물_피봇))
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)
                    df_fut.loc[0, '피봇'] = 선물_피봇
                    cme_realdata['피봇'] = 선물_피봇
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)
                    df_fut.loc[1, '피봇'] = 선물_피봇
                    fut_realdata['피봇'] = 선물_피봇

                item = QTableWidgetItem("{0:.2f}".format(시가갭))
                item.setTextAlignment(Qt.AlignCenter)

                if 선물_시가 > 선물_종가:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif 선물_시가 < 선물_종가:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색)) 

                if NightTime:
                    self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)
                    df_fut.loc[0, '시가갭'] = 시가갭
                    cme_realdata['시가갭'] = 시가갭
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)
                    df_fut.loc[1, '시가갭'] = 시가갭
                    fut_realdata['시가갭'] = 시가갭
            else:
                pass
            ''' 
        
        # 현재가 갱신
        if NightTime:
            fut_price = self.tableWidget_fut.item(0, Futures_column.현재가.value).text().split('\n')[0]
        else:
            fut_price = self.tableWidget_fut.item(1, Futures_column.현재가.value).text().split('\n')[0]

        if 현재가 != fut_price:

            if NightTime:
                
                df_fut.at[0, '현재가'] = 선물_현재가
                cme_realdata['현재가'] = 선물_현재가

                if 선물_현재가 < float(fut_price):
                    item = QTableWidgetItem(현재가 + '\n' + '▼')
                    item.setBackground(QBrush(lightskyblue))
                elif 선물_현재가 > float(fut_price):
                    item = QTableWidgetItem(현재가 + '\n' + '▲')
                    item.setBackground(QBrush(pink))
                else:    
                    item = QTableWidgetItem(현재가)

                if 선물_시가 < 선물_현재가:
                    item.setForeground(QBrush(적색))
                elif 선물_시가 > 선물_현재가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.현재가.value, item)

                self.tableWidget_fut.resizeRowToContents(0)
                self.tableWidget_fut.resizeColumnToContents(Futures_column.현재가.value)
            else:
                df_fut.at[1, '현재가'] = 선물_현재가
                fut_realdata['현재가'] = 선물_현재가 

                if 선물_현재가 < float(fut_price):
                    item = QTableWidgetItem(현재가 + '\n' + '▼')
                    item.setBackground(QBrush(lightskyblue))
                elif 선물_현재가 > float(fut_price):
                    item = QTableWidgetItem(현재가 + '\n' + '▲')
                    item.setBackground(QBrush(pink))
                else:    
                    item = QTableWidgetItem(현재가)

                if 선물_시가 < 선물_현재가:
                    item.setForeground(QBrush(적색))
                elif 선물_시가 > 선물_현재가:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.현재가.value, item)

                self.tableWidget_fut.resizeRowToContents(1)
                self.tableWidget_fut.resizeColumnToContents(Futures_column.현재가.value)            
            
            if 선물_대비 > 0:

                if NightTime:
                    self.tableWidget_fut.item(0, 0).setBackground(QBrush(적색))
                    self.tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, 0).setBackground(QBrush(적색))
                    self.tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))

            elif 선물_대비 < 0:

                if NightTime:
                    self.tableWidget_fut.item(0, 0).setBackground(QBrush(청색))
                    self.tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, 0).setBackground(QBrush(청색))
                    self.tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))
            else:
                if NightTime:
                    self.tableWidget_fut.item(0, 0).setBackground(QBrush(검정색))
                    self.tableWidget_fut.item(0, 0).setForeground(QBrush(흰색))
                else:
                    self.tableWidget_fut.item(1, 0).setBackground(QBrush(검정색))
                    self.tableWidget_fut.item(1, 0).setForeground(QBrush(흰색))

            item = QTableWidgetItem("DOW\n({0:.2f}%)".format(DOW_등락율))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(2, Futures_column.대비.value, item)
            
            self.tableWidget_fut.resizeColumnToContents(Futures_column.대비.value)

            item = QTableWidgetItem("{0:.2f}\n({1:.2f}%)".format(선물_대비, 선물_등락율))
            item.setTextAlignment(Qt.AlignCenter)

            if 선물_등락율 > 0 and DOW_등락율 > 0 and 선물_등락율 > DOW_등락율:

                item.setBackground(QBrush(pink))

            elif 선물_등락율 < 0 and DOW_등락율 < 0 and 선물_등락율 < DOW_등락율:

                item.setBackground(QBrush(lightskyblue))
            else:
                pass

            if NightTime:
                self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)
            else:
                self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)                       

            선물_진폭비 = (선물_고가 - 선물_저가) / 선물_시가   
            
            선물_DOW_진폭비율 = 선물_진폭비 / DOW_진폭비 

            item = QTableWidgetItem("{0:.2f}".format(선물_DOW_진폭비율))
            item.setTextAlignment(Qt.AlignCenter)

            if NightTime:
                self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)
            else:
                self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)            
        else:
            pass

        # 저가 갱신
        if NightTime:
            fut_low = self.tableWidget_fut.item(0, Futures_column.저가.value).text()
        else:
            fut_low = self.tableWidget_fut.item(1, Futures_column.저가.value).text()

        if 저가 != fut_low:

            flag_fut_low = True

            item = QTableWidgetItem(저가)
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(회색))            

            if NightTime:

                self.tableWidget_fut.setItem(0, Futures_column.저가.value, item)
                df_fut.at[0, '저가'] = 선물_저가
                cme_realdata['저가'] = 선물_저가
            else:
                self.tableWidget_fut.setItem(1, Futures_column.저가.value, item)
                df_fut.at[1, '저가'] = 선물_저가
                fut_realdata['저가'] = 선물_저가

            if 선물_전저 >= 선물_저가:

                #str = repr(선물_전저) + ' ▼'
                str = '{0:.2f}'.format(선물_전저) + '\n▼'

                item = QTableWidgetItem(str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setForeground(QBrush(청색))  

                if NightTime:           
                    self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)
            else:
                pass

            self.fut_node_color_clear()                    
            self.fut_oloh_check()
            self.fut_node_coloring()

            str = '[{0:02d}:{1:02d}:{2:02d}] 선물 저가 {3} Update...\r'.format(adj_hour, adj_min, adj_sec, 선물_저가)
            self.textBrowser.append(str)
            
            진폭 = 선물_고가 - 선물_저가

            item = QTableWidgetItem("{0:.2f}".format(진폭))
            item.setTextAlignment(Qt.AlignCenter)

            if NightTime:
                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)
                df_fut.at[0, '진폭'] = 진폭
                cme_realdata['진폭'] = 진폭
            else:
                self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)
                df_fut.at[1, '진폭'] = 진폭
                fut_realdata['진폭'] = 진폭         
        else:
            pass

        # 고가 갱신
        if NightTime:
            fut_high = self.tableWidget_fut.item(0, Futures_column.고가.value).text()
        else:
            fut_high = self.tableWidget_fut.item(1, Futures_column.고가.value).text()

        if 고가 != fut_high:

            flag_fut_high = True

            item = QTableWidgetItem(고가)
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(회색))            

            if NightTime:
                
                self.tableWidget_fut.setItem(0, Futures_column.고가.value, item)
                df_fut.at[0, '고가'] = 선물_고가
                cme_realdata['고가'] = 선물_고가
            else:
                self.tableWidget_fut.setItem(1, Futures_column.고가.value, item)
                df_fut.at[1, '고가'] = 선물_고가
                fut_realdata['고가'] = 선물_고가

            if 선물_전고 <= 선물_고가:

                #str = repr(선물_전고) + ' ▲'
                str = '{0:.2f}'.format(선물_전고) + '\n▲'

                item = QTableWidgetItem(str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setForeground(QBrush(적색))  

                if NightTime:           
                    self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)
            else:
                pass

            self.fut_node_color_clear()                    
            self.fut_oloh_check()
            self.fut_node_coloring()

            str = '[{0:02d}:{1:02d}:{2:02d}] 선물 고가 {3} Update...\r'.format(adj_hour, adj_min, adj_sec, 선물_고가)
            self.textBrowser.append(str)
            
            진폭 = 선물_고가 - 선물_저가

            item = QTableWidgetItem("{0:.2f}".format(진폭))
            item.setTextAlignment(Qt.AlignCenter)

            if NightTime:
                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)
                df_fut.at[0, '진폭'] = 진폭
                cme_realdata['진폭'] = 진폭
            else:
                self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)
                df_fut.at[1, '진폭'] = 진폭  
                fut_realdata['진폭'] = 진폭         
        else:
            pass

        # 장중 거래량 갱신, 장중 거래량은 누적거래량이 아닌 수정거래량 임
        fut_volume_power = result['매수누적체결량'] - result['매도누적체결량']
        df_futures_graph.at[ovc_x_idx, 'volume'] = fut_volume_power

        temp = format(fut_volume_power, ',')

        item = QTableWidgetItem(temp)
        item.setTextAlignment(Qt.AlignCenter)

        if fut_volume_power > 0:

            item.setBackground(QBrush(적색))
            item.setForeground(QBrush(흰색))
        elif fut_volume_power < 0:

            item.setBackground(QBrush(청색))
            item.setForeground(QBrush(흰색))
        else:
            item.setBackground(QBrush(흰색))
            item.setForeground(QBrush(검정색))

        if NightTime:
            self.tableWidget_fut.setItem(0, Futures_column.거래량.value, item)
            df_fut.at[0, '거래량'] = fut_volume_power 
            cme_realdata['거래량'] = fut_volume_power
        else:
            self.tableWidget_fut.setItem(1, Futures_column.거래량.value, item)
            df_fut.at[1, '거래량'] = fut_volume_power 
            fut_realdata['거래량'] = fut_volume_power        
        
        # 미결 갱신
        if not NightTime:

            df_fut.at[1, '미결'] = result['미결제약정수량'] 
            fut_realdata['미결'] = result['미결제약정수량']

            temp = format(fut_realdata['미결'], ',')                     

            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.OI.value, item)            
        else:
            pass

        # 미결증감 갱신
        if not NightTime:

            df_fut.at[1, '미결증감'] = result['미결제약정증감']  
            fut_realdata['미결증감'] = result['미결제약정증감']

            temp = format(fut_realdata['미결증감'], ',')  

            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)

            if result['미결제약정증감'] < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_fut.setItem(1, Futures_column.OID.value, item)              
        else:
            pass        

        # 선물 Up/Down Indicator 표시
        global fut_bollinger_symbol, fut_psar_symbol, fut_oe_symbol, fut_mama_symbol

        if df_futures_graph.at[ovc_x_idx, 'BBMiddle'] == df_futures_graph.at[ovc_x_idx, 'BBMiddle']:

            if df_futures_graph.at[ovc_x_idx, 'BBMiddle'] >= df_futures_graph.at[ovc_x_idx, 'price']:
                fut_bollinger_symbol = '▼'
            else:
                fut_bollinger_symbol = '▲'
        else:
            pass               

        if df_futures_graph.at[ovc_x_idx, 'PSAR'] == df_futures_graph.at[ovc_x_idx, 'PSAR']:

            if df_futures_graph.at[ovc_x_idx, 'PSAR'] >= df_futures_graph.at[ovc_x_idx, 'price']:
                fut_psar_symbol = '▼'
            else:
                fut_psar_symbol = '▲'
        else:
            pass
        
        if df_futures_graph.at[ovc_x_idx, 'OE_CONV'] == df_futures_graph.at[ovc_x_idx, 'OE_CONV'] and df_futures_graph.at[ovc_x_idx, 'OE_BASE'] == df_futures_graph.at[ovc_x_idx, 'OE_BASE']:

            if df_futures_graph.at[ovc_x_idx, 'OE_CONV'] < df_futures_graph.at[ovc_x_idx, 'OE_BASE']:
                fut_oe_symbol = '▼'
            else:
                fut_oe_symbol = '▲'
        else:
            pass

        if df_futures_graph.at[ovc_x_idx, 'MAMA'] == df_futures_graph.at[ovc_x_idx, 'MAMA'] and df_futures_graph.at[ovc_x_idx, 'FAMA'] == df_futures_graph.at[ovc_x_idx, 'FAMA']:

            if df_futures_graph.at[ovc_x_idx, 'FAMA'] >= df_futures_graph.at[ovc_x_idx, 'BBLower']:

                if df_futures_graph.at[ovc_x_idx, 'MAMA'] < df_futures_graph.at[ovc_x_idx, 'FAMA']:                
                    fut_mama_symbol = '▼'
                else:
                    fut_mama_symbol = '▲'
            else:
                fut_mama_symbol = '-'
        else:
            pass

        indicator = fut_psar_symbol + ' ' + fut_bollinger_symbol + ' ' + fut_mama_symbol + ' ' + fut_oe_symbol
        
        if indicator != self.tableWidget_fut.horizontalHeaderItem(0).text():
            item = QTableWidgetItem(indicator)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setHorizontalHeaderItem(0, item)
        else:
            pass

    def check_call_oloh(self):

        global call_ol, call_oh 
        #global call_ol_count, call_oh_count

        index = call_행사가.index(call_result['단축코드'][5:8])
        
        콜시가 = float(call_result['시가'])
        콜현재가 = float(call_result['현재가'])
        콜저가 = float(call_result['저가'])
        콜고가 = float(call_result['고가'])

        if 콜시가 >= oloh_cutoff:

            if 콜시가 < 1.0:

                oloh_threshold = 1

            elif 1.0 <= 콜시가 < 2.0:

                oloh_threshold = 2

            elif 2.0 <= 콜시가 < 3.0:

                oloh_threshold = 3

            elif 3.0 <= 콜시가 < 4.0:

                oloh_threshold = 4
            else:
                oloh_threshold = 5   

            # call OL/OH count
            if self.is_within_n_tick(콜시가, 콜저가, oloh_threshold) and not self.is_within_n_tick(콜시가, 콜고가, oloh_threshold):

                oloh_str = '▲'

                item = QTableWidgetItem(oloh_str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))  

                self.tableWidget_call.item(index, Option_column.저가.value).setBackground(QBrush(적색))
                self.tableWidget_call.item(index, Option_column.저가.value).setForeground(QBrush(검정색))

                call_ol[index] = True

            elif self.is_within_n_tick(콜시가, 콜고가, oloh_threshold) and not self.is_within_n_tick(콜시가, 콜저가, oloh_threshold):

                oloh_str = '▼'

                item = QTableWidgetItem(oloh_str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))  

                self.tableWidget_call.item(index, Option_column.고가.value).setBackground(QBrush(적색))
                self.tableWidget_call.item(index, Option_column.고가.value).setForeground(QBrush(검정색)) 

                call_oh[index] = True
            else:
                oloh_str = ''

                if oloh_str != self.tableWidget_call.item(index, Option_column.OLOH.value).text():
                    item = QTableWidgetItem(oloh_str)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)
                else:
                    pass

                call_ol[index] = False
                call_oh[index] = False
        else:
            pass        

        call_ol_count = call_ol.count(True)
        call_oh_count = call_oh.count(True)

        new_oloh = repr(call_ol_count) + ':' + repr(call_oh_count) + '\n✓'

        if new_oloh != self.tableWidget_call.horizontalHeaderItem(2).text():
            item = QTableWidgetItem(new_oloh)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(2, item)
        else:
            pass

    # 콜 표시
    def call_display(self):

        global call_open, call_itm_count
        global df_call
        global df_call_price_graph, df_call_graph
        global atm_str, atm_index, call_atm_value
        global call_시가, call_시가_node_list, call_피봇, call_피봇_node_list, 콜시가리스트
        global call_저가, call_저가_node_list, call_고가, call_고가_node_list
        global opt_callreal_update_counter
        global df_call_volume, call_volume_power, df_call_total_graph
        global node_coloring
        global call_open_list
        global call_max_actval, call_open, call_ol, call_oh
        global 콜_인덱스, 콜_시가, 콜_현재가, 콜_저가, 콜_고가
        global flag_call_low_update, flag_call_high_update
        global call_gap_percent, call_db_percent, call_otm_db, call_otm_db_percent 
        global 콜대비_퍼센트_평균
        global 콜등락율       

        start_time = timeit.default_timer()

        dt = datetime.datetime.now()

        index = call_행사가.index(call_result['단축코드'][5:8])
        
        시가 = call_result['시가']
        현재가 = call_result['현재가']
        저가 = call_result['저가']
        고가 = call_result['고가']

        if not NightTime and index == atm_index:
            콜등락율 = call_result['등락율']
            df_call_total_graph.at[ovc_x_idx, 'drate'] = call_result['등락율']
        else:
            pass
        
        콜시가 = float(시가)
        콜현재가 = float(현재가)
        콜저가 = float(저가)
        콜고가 = float(고가)
        
        콜종가 = df_call.at[index, '종가']
        콜기준가 = df_call.at[index, '기준가']
        콜월저 = df_call.at[index, '월저']
        콜월고 = df_call.at[index, '월고']
        콜전저 = df_call.at[index, '전저']
        콜전고 = df_call.at[index, '전고']        

        if 저가 != 고가 and not call_open[index]:

            # 등가 check & coloring
            self.tableWidget_call.item(index, Option_column.행사가.value).setBackground(QBrush(라임))

            call_open[index] = True
            
            # 콜 시가 갱신
            if 콜시가 > opt_search_start_value:
                call_open_list.append(index)
                call_open_list = list(set(call_open_list))
            else:
                pass

            str = '[{0:02d}:{1:02d}:{2:02d}] Call Open List = {3}\r'.format \
                (adj_hour, adj_min, adj_sec, call_open_list)
            self.textBrowser.append(str)
            
            if not NightTime and index > atm_index:
                call_itm_count += 1
            else:
                pass
            
            # Call Open Count 표시
            call_open_count = call_open.count(True)

            if call_open[option_pairs_count - 1]:

                new_actval = repr(call_itm_count) + '/' + repr(call_open_count) + '\n*'
            else:
                new_actval = repr(call_itm_count) + '/' + repr(call_open_count)

            if new_actval != self.tableWidget_call.horizontalHeaderItem(1).text():
                item = QTableWidgetItem(new_actval)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(1, item)
            else:
                pass            
        else:
            pass      

        # 시가 갱신
        if 시가 != self.tableWidget_call.item(index, Option_column.시가.value).text():

            df_call.at[index, '시가'] = 콜시가
            #df_call_price_graph.iat[GuardTime + 1, index] = 콜시가
            df_call_graph[index].at[GuardTime + 1, 'open'] = 콜시가
            df_call_graph[index].at[GuardTime + 1, 'price'] = 콜시가
            
            item = QTableWidgetItem(시가)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜시가 > 콜종가:
                item.setForeground(QBrush(적색))
            elif 콜시가 < 콜종가:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))

            self.tableWidget_call.setItem(index, Option_column.시가.value, item)
            
            시가갭 = 콜시가 - 콜종가
            df_call.at[index, '시가갭'] = 시가갭

            call_gap_percent[index] = (콜시가 / 콜종가 - 1) * 100

            gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, call_gap_percent[index])
        
            item = QTableWidgetItem(gap_str)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜시가 > 콜종가:
                item.setBackground(QBrush(콜기준가색))
                item.setForeground(QBrush(검정색))
            elif 콜시가 < 콜종가:
                item.setBackground(QBrush(풋기준가색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_call.setItem(index, Option_column.시가갭.value, item)
            
            # 시가갭 갱신
            temp = call_gap_percent[:]
            call_gap_percent_local = [value for value in temp if value == value]
            call_gap_percent_local.sort()

            콜시가갭합 = round(df_call['시가갭'].sum(), 2)

            if call_gap_percent_local:

                콜시가갭합_단위평균 = round(콜시가갭합/len(call_gap_percent_local), 2)

                tmp = np.array(call_gap_percent_local)            
                콜시가갭합_퍼센트 = int(round(np.mean(tmp), 2))

                call_str = repr(콜시가갭합_단위평균) + '\n(' + repr(콜시가갭합_퍼센트) + '%' + ')'
                item = QTableWidgetItem(call_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)
            else:
                print('call_gap_percent_local is empty...')

            if 콜시가 in COREVAL:
                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
            else:
                pass
            
            call_시가 = df_call['시가'].values.tolist()
            call_시가_node_list = self.make_node_list(call_시가)

            피봇 = self.calc_pivot(콜전저, 콜전고, 콜종가, 콜시가)
            df_call.at[index, '피봇'] = 피봇

            if 피봇 >= 100:
                item = QTableWidgetItem("{0:0.1f}".format(피봇))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setItem(index, Option_column.피봇.value, item)   
            else:
                item = QTableWidgetItem("{0:.2f}".format(피봇))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setItem(index, Option_column.피봇.value, item)                

            call_피봇 = df_call['피봇'].values.tolist()
            call_피봇_node_list = self.make_node_list(call_피봇)

            str = '[{0:02d}:{1:02d}:{2:02d}] Call {3:.2f} Open Update !!!\r'.format \
                (adj_hour, adj_min, adj_sec, 콜시가)
            self.textBrowser.append(str)
            
            if index == option_pairs_count - 1:

                str = '[{0:02d}:{1:02d}:{2:02d}] 콜 최대 시작가 {3} 오픈되었습니다.\r'.format \
                    (adj_hour, adj_min, adj_sec, 콜시가)
                self.textBrowser.append(str)
            else:
                pass
        else:
            pass

        # 현재가 갱신
        콜_현재가 = self.tableWidget_call.item(index, Option_column.현재가.value).text().split('\n')[0]

        if 현재가 != 콜_현재가:

            df_call.at[index, '현재가'] = 콜현재가
            #df_call_price_graph.iat[ovc_x_idx, index] = 콜현재가
            df_call_graph[index].at[ovc_x_idx, 'price'] = 콜현재가

            if 콜현재가 < float(콜_현재가):
                item = QTableWidgetItem(현재가 + '\n' + '▼')
                item.setBackground(QBrush(lightskyblue))
            elif 콜현재가 > float(콜_현재가):
                item = QTableWidgetItem(현재가 + '\n' + '▲')
                item.setBackground(QBrush(pink))
            else:    
                item = QTableWidgetItem(현재가)
                item.setBackground(QBrush(흰색))
            
            if 콜시가 < 콜현재가:
                item.setForeground(QBrush(적색))
            elif 콜시가 > 콜현재가:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))
            
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setItem(index, Option_column.현재가.value, item)

            if ResizeRowsToContents:
                self.tableWidget_call.resizeRowToContents(index)
            else:
                pass
                        
            콜대비 = 콜현재가 - 콜시가
            df_call.at[index, '대비'] = 콜대비
            
            if 콜시가 > 0.1:
                call_db_percent[index] = (콜현재가 / 콜시가 - 1) * 100

                if not NightTime:

                    if index == atm_index:
                        gap_str = "{0:.2f}\n({1:.2f}%)".format(콜대비, 콜등락율)
                    else:
                        gap_str = "{0:.2f}\n({1:.0f}%)".format(콜대비, call_db_percent[index])
                else:
                    gap_str = "{0:.2f}\n({1:.0f}%)".format(콜대비, call_db_percent[index])                    

                item = QTableWidgetItem(gap_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setItem(index, Option_column.대비.value, item)
            else:
                pass

            # 콜 외가(등가포함) 대비 저장
            if not NightTime and index <= atm_index and 콜시가 > 0.1 and 콜저가 < 콜고가:
                call_otm_db[index] = 콜대비
                call_otm_db_percent[index] = (콜현재가 / 콜시가 - 1) * 100
            else:
                pass

            # 미결갱신
            if not NightTime and 콜시가 > 0 and 콜저가 < 콜고가:

                콜시가갭 = df_call.at[index, '시가갭']

                if 콜현재가 <= 콜시가갭:

                    수정미결 = call_result['미결제약정수량'] * 콜현재가
                    수정미결증감 = call_result['미결제약정증감'] * 콜현재가
                else:
                    수정미결 = call_result['미결제약정수량'] * (콜현재가 - 콜시가갭)
                    수정미결증감 = call_result['미결제약정증감'] * (콜현재가 - 콜시가갭)

                df_call.at[index, '수정미결'] = int(수정미결)
                df_call.at[index, '수정미결증감'] = int(수정미결증감)

                if not flag_checkBox_HS:
                    self.call_oi_update()
                else:
                    pass
            else:
                pass            
        else:
            pass
        
        # 저가 갱신
        if 저가 != 고가 and 저가 != self.tableWidget_call.item(index, Option_column.저가.value).text().split('\n')[0]:

            item = QTableWidgetItem('▼')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.저가.value, item)
          
            df_call.at[index, '저가'] = 콜저가
            
            call_저가 = df_call['저가'].values.tolist()
            call_저가_node_list = self.make_node_list(call_저가)

            if 1.20 < 콜저가 < 10.0:
                self.opt_high_low_list_update()
                빈도수 = moving_list.count(콜저가)
                item = QTableWidgetItem(저가 + '\n(' + repr(빈도수) + ')')
            else:
                item = QTableWidgetItem(저가)
            
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(lightskyblue))
            item.setForeground(QBrush(검정색))
            self.tableWidget_call.setItem(index, Option_column.저가.value, item)
            
            if 콜전저 >= 콜저가:

                str = '{0:.2f}'.format(콜전저) + '\n' + '▼'

                if str != self.tableWidget_call.item(index, Option_column.전저.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(청색))             
                    self.tableWidget_call.setItem(index, Option_column.전저.value, item)
                else:
                    pass
            else:
                pass

            if 콜월저 >= 콜저가:

                str = '{0:.2f}'.format(콜월저) + '\n' + '▼'

                if str != self.tableWidget_call.item(index, Option_column.월저.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(청색))             
                    self.tableWidget_call.setItem(index, Option_column.월저.value, item)
                else:
                    pass
            else:
                pass

            if not NightTime and 콜기준가 >= 콜저가:

                if atm_index - 3 <= index <= atm_index + 3:
                    pass
                else:
                    str = '{0:.2f}'.format(콜기준가) + '\n' + '▼'

                    if str != self.tableWidget_call.item(index, Option_column.기준가.value).text():
                        item = QTableWidgetItem(str)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setForeground(QBrush(청색))             
                        self.tableWidget_call.setItem(index, Option_column.기준가.value, item)
                    else:
                        pass
            else:
                pass

            진폭 = 콜고가 - 콜저가
            df_call.at[index, '진폭'] = 진폭
                                
            item = QTableWidgetItem("{0:.2f}".format(진폭))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setItem(index, Option_column.진폭.value, item)
            
            self.check_call_oloh()
            
            # 콜은 인덱스 기준으로 갱신
            if 콜저가 < 콜고가 and call_scroll_begin_position <= index <= call_scroll_end_position:
                flag_call_low_update = True
            else:
                pass

            process_time = (timeit.default_timer() - start_time) * 1000

            str = '[{0:02d}:{1:02d}:{2:02d}] Call 저가 {3} Update : {4:.2f} ms\r'.format \
                (adj_hour, adj_min, adj_sec, 콜저가, process_time)
            self.textBrowser.append(str)
            print(str) 
        else:
            pass             

        # 고가 갱신
        if 저가 != 고가 and 고가 != self.tableWidget_call.item(index, Option_column.고가.value).text().split('\n')[0]:

            item = QTableWidgetItem('▲')
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.고가.value, item)
         
            df_call.at[index, '고가'] = 콜고가
            
            call_고가 = df_call['고가'].values.tolist()
            call_고가_node_list = self.make_node_list(call_고가)

            if 1.20 < 콜고가 < 10.0:
                self.opt_high_low_list_update()
                빈도수 = moving_list.count(콜고가)
                item = QTableWidgetItem(고가 + '\n(' + repr(빈도수) + ')')
            else:
                item = QTableWidgetItem(고가)            
            
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(pink))
            item.setForeground(QBrush(검정색))
            self.tableWidget_call.setItem(index, Option_column.고가.value, item)
            
            if 콜전고 <= 콜고가:

                str = '{0:.2f}'.format(콜전고) + '\n' + '▲'

                if str != self.tableWidget_call.item(index, Option_column.전고.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(적색))             
                    self.tableWidget_call.setItem(index, Option_column.전고.value, item)
                else:
                    pass
            else:
                pass

            if 콜월고 <= 콜고가:

                str = '{0:.2f}'.format(콜월고) + '\n' + '▲'

                if str != self.tableWidget_call.item(index, Option_column.월고.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(적색))             
                    self.tableWidget_call.setItem(index, Option_column.월고.value, item)
                else:
                    pass
            else:
                pass

            진폭 = 콜고가 - 콜저가
            df_call.at[index, '진폭'] = 진폭
                                
            item = QTableWidgetItem("{0:.2f}".format(진폭))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setItem(index, Option_column.진폭.value, item)
            
            self.check_call_oloh()

            # 콜은 인덱스 기준으로 갱신
            if 콜저가 < 콜고가 and call_scroll_begin_position <= index <= call_scroll_end_position:
                flag_call_high_update = True
            else:
                pass

            process_time = (timeit.default_timer() - start_time) * 1000

            str = '[{0:02d}:{1:02d}:{2:02d}] Call 고가 {3} Update : {4:.2f} ms\r'.format \
                (adj_hour, adj_min, adj_sec, 콜고가, process_time)
            self.textBrowser.append(str)
            print(str) 
        else:
            pass        
    
    def call_db_update(self):

        global call_진폭, 콜대비합, 콜대비합_단위평균, 콜대비_퍼센트_평균
        
        call_진폭 = df_call['진폭'].values.tolist()
        진폭최대값 = max(call_진폭)

        max_str = '{0:.2f}'.format(진폭최대값)

        if max_str != self.tableWidget_call.horizontalHeaderItem(Option_column.진폭.value).text():
            item = QTableWidgetItem(max_str)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.진폭.value, item)
        else:
            pass

        #temp = call_db_percent[:]
        temp = call_otm_db_percent[:]

        call_db_percent_local = [value for value in temp if value == value]
        call_db_percent_local.sort()

        if call_db_percent_local:

            #콜대비합 = round(df_call['대비'].sum(), 2)
            콜대비합 = round(sum(call_otm_db), 2)

            콜대비합_단위평균 = round(콜대비합/len(call_db_percent_local), 2) 

            tmp = np.array(call_db_percent_local)            
            콜대비_퍼센트_평균 = round(np.mean(tmp), 1)
            call_str = repr(콜대비합_단위평균) + '\n(' + repr(콜대비_퍼센트_평균) + '%' + ')'

            if call_str != self.tableWidget_call.horizontalHeaderItem(Option_column.대비.value).text():
                item = QTableWidgetItem(call_str)
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.대비.value, item)

                if ResizeRowsToContents:
                    self.tableWidget_call.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_call.resizeColumnsToContents()
            else:
                pass                               
        else:
            print('call_db_percent_local is empty...')

            콜대비합 = 0
    
    def call_oi_update(self):
	
        index = call_행사가.index(call_result['단축코드'][5:8])

        수정미결 = format(df_call.at[index, '수정미결'], ',')

        if 수정미결 != self.tableWidget_call.item(index, Option_column.OI.value).text():

            item = QTableWidgetItem(수정미결)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setItem(index, Option_column.OI.value, item)
        else:
            pass          

        수정미결증감 = format(df_call.at[index, '수정미결증감'], ',')

        if 수정미결증감 != self.tableWidget_call.item(index, Option_column.OID.value).text():

            item = QTableWidgetItem(수정미결증감)
            item.setTextAlignment(Qt.AlignCenter)

            if call_result['미결제약정증감'] < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_call.setItem(index, Option_column.OID.value, item)
        else:
            pass
        
        수정미결합 = '{0}k'.format(format(int(df_call['수정미결'].sum()/1000), ','))

        if 수정미결합 != self.tableWidget_call.horizontalHeaderItem(Option_column.OI.value).text():
            item = QTableWidgetItem(수정미결합)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)
        else:
            pass    
    
    def call_volume_power_display(self):

        global df_call, df_call_volume, call_volume_power, call_volume, df_call_total_graph   
        global 콜_순매수_체결량

        index = call_행사가.index(call_result['단축코드'][5:8])

        콜시가 = df_call.at[index, '시가']
        콜저가 = df_call.at[index, '저가']
        콜고가 = df_call.at[index, '고가']
        콜현재가 = df_call.at[index, '현재가']
        콜시가갭 = df_call.at[index, '시가갭']

        if 콜시가 > 0 and 콜저가 < 콜고가:

            if 콜현재가 <= 콜시가갭:

                수정거래량 = (call_result['매수누적체결량'] - call_result['매도누적체결량']) * 콜현재가
                매도누적체결량 = call_result['매도누적체결량'] * 콜현재가
                매수누적체결량 = call_result['매수누적체결량'] * 콜현재가

                if not NightTime:

                    매도누적체결건수 = call_result['매도누적체결건수'] * 콜현재가
                    매수누적체결건수 = call_result['매수누적체결건수'] * 콜현재가
                else:
                    pass
            else:
                수정거래량 = (call_result['매수누적체결량'] - call_result['매도누적체결량']) * (콜현재가 - 콜시가갭)
                매도누적체결량 = call_result['매도누적체결량'] * (콜현재가 - 콜시가갭)
                매수누적체결량 = call_result['매수누적체결량'] * (콜현재가 - 콜시가갭)

                if not NightTime:

                    매도누적체결건수 = call_result['매도누적체결건수'] * (콜현재가 - 콜시가갭)
                    매수누적체결건수 = call_result['매수누적체결건수'] * (콜현재가 - 콜시가갭)
                else:
                    pass

            콜수정거래량 = int(수정거래량)
            df_call.at[index, '수정거래량'] = 콜수정거래량
            df_call_volume.at[index, '매도누적체결량'] = int(매도누적체결량)
            df_call_volume.at[index, '매수누적체결량'] = int(매수누적체결량)
            df_call.at[index, '거래량'] = call_result['누적거래량']

            if not NightTime:

                df_call_volume.at[index, '매도누적체결건수'] = int(매도누적체결건수)
                df_call_volume.at[index, '매수누적체결건수'] = int(매수누적체결건수)
            else:
                pass
            
            수정거래량 = format(콜수정거래량, ',')

            if 수정거래량 != self.tableWidget_call.item(index, Option_column.VP.value).text():

                item = QTableWidgetItem(수정거래량)
                item.setTextAlignment(Qt.AlignCenter)

                if 콜수정거래량 > 0:
                    item.setBackground(QBrush(pink))
                else:
                    item.setBackground(QBrush(lightskyblue))

                self.tableWidget_call.setItem(index, Option_column.VP.value, item)
            else:
                pass
        else:
            pass        

        call_volume_power = df_call_volume['매수누적체결량'].sum() - df_call_volume['매도누적체결량'].sum()
        df_call_total_graph.at[ovc_x_idx, 'volume'] = call_volume_power

        순매수누적체결량 = format(call_volume_power, ',')

        if 순매수누적체결량 != self.tableWidget_call.horizontalHeaderItem(Option_column.VP.value).text():
            item = QTableWidgetItem(순매수누적체결량)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_call.setHorizontalHeaderItem(Option_column.VP.value, item)
        else:
            pass
        
        call_volume = df_call_volume.sum()

        매수잔량 = format(call_volume['매수누적체결량'], ',')
        매도잔량 = format(call_volume['매도누적체결량'], ',')
        
        if not NightTime:

            매수건수 = format(call_volume['매수누적체결건수'], ',')

            if 매수건수 != self.tableWidget_quote.item(0, 0).text():
                item = QTableWidgetItem(매수건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 0, item)
            else:
                pass

            매도건수 = format(call_volume['매도누적체결건수'], ',')

            if 매도건수 != self.tableWidget_quote.item(0, 1).text():
                item = QTableWidgetItem(매도건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 1, item)
            else:
                pass
        else:
            pass
        
        콜_순매수_체결량 = call_volume['매수누적체결량'] - call_volume['매도누적체결량']

        if 매수잔량 != self.tableWidget_quote.item(0, 2).text():
            item = QTableWidgetItem(매수잔량)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))         

            self.tableWidget_quote.setItem(0, 2, item)
        else:
            pass

        temp = format(콜_순매수_체결량, ',')
        item_str = "{0}\n({1})".format(매도잔량, temp)

        if item_str != self.tableWidget_quote.item(0, 3).text():
            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))            

            self.tableWidget_quote.setItem(0, 3, item)
        else:
            pass
    
    def call_open_check(self):

        global df_call, call_itm_count
        global call_open, call_ol, call_oh
        global call_gap_percent, call_db_percent      
        global 콜시가갭합, 콜시가갭합_퍼센트
        global call_ol_count, call_oh_count
        global 콜대비합, 콜대비합_단위평균
        global call_open_count        
        global 콜시가갭합, 콜시가갭합_퍼센트, 콜시가갭합_단위평균, 콜대비_퍼센트_평균
        global call_otm_db, call_otm_db_percent
        global nm_call_oloh_str 
        
        dt = datetime.datetime.now()

        if not market_service or call_scroll or refresh_coloring:
            
            call_ol = [False] * option_pairs_count
            call_oh = [False] * option_pairs_count
            call_gap_percent = [NaN] * option_pairs_count
            call_db_percent = [NaN] * option_pairs_count
            call_itm_count = 0
            call_otm_db = [0] * option_pairs_count
            call_otm_db_percent = [NaN] * option_pairs_count
            call_open = [False] * option_pairs_count
            call_ol_count = 0
            call_oh_count = 0

            if call_open_list:

                loop_list = call_open_list
            else:
                loop_list = opt_total_list

            for index in loop_list:

                종가 = df_call.at[index, '종가']
                시가 = df_call.at[index, '시가']
                저가 = df_call.at[index, '저가']
                고가 = df_call.at[index, '고가']
                현재가 = df_call.at[index, '현재가']

                if 시가 > opt_search_start_value:

                    if index != atm_index:
                        self.tableWidget_call.item(index, Option_column.행사가.value).setBackground(QBrush(라임))
                    else:
                        self.tableWidget_call.item(index, Option_column.행사가.value).setBackground(QBrush(노란색))
                    
                    if 종가 > 0 and 저가 < 고가:

                        시가갭 = 시가 - 종가
                        df_call.at[index, '시가갭'] = 시가갭

                        call_gap_percent[index] = (시가 / 종가 - 1) * 100
                        gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, call_gap_percent[index])

                        item = QTableWidgetItem(gap_str)
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setBackground(QBrush(콜기준가색))
                            item.setForeground(QBrush(검정색))
                        elif 시가 < 종가:
                            item.setBackground(QBrush(풋기준가색))
                            item.setForeground(QBrush(흰색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(index, Option_column.시가갭.value, item)
                    else:
                        pass

                    if 저가 < 고가:

                        if index > atm_index:
                            call_itm_count += 1
                        else:
                            pass

                        call_open[index] = True                   

                        if 시가 >= oloh_cutoff:

                            if 시가 < 1.0:

                                oloh_threshold = 1

                            elif 1.0 <= 시가 < 2.0:

                                oloh_threshold = 2

                            elif 2.0 <= 시가 < 3.0:

                                oloh_threshold = 3

                            elif 3.0 <= 시가 < 4.0:

                                oloh_threshold = 4
                            else:
                                oloh_threshold = 5   

                            # call OL/OH count
                            if call_node_state['OLOH'] and self.is_within_n_tick(시가, 저가, oloh_threshold) and not self.is_within_n_tick(시가, 고가, oloh_threshold):

                                oloh_str = '▲'

                                item = QTableWidgetItem(oloh_str)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(적색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(흰색))  

                                self.tableWidget_call.item(index, Option_column.저가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.저가.value).setForeground(QBrush(흰색))

                                call_ol[index] = True

                            elif call_node_state['OLOH'] and self.is_within_n_tick(시가, 고가, oloh_threshold) and not self.is_within_n_tick(시가, 저가, oloh_threshold):

                                oloh_str = '▼'

                                item = QTableWidgetItem(oloh_str)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(청색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(흰색))  

                                self.tableWidget_call.item(index, Option_column.고가.value).setBackground(QBrush(적색))
                                self.tableWidget_call.item(index, Option_column.고가.value).setForeground(QBrush(흰색)) 

                                call_oh[index] = True
                            else:
                                oloh_str = ''

                                if oloh_str != self.tableWidget_call.item(index, Option_column.OLOH.value).text():
                                    item = QTableWidgetItem(oloh_str)
                                    item.setBackground(QBrush(흰색))
                                    item.setForeground(QBrush(검정색))
                                    self.tableWidget_call.setItem(index, Option_column.OLOH.value, item)
                                else:
                                    pass

                                call_ol[index] = False
                                call_oh[index] = False
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0 and 저가 < 고가:

                        대비 = 현재가 - 시가

                        df_call.at[index, '대비'] = 대비
                        call_db_percent[index] = (현재가 / 시가 - 1) * 100

                        gap_str = "{0:.2f}\n({1:.0f}%)".format(대비, call_db_percent[index])

                        if gap_str != self.tableWidget_call.item(index, Option_column.대비.value).text():

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(index, Option_column.대비.value, item)
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

                # 콜 외가(등가포함) 대비 저장
                if index <= atm_index and 시가 > 0.1 and 저가 < 고가:

                    call_otm_db[index] = 현재가 - 시가
                    call_otm_db_percent[index] = (현재가 / 시가 - 1) * 100
                else:
                    pass

            # Call Open Count 및 OLOH 표시
            call_open_count = call_open.count(True)

            if call_open[option_pairs_count - 1]:

                new_actval = repr(call_itm_count) + '/' + repr(call_open_count) + '\n*'
            else:
                new_actval = repr(call_itm_count) + '/' + repr(call_open_count)

            if new_actval != self.tableWidget_call.horizontalHeaderItem(1).text():
                item = QTableWidgetItem(new_actval)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(1, item)
            else:
                pass

            if call_node_state['OLOH']:
                
                call_ol_count = call_ol.count(True)
                call_oh_count = call_oh.count(True)

                new_oloh = repr(call_ol_count) + ':' + repr(call_oh_count) + '\n✓'                

                if new_oloh != self.tableWidget_call.horizontalHeaderItem(2).text():

                    item = QTableWidgetItem(new_oloh)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(2, item)

                    if TARGET_MONTH_SELECT == 2:

                        if call_ol_count > 0 or call_oh_count > 0:
                            nm_call_oloh_str = 'NM Call ▲:▼ = ' + repr(call_ol_count) + ':' + repr(call_oh_count)
                        else:
                            nm_call_oloh_str = ''                        
                    else:
                        pass
                else:
                    pass
            else:
                item = QTableWidgetItem('▲:▼')
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(2, item)

            # 시가갭 갱신
            temp = call_gap_percent[:]
            call_gap_percent_local = [value for value in temp if value == value]
            call_gap_percent_local.sort()

            콜시가갭합 = round(df_call['시가갭'].sum(), 2)

            if call_gap_percent_local:

                콜시가갭합_단위평균 = round(콜시가갭합/len(call_gap_percent_local), 2)

                tmp = np.array(call_gap_percent_local)            
                콜시가갭합_퍼센트 = int(round(np.mean(tmp), 2))
                call_str = repr(콜시가갭합_단위평균) + '\n(' + repr(콜시가갭합_퍼센트) + '%' + ')'

                if call_str != self.tableWidget_call.horizontalHeaderItem(Option_column.시가갭.value).text():
                    item = QTableWidgetItem(call_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)
                else:
                    pass
            else:
                print('call_gap_percent_local is empty...')

            # 대비 갱신
            #temp = call_db_percent[:]
            temp = call_otm_db_percent[:]

            call_db_percent_local = [value for value in temp if value == value]
            call_db_percent_local.sort()

            if call_db_percent_local:

                #콜대비합 = round(df_call['대비'].sum(), 2)
                콜대비합 = round(sum(call_otm_db), 2)

                콜대비합_단위평균 = round(콜대비합/len(call_db_percent_local), 2)

                tmp = np.array(call_db_percent_local)            
                콜대비_퍼센트_평균 = round(np.mean(tmp), 1)
                call_str = repr(콜대비합_단위평균) + '\n(' + repr(콜대비_퍼센트_평균) + '%' + ')'

                #print('콜대비_퍼센트_평균 =', 콜대비_퍼센트_평균)

                if call_str != self.tableWidget_call.horizontalHeaderItem(Option_column.대비.value).text():
                    item = QTableWidgetItem(call_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.대비.value, item)
                else:
                    pass            
            else:
                print('call_db_percent_local is empty...')

                콜대비합 = 0        

            #self.tableWidget_call.resizeColumnsToContents()
        else:
            pass

    def check_put_oloh(self):

        global put_ol, put_oh
        #global put_ol_count, put_oh_count

        index = put_행사가.index(put_result['단축코드'][5:8])
        
        풋시가 = float(put_result['시가'])
        풋현재가 = float(put_result['현재가'])
        풋저가 = float(put_result['저가'])
        풋고가 = float(put_result['고가'])

        if 풋시가 >= oloh_cutoff:

            if 풋시가 < 1.0:

                oloh_threshold = 1

            elif 1.0 <= 풋시가 < 2.0:

                oloh_threshold = 2

            elif 2.0 <= 풋시가 < 3.0:

                oloh_threshold = 3

            elif 3.0 <= 풋시가 < 4.0:

                oloh_threshold = 4
            else:
                oloh_threshold = 5   

            # call OL/OH count
            if self.is_within_n_tick(풋시가, 풋저가, oloh_threshold) and not self.is_within_n_tick(풋시가, 풋고가, oloh_threshold):

                oloh_str = '▲'

                item = QTableWidgetItem(oloh_str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))  

                self.tableWidget_put.item(index, Option_column.저가.value).setBackground(QBrush(청색))
                self.tableWidget_put.item(index, Option_column.저가.value).setForeground(QBrush(흰색))

                put_ol[index] = True

            elif self.is_within_n_tick(풋시가, 풋고가, oloh_threshold) and not self.is_within_n_tick(풋시가, 풋저가, oloh_threshold):

                oloh_str = '▼'

                item = QTableWidgetItem(oloh_str)
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))  

                self.tableWidget_put.item(index, Option_column.고가.value).setBackground(QBrush(청색))
                self.tableWidget_put.item(index, Option_column.고가.value).setForeground(QBrush(흰색)) 

                put_oh[index] = True
            else:
                oloh_str = ''

                if oloh_str != self.tableWidget_put.item(index, Option_column.OLOH.value).text():
                    item = QTableWidgetItem(oloh_str)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)
                else:
                    pass

                put_ol[index] = False
                put_oh[index] = False
        else:
            pass        

        put_ol_count = put_ol.count(True)
        put_oh_count = put_oh.count(True)

        new_oloh = repr(put_ol_count) + ':' + repr(put_oh_count) + '\n✓'

        if new_oloh != self.tableWidget_put.horizontalHeaderItem(2).text():
            item = QTableWidgetItem(new_oloh)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(2, item)
        else:
            pass
        
    # 풋 표시
    def put_display(self):

        global put_open, put_itm_count
        global df_put
        global df_put_price_graph, df_put_graph
        global atm_str, atm_index, put_atm_value
        global put_시가, put_시가_node_list, put_피봇, put_피봇_node_list, 풋시가리스트
        global put_저가, put_저가_node_list, put_고가, put_고가_node_list
        global opt_putreal_update_counter
        global df_put_volume, put_volume_power, df_put_total_graph
        global put_open_list
        global put_max_actval, put_open, put_ol, put_oh
        global 풋_인덱스, 풋_시가, 풋_현재가, 풋_저가, 풋_고가
        global flag_put_low_update, flag_put_high_update
        global put_gap_percent, put_db_percent, put_otm_db, put_otm_db_percent
        global 풋대비_퍼센트_평균
        global 풋등락율

        start_time = timeit.default_timer()

        dt = datetime.datetime.now()

        index = put_행사가.index(put_result['단축코드'][5:8])
        
        시가 = put_result['시가']
        현재가 = put_result['현재가']
        저가 = put_result['저가']
        고가 = put_result['고가']
        
        if not NightTime and index == atm_index:
            풋등락율 = put_result['등락율']
            df_put_total_graph.at[ovc_x_idx, 'drate'] = put_result['등락율']
        else:
            pass
        
        풋시가 = float(시가)
        풋현재가 = float(현재가)
        풋저가 = float(저가)
        풋고가 = float(고가)
        
        풋종가 = df_put.at[index, '종가']
        풋기준가 = df_put.at[index, '기준가']
        풋월저 = df_put.at[index, '월저']
        풋월고 = df_put.at[index, '월고']
        풋전저 = df_put.at[index, '전저']
        풋전고 = df_put.at[index, '전고']
                
        if 저가 != 고가 and not put_open[index]:

            # 등가 check & coloring
            self.tableWidget_put.item(index, Option_column.행사가.value).setBackground(QBrush(라임))

            put_open[index] = True
            
            # 풋 시가 갱신
            if 풋시가 > opt_search_start_value:
                put_open_list.append(index)
                put_open_list = list(set(put_open_list))
            else:
                pass

            str = '[{0:02d}:{1:02d}:{2:02d}] Put Open List = {3}\r'.format \
                (adj_hour, adj_min, adj_sec, put_open_list)
            self.textBrowser.append(str)
            
            if not NightTime and index < atm_index:
                put_itm_count += 1
            else:
                pass

            # Put Open Count 표시
            put_open_count = put_open.count(True)

            if put_open[0]:

                new_actval = repr(put_itm_count) + '/' + repr(put_open_count) + '\n*'
            else:
                new_actval = repr(put_itm_count) + '/' + repr(put_open_count)

            if new_actval != self.tableWidget_put.horizontalHeaderItem(1).text():
                item = QTableWidgetItem(new_actval)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(1, item)
            else:
                pass
        else:
            pass       
        
        # 시가 갱신
        if 시가 != self.tableWidget_put.item(index, Option_column.시가.value).text():
            
            df_put.at[index, '시가'] = 풋시가
            #df_put_price_graph.iat[GuardTime + 1, index] = 풋시가
            df_put_graph[index].at[GuardTime + 1, 'open'] = 풋시가
            df_put_graph[index].at[GuardTime + 1, 'price'] = 풋시가
            
            item = QTableWidgetItem(시가)
            item.setTextAlignment(Qt.AlignCenter)

            if 풋시가 > 풋종가:
                item.setForeground(QBrush(적색))
            elif 풋시가 < 풋종가:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))

            self.tableWidget_put.setItem(index, Option_column.시가.value, item)

            시가갭 = 풋시가 - 풋종가
            df_put.at[index, '시가갭'] = 시가갭

            put_gap_percent[index] = (풋시가 / 풋종가 - 1) * 100

            gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, put_gap_percent[index])

            item = QTableWidgetItem(gap_str)
            item.setTextAlignment(Qt.AlignCenter)

            if 풋시가 > 풋종가:
                item.setBackground(QBrush(콜기준가색))
                item.setForeground(QBrush(검정색))
            elif 풋시가 < 풋종가:
                item.setBackground(QBrush(풋기준가색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_put.setItem(index, Option_column.시가갭.value, item)
            
            # 시가갭 갱신
            temp = put_gap_percent[:]
            put_gap_percent_local = [value for value in temp if value == value]
            put_gap_percent_local.sort()

            풋시가갭합 = round(df_put['시가갭'].sum(), 2)

            if put_gap_percent_local:

                풋시가갭합_단위평균 = round(풋시가갭합/len(put_gap_percent_local), 2)

                tmp = np.array(put_gap_percent_local)            
                풋시가갭합_퍼센트 = int(round(np.mean(tmp), 2))

                put_str = repr(풋시가갭합_단위평균) + '\n(' + repr(풋시가갭합_퍼센트) + '%' + ')'
                item = QTableWidgetItem(put_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)
            else:
                print('put_gap_percent_local is empty...')

            if 풋시가 in COREVAL:
                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
            else:
                pass
            
            put_시가 = df_put['시가'].values.tolist()
            put_시가_node_list = self.make_node_list(put_시가)
                        
            피봇 = self.calc_pivot(풋전저, 풋전고, 풋종가, 풋시가)
            df_put.at[index, '피봇'] = 피봇

            if 피봇 >= 100:
                item = QTableWidgetItem("{0:0.1f}".format(피봇))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setItem(index, Option_column.피봇.value, item)
            else:
                item = QTableWidgetItem("{0:.2f}".format(피봇))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setItem(index, Option_column.피봇.value, item)

            put_피봇 = df_put['피봇'].values.tolist()
            put_피봇_node_list = self.make_node_list(put_피봇)

            str = '[{0:02d}:{1:02d}:{2:02d}] Put {3:.2f} Open Update !!!\r'.format \
                (adj_hour, adj_min, adj_sec, 풋시가)
            self.textBrowser.append(str)
            
            if index == 0:

                str = '[{0:02d}:{1:02d}:{2:02d}] 풋 최대 시작가 {3} 오픈되었습니다.\r'.format \
                    (adj_hour, adj_min, adj_sec, 시가)
                self.textBrowser.append(str)
            else:
                pass  
        else:
            pass
        
        # 현재가 갱신
        풋_현재가 = self.tableWidget_put.item(index, Option_column.현재가.value).text().split('\n')[0]

        if 현재가 != 풋_현재가:

            df_put.at[index, '현재가'] = 풋현재가
            #df_put_price_graph.iat[ovc_x_idx, index] = 풋현재가
            df_put_graph[index].at[ovc_x_idx, 'price'] = 풋현재가

            if 풋현재가 < float(풋_현재가):
                item = QTableWidgetItem(현재가 + '\n' + '▼')
                item.setBackground(QBrush(lightskyblue))
            elif 풋현재가 > float(풋_현재가):
                item = QTableWidgetItem(현재가 + '\n' + '▲')
                item.setBackground(QBrush(pink))
            else:    
                item = QTableWidgetItem(현재가)
                item.setBackground(QBrush(흰색))

            if 풋시가 < 풋현재가:
                item.setForeground(QBrush(적색))
            elif 풋시가 > 풋현재가:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))
            
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setItem(index, Option_column.현재가.value, item)

            if ResizeRowsToContents:
                self.tableWidget_put.resizeRowToContents(index)
            else:
                pass
                        
            풋대비 = 풋현재가 - 풋시가
            df_put.at[index, '대비'] = 풋대비

            if 풋시가 > 0.1:
                put_db_percent[index] = (풋현재가 / 풋시가 - 1) * 100

                if not NightTime:

                    if index == atm_index:
                        gap_str = "{0:.2f}\n({1:.2f}%)".format(풋대비, 풋등락율)
                    else:
                        gap_str = "{0:.2f}\n({1:.0f}%)".format(풋대비, put_db_percent[index])
                else:
                    gap_str = "{0:.2f}\n({1:.0f}%)".format(풋대비, put_db_percent[index])  

                item = QTableWidgetItem(gap_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setItem(index, Option_column.대비.value, item)
            else:
                pass
            
            # 풋 외가(등가포함) 대비 저장
            if not NightTime and index >= atm_index and 풋시가 > 0.1 and 풋저가 < 풋고가:
                put_otm_db[index] = 풋대비
                put_otm_db_percent[index] = (풋현재가 / 풋시가 - 1) * 100
            else:
                pass

            # 미결갱신
            if not NightTime and 풋시가 > 0 and 풋저가 < 풋고가:

                풋시가갭 = df_put.at[index, '시가갭']

                if 풋현재가 <= 풋시가갭:

                    수정미결 = put_result['미결제약정수량'] * 풋현재가
                    수정미결증감 = put_result['미결제약정증감'] * 풋현재가
                else:
                    수정미결 = put_result['미결제약정수량'] * (풋현재가 - 풋시가갭)
                    수정미결증감 = put_result['미결제약정증감'] * (풋현재가 - 풋시가갭)

                df_put.at[index, '수정미결'] = int(수정미결)
                df_put.at[index, '수정미결증감'] = int(수정미결증감)

                if not flag_checkBox_HS:
                    self.put_oi_update()
                else:
                    pass
            else:
                pass            
        else:
            pass
        
        # 저가 갱신
        if 저가 != 고가 and 저가 != self.tableWidget_put.item(index, Option_column.저가.value).text().split('\n')[0]:

            item = QTableWidgetItem('▼')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.저가.value, item)
         
            df_put.at[index, '저가'] = 풋저가
            
            put_저가 = df_put['저가'].values.tolist()
            put_저가_node_list = self.make_node_list(put_저가)

            if 1.20 < 풋저가 < 10.0:
                self.opt_high_low_list_update()
                빈도수 = moving_list.count(풋저가)
                item = QTableWidgetItem(저가 + '\n(' + repr(빈도수) + ')')
            else:
                item = QTableWidgetItem(저가)

            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(lightskyblue))
            item.setForeground(QBrush(검정색))
            self.tableWidget_put.setItem(index, Option_column.저가.value, item)
            
            if 풋전저 >= 풋저가:

                str = '{0:.2f}'.format(풋전저) + '\n' + '▼'

                if str != self.tableWidget_put.item(index, Option_column.전저.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(청색))             
                    self.tableWidget_put.setItem(index, Option_column.전저.value, item)
                else:
                    pass
            else:
                pass

            if 풋월저 >= 풋저가:

                str = '{0:.2f}'.format(풋월저) + '\n' + '▼'

                if str != self.tableWidget_put.item(index, Option_column.월저.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(청색))             
                    self.tableWidget_put.setItem(index, Option_column.월저.value, item)
                else:
                    pass
            else:
                pass

            if not NightTime and 풋기준가 >= 풋저가:

                if atm_index - 3 <= index <= atm_index + 3:
                    pass
                else:
                    str = '{0:.2f}'.format(풋기준가) + '\n' + '▼'

                    if str != self.tableWidget_put.item(index, Option_column.기준가.value).text():
                        item = QTableWidgetItem(str)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setForeground(QBrush(청색))             
                        self.tableWidget_put.setItem(index, Option_column.기준가.value, item)
                    else:
                        pass                    
            else:
                pass

            진폭 = 풋고가 - 풋저가
            df_put.at[index, '진폭'] = 진폭
                                
            item = QTableWidgetItem("{0:.2f}".format(진폭))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setItem(index, Option_column.진폭.value, item)
            
            self.check_put_oloh()

            # 풋은 가격기준으로 갱신
            if 풋저가 < 풋고가 and update_start < 풋저가 < update_end:            
                flag_put_low_update = True
            else:
                pass

            process_time = (timeit.default_timer() - start_time) * 1000

            str = '[{0:02d}:{1:02d}:{2:02d}] Put 저가 {3} Update : {4:.2f} ms\r'.format \
                (adj_hour, adj_min, adj_sec, 풋저가, process_time)
            self.textBrowser.append(str)
            print(str) 
        else:
            pass

        # 고가 갱신
        if 저가 != 고가 and 고가 != self.tableWidget_put.item(index, Option_column.고가.value).text().split('\n')[0]:

            item = QTableWidgetItem('▲')
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.고가.value, item)
                    
            df_put.at[index, '고가'] = 풋고가
            
            put_고가 = df_put['고가'].values.tolist()
            put_고가_node_list = self.make_node_list(put_고가)

            if 1.20 < 풋고가 < 10.0:
                self.opt_high_low_list_update()
                빈도수 = moving_list.count(풋고가)
                item = QTableWidgetItem(고가 + '\n(' + repr(빈도수) + ')')
            else:
                item = QTableWidgetItem(고가)

            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(pink))
            item.setForeground(QBrush(검정색))
            self.tableWidget_put.setItem(index, Option_column.고가.value, item)
            
            if 풋전고 <= 풋고가:

                str = '{0:.2f}'.format(풋전고) + '\n' + '▲'

                if str != self.tableWidget_put.item(index, Option_column.전고.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(적색))             
                    self.tableWidget_put.setItem(index, Option_column.전고.value, item)
                else:
                    pass
            else:
                pass

            if 풋월고 <= 풋고가:

                str = '{0:.2f}'.format(풋월고) + '\n' + '▲'

                if str != self.tableWidget_put.item(index, Option_column.월고.value).text():
                    item = QTableWidgetItem(str)
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setForeground(QBrush(적색))             
                    self.tableWidget_put.setItem(index, Option_column.월고.value, item)
                else:
                    pass
            else:
                pass

            진폭 = 풋고가 - 풋저가
            df_put.at[index, '진폭'] = 진폭
                                
            item = QTableWidgetItem("{0:.2f}".format(진폭))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setItem(index, Option_column.진폭.value, item)
            
            self.check_put_oloh()

            # 풋은 가격기준으로 갱신
            if 풋저가 < 풋고가 and update_start < 풋고가 < update_end:            
                flag_put_high_update = True
            else:
                pass

            process_time = (timeit.default_timer() - start_time) * 1000

            str = '[{0:02d}:{1:02d}:{2:02d}] Put 고가 {3} Update : {4:.2f} ms\r'.format \
                (adj_hour, adj_min, adj_sec, 풋고가, process_time)
            self.textBrowser.append(str)
            print(str) 
        else:
            pass        
    
    def put_db_update(self):

        global put_진폭, 풋대비합, 풋대비합_단위평균, 풋대비_퍼센트_평균 
        
        put_진폭 = df_put['진폭'].values.tolist()
        진폭최대값 = max(put_진폭)

        max_str = '{0:.2f}'.format(진폭최대값)

        if max_str != self.tableWidget_put.horizontalHeaderItem(Option_column.진폭.value).text():
            item = QTableWidgetItem(max_str)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.진폭.value, item)
        else:
            pass

        #temp = put_db_percent[:]
        temp = put_otm_db_percent[:]

        put_db_percent_local = [value for value in temp if value == value]
        put_db_percent_local.sort()

        if put_db_percent_local:

            #풋대비합 = round(df_put['대비'].sum(), 2)
            풋대비합 = round(sum(put_otm_db), 2)

            풋대비합_단위평균 = round(풋대비합/len(put_db_percent_local), 2)

            tmp = np.array(put_db_percent_local)            
            풋대비_퍼센트_평균 = round(np.mean(tmp), 1)
            put_str = repr(풋대비합_단위평균) + '\n(' + repr(풋대비_퍼센트_평균) + '%' + ')'

            if put_str != self.tableWidget_put.horizontalHeaderItem(Option_column.대비.value).text():
                item = QTableWidgetItem(put_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.대비.value, item)

                if ResizeRowsToContents:
                    self.tableWidget_put.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_put.resizeColumnsToContents()
            else:
                pass            
        else:
            print('put_db_percent_local is empty...')

            풋대비합 = 0
    
    def put_oi_update(self):
		
        index = put_행사가.index(put_result['단축코드'][5:8])

        수정미결 = format(df_put.at[index, '수정미결'], ',')

        if 수정미결 != self.tableWidget_put.item(index, Option_column.OI.value).text():

            item = QTableWidgetItem(수정미결)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setItem(index, Option_column.OI.value, item)
        else:
            pass            

        미결증감 = format(df_put.at[index, '수정미결증감'], ',')

        if 미결증감 != self.tableWidget_put.item(index, Option_column.OID.value).text():

            item = QTableWidgetItem(미결증감)
            item.setTextAlignment(Qt.AlignCenter)

            if put_result['미결제약정증감'] < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_put.setItem(index, Option_column.OID.value, item)
        else:
            pass

        수정미결합 = '{0}k'.format(format(int(df_put['수정미결'].sum()/1000), ','))

        if 수정미결합 != self.tableWidget_put.horizontalHeaderItem(Option_column.OI.value).text():
            item = QTableWidgetItem(수정미결합)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)
        else:
            pass
        
    def put_volume_power_display(self):

        global df_put, df_put_volume, put_volume_power, put_volume, df_put_total_graph
        global 풋_순매수_체결량, option_volume_power

        index = put_행사가.index(put_result['단축코드'][5:8])

        풋시가 = df_put.at[index, '시가']
        풋저가 = df_put.at[index, '저가']
        풋고가 = df_put.at[index, '고가']
        풋현재가 = df_put.at[index, '현재가']
        풋시가갭 = df_put.at[index, '시가갭']

        if 풋시가 > 0 and 풋저가 < 풋고가:

            if 풋현재가 <= 풋시가갭:

                수정거래량 = (put_result['매수누적체결량'] - put_result['매도누적체결량']) * 풋현재가
                매도누적체결량 = put_result['매도누적체결량'] * 풋현재가
                매수누적체결량 = put_result['매수누적체결량'] * 풋현재가

                if not NightTime:

                    매도누적체결건수 = put_result['매도누적체결건수'] * 풋현재가
                    매수누적체결건수 = put_result['매수누적체결건수'] * 풋현재가
                else:
                    pass
            else:
                수정거래량 = (put_result['매수누적체결량'] - put_result['매도누적체결량']) * (풋현재가 - 풋시가갭)
                매도누적체결량 = put_result['매도누적체결량'] * (풋현재가 - 풋시가갭)
                매수누적체결량 = put_result['매수누적체결량'] * (풋현재가 - 풋시가갭)

                if not NightTime:

                    매도누적체결건수 = put_result['매도누적체결건수'] * (풋현재가 - 풋시가갭)
                    매수누적체결건수 = put_result['매수누적체결건수'] * (풋현재가 - 풋시가갭)
                else:
                    pass

            풋수정거래량 = int(수정거래량)
            df_put.at[index, '수정거래량'] = 풋수정거래량
            df_put_volume.at[index, '매도누적체결량'] = int(매도누적체결량)
            df_put_volume.at[index, '매수누적체결량'] = int(매수누적체결량)
            df_put.at[index, '거래량'] = put_result['누적거래량']

            if not NightTime:
                
                df_put_volume.at[index, '매도누적체결건수'] = int(매도누적체결건수)
                df_put_volume.at[index, '매수누적체결건수'] = int(매수누적체결건수)
            else:
                pass
            
            수정거래량 = format(풋수정거래량, ',')

            if 수정거래량 != self.tableWidget_put.item(index, Option_column.VP.value).text():

                item = QTableWidgetItem(수정거래량)
                item.setTextAlignment(Qt.AlignCenter)

                if 풋수정거래량 > 0:
                    item.setBackground(QBrush(pink))
                else:
                    item.setBackground(QBrush(lightskyblue))

                self.tableWidget_put.setItem(index, Option_column.VP.value, item)
            else:
                pass
        else:
            pass        

        put_volume_power = df_put_volume['매수누적체결량'].sum() - df_put_volume['매도누적체결량'].sum()
        df_put_total_graph.at[ovc_x_idx, 'volume'] = put_volume_power
        
        option_volume_power = call_volume_power - put_volume_power

        순매수누적체결량 = format(put_volume_power, ',')

        if 순매수누적체결량 != self.tableWidget_put.horizontalHeaderItem(Option_column.VP.value).text():
            item = QTableWidgetItem(순매수누적체결량)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_put.setHorizontalHeaderItem(Option_column.VP.value, item)
        else:
            pass        

        put_volume = df_put_volume.sum()

        매수잔량 = format(put_volume['매수누적체결량'], ',')
        매도잔량 = format(put_volume['매도누적체결량'], ',')

        if not NightTime:

            매수건수 = format(put_volume['매수누적체결건수'], ',')

            if 매수건수 != self.tableWidget_quote.item(0, 4).text():
                item = QTableWidgetItem(매수건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 4, item)
            else:
                pass

            매도건수 = format(put_volume['매도누적체결건수'], ',')

            if 매도건수 != self.tableWidget_quote.item(0, 5).text():
                item = QTableWidgetItem(매도건수)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, 5, item)
            else:
                pass
        else:
            pass
        
        풋_순매수_체결량 = put_volume['매수누적체결량'] - put_volume['매도누적체결량']

        if 매수잔량 != self.tableWidget_quote.item(0, 6).text():
            item = QTableWidgetItem(매수잔량)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
                
            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))   

            self.tableWidget_quote.setItem(0, 6, item)
        else:
            pass

        temp = format(풋_순매수_체결량, ',')
        item_str = "{0}\n({1})".format(매도잔량, temp)

        if item_str != self.tableWidget_quote.item(0, 7).text():
            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)

            if 콜_순매수_체결량 > 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))

            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 > 0:

                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
                
            elif 콜_순매수_체결량 < 0 and 풋_순매수_체결량 < 0:

                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))   

            self.tableWidget_quote.setItem(0, 7, item)
        else:
            pass
    
    def put_open_check(self):

        global df_put, put_itm_count
        global put_open, put_ol, put_oh, nm_put_ol, nm_put_oh
        global put_gap_percent, put_db_percent     
        global 풋시가갭합, 풋시가갭합_퍼센트
        global put_ol_count, put_oh_count
        global 풋대비합, 풋대비합_단위평균 
        global put_open_count
        global 풋시가갭합, 풋시가갭합_퍼센트, 풋시가갭합_단위평균, 풋대비_퍼센트_평균
        global put_otm_db, put_otm_db_percent
        global nm_put_oloh_str
        
        dt = datetime.datetime.now()

        if not market_service or put_scroll or refresh_coloring:
            
            put_ol = [False] * option_pairs_count
            put_oh = [False] * option_pairs_count            
            put_gap_percent = [NaN] * option_pairs_count
            put_db_percent = [NaN] * option_pairs_count
            put_itm_count = 0
            put_otm_db = [0] * option_pairs_count
            put_otm_db_percent = [NaN] * option_pairs_count
            put_open = [False] * option_pairs_count
            put_ol_count = 0
            put_oh_count = 0

            nm_put_ol = [False] * option_pairs_count
            nm_put_oh = [False] * option_pairs_count
            
            if put_open_list:

                loop_list = put_open_list
            else:
                loop_list = opt_total_list
            
            for index in loop_list:

                종가 = df_put.at[index, '종가']
                시가 = df_put.at[index, '시가']
                저가 = df_put.at[index, '저가']
                고가 = df_put.at[index, '고가']
                현재가 = df_put.at[index, '현재가']

                if 시가 > opt_search_start_value:

                    if index != atm_index:
                        self.tableWidget_put.item(index, Option_column.행사가.value).setBackground(QBrush(라임))
                    else:
                        self.tableWidget_put.item(index, Option_column.행사가.value).setBackground(QBrush(노란색))

                    if 종가 > 0 and 저가 < 고가:

                        시가갭 = 시가 - 종가

                        df_put.at[index, '시가갭'] = 시가갭
                        put_gap_percent[index] = (시가 / 종가 - 1) * 100

                        gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, put_gap_percent[index])

                        item = QTableWidgetItem(gap_str)
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setBackground(QBrush(콜기준가색))
                            item.setForeground(QBrush(검정색))
                        elif 시가 < 종가:
                            item.setBackground(QBrush(풋기준가색))
                            item.setForeground(QBrush(흰색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(index, Option_column.시가갭.value, item)
                    else:
                        pass

                    if 저가 < 고가:

                        if index < atm_index:
                            put_itm_count += 1
                        else:
                            pass

                        put_open[index] = True                    

                        if 시가 >= oloh_cutoff:

                            if 시가 < 1.0:

                                oloh_threshold = 1

                            elif 1.0 <= 시가 < 2.0:

                                oloh_threshold = 2

                            elif 2.0 <= 시가 < 3.0:

                                oloh_threshold = 3

                            elif 3.0 <= 시가 < 4.0:

                                oloh_threshold = 4
                            else:
                                oloh_threshold = 5   

                            # put OL/OH count
                            if put_node_state['OLOH'] and self.is_within_n_tick(시가, 저가, oloh_threshold) and not self.is_within_n_tick(시가, 고가, oloh_threshold):

                                oloh_str = '▲'

                                item = QTableWidgetItem(oloh_str)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(적색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))

                                self.tableWidget_put.item(index, Option_column.저가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.저가.value).setForeground(QBrush(흰색)) 

                                put_ol[index] = True

                                if TARGET_MONTH_SELECT == 2 and 시가 < 0.5:
                                    nm_put_ol[index] = True
                                else:
                                    pass

                            elif put_node_state['OLOH'] and self.is_within_n_tick(시가, 고가, oloh_threshold) and not self.is_within_n_tick(시가, 저가, oloh_threshold):

                                oloh_str = '▼'

                                item = QTableWidgetItem(oloh_str)
                                item.setTextAlignment(Qt.AlignCenter)
                                item.setBackground(QBrush(청색))
                                item.setForeground(QBrush(흰색))
                                self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)

                                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(흰색))

                                self.tableWidget_put.item(index, Option_column.고가.value).setBackground(QBrush(청색))
                                self.tableWidget_put.item(index, Option_column.고가.value).setForeground(QBrush(흰색))

                                put_oh[index] = True

                                if TARGET_MONTH_SELECT == 2 and 시가 < 0.5:
                                    nm_put_oh[index] = True
                                else:
                                    pass
                            else:
                                oloh_str = ''

                                if oloh_str != self.tableWidget_put.item(index, Option_column.OLOH.value).text():
                                    item = QTableWidgetItem(oloh_str)
                                    item.setBackground(QBrush(흰색))
                                    item.setForeground(QBrush(검정색))
                                    self.tableWidget_put.setItem(index, Option_column.OLOH.value, item)                                
                                else:
                                    pass

                                put_ol[index] = False
                                put_oh[index] = False

                                if TARGET_MONTH_SELECT == 2 and 시가 < 0.5:
                                    nm_put_ol[index] = False
                                    nm_put_oh[index] = False
                                else:
                                    pass
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0 and 저가 < 고가:

                        대비 = 현재가 - 시가

                        df_put.at[index, '대비'] = 대비                 
                        put_db_percent[index] = (현재가 / 시가 - 1) * 100

                        gap_str = "{0:.2f}\n({1:.0f}%)".format(대비, put_db_percent[index])

                        if gap_str != self.tableWidget_put.item(index, Option_column.대비.value).text():

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(index, Option_column.대비.value, item)
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

                # 풋 외가(등가포함) 대비 저장
                if index >= atm_index and 시가 > 0.1 and 저가 < 고가:

                    put_otm_db[index] = 현재가 - 시가
                    put_otm_db_percent[index] = (현재가 / 시가 - 1) * 100
                else:
                    pass

            # Put Open Count 및 OLOH 표시
            put_open_count = put_open.count(True)

            if put_open[0]:

                new_actval = repr(put_itm_count) + '/' + repr(put_open_count) + '\n*'
            else:
                new_actval = repr(put_itm_count) + '/' + repr(put_open_count)

            if new_actval != self.tableWidget_put.horizontalHeaderItem(1).text():
                item = QTableWidgetItem(new_actval)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(1, item)
            else:
                pass

            if put_node_state['OLOH']:
                
                put_ol_count = put_ol.count(True)
                put_oh_count = put_oh.count(True)

                new_oloh = repr(put_ol_count) + ':' + repr(put_oh_count) + '\n✓'                

                if new_oloh != self.tableWidget_put.horizontalHeaderItem(2).text():

                    item = QTableWidgetItem(new_oloh)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(2, item)

                    if TARGET_MONTH_SELECT == 2:

                        nm_put_ol_count = nm_put_ol.count(True)
                        nm_put_oh_count = nm_put_oh.count(True)

                        if nm_put_ol_count > 0 or nm_put_oh_count > 0:
                            nm_put_oloh_str = 'Put ▲:▼ = ' + repr(nm_put_ol_count) + ':' + repr(nm_put_oh_count)
                        else:
                            nm_put_oloh_str = ''
                    else:
                        pass
                else:
                    pass
            else:
                item = QTableWidgetItem('▲:▼')
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(2, item)

            # 시가갭 갱신
            temp = put_gap_percent[:]
            put_gap_percent_local = [value for value in temp if value == value]
            put_gap_percent_local.sort()

            풋시가갭합 = round(df_put['시가갭'].sum(), 2)

            if put_gap_percent_local:

                풋시가갭합_단위평균 = round(풋시가갭합/len(put_gap_percent_local), 2)

                tmp = np.array(put_gap_percent_local)            
                풋시가갭합_퍼센트 = int(round(np.mean(tmp), 2))
                put_str = repr(풋시가갭합_단위평균) + '\n(' + repr(풋시가갭합_퍼센트) + '%' + ')'

                if put_str != self.tableWidget_put.horizontalHeaderItem(Option_column.시가갭.value).text():
                    item = QTableWidgetItem(put_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)
                else:
                    pass
            else:
                print('put_gap_percent_local is empty...')

            # 대비 갱신
            #temp = put_db_percent[:]
            temp = put_otm_db_percent[:]

            put_db_percent_local = [value for value in temp if value == value]
            put_db_percent_local.sort()

            if put_db_percent_local:

                #풋대비합 = round(df_put['대비'].sum(), 2)
                풋대비합 = round(sum(put_otm_db), 2)

                풋대비합_단위평균 = round(풋대비합/len(put_db_percent_local), 2)

                tmp = np.array(put_db_percent_local)            
                풋대비_퍼센트_평균 = round(np.mean(tmp), 1)
                put_str = repr(풋대비합_단위평균) + '\n(' + repr(풋대비_퍼센트_평균) + '%' + ')'

                #print('풋대비_퍼센트_평균 =', 풋대비_퍼센트_평균)

                if put_str != self.tableWidget_put.horizontalHeaderItem(Option_column.대비.value).text():
                    item = QTableWidgetItem(put_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.대비.value, item)
                else:
                    pass            
            else:
                print('put_db_percent_local is empty...')

                풋대비합 = 0
        else:
            pass

    # 호가표시
    def option_quote_display(self):
        
        global call_quote, put_quote
        global 콜매수잔량, 콜매도잔량, 풋매수잔량, 풋매도잔량, 콜건수비, 콜잔량비, 풋건수비, 풋잔량비
        global df_call_total_graph, df_put_total_graph

        call_quote = df_call_hoga.sum()
        put_quote = df_put_hoga.sum()

        if call_quote['매도건수'] > 0:
            call_count_ratio = round((call_quote['매수건수'] / call_quote['매도건수']), 2)
        else:
            call_count_ratio = 0

        콜건수비 = call_count_ratio

        if call_quote['매도잔량'] > 0:
            call_remainder_ratio = round((call_quote['매수잔량'] / call_quote['매도잔량']), 2)
        else:
            call_remainder_ratio = 0

        df_call_total_graph.at[ovc_x_idx, 'ms_hoga'] = call_quote['매수잔량']
        df_call_total_graph.at[ovc_x_idx, 'md_hoga'] = call_quote['매도잔량']

        콜잔량비 = call_remainder_ratio

        if put_quote['매도건수'] > 0:
            put_count_ratio = round((put_quote['매수건수'] / put_quote['매도건수']), 2)
        else:
            put_count_ratio = 0

        풋건수비 = put_count_ratio

        if put_quote['매도잔량'] > 0:
            put_remainder_ratio = round((put_quote['매수잔량'] / put_quote['매도잔량']), 2)
        else:
            put_remainder_ratio = 0

        df_put_total_graph.at[ovc_x_idx, 'ms_hoga'] = put_quote['매수잔량']
        df_put_total_graph.at[ovc_x_idx, 'md_hoga'] = put_quote['매도잔량']

        풋잔량비 = put_remainder_ratio

        if NightTime:
            df_call_total_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = 콜잔량비
            df_put_total_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = 풋잔량비
        else:
            if 콜잔량비 > 5.0:
                df_call_total_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = 5.0
            else:
                df_call_total_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = 콜잔량비

            if 풋잔량비 > 5.0:
                df_put_total_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = 5.0
            else:
                df_put_total_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = 풋잔량비

        #temp = call_quote['매수건수'] + call_quote['매도건수']
        #건수합 = format(temp, ',')

        item_str = "{0}\n({1})\n({2})".format(repr(call_count_ratio), format(call_quote['매수건수'], ','), format(call_quote['매도건수'], ','))

        if item_str != self.tableWidget_quote.item(0, 8).text():

            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 8, item)
        else:
            pass
        
        콜매수잔량 = call_quote['매수잔량']
        콜매도잔량 = call_quote['매도잔량']

        #temp = 콜매수잔량 + 콜매도잔량
        #잔량합 = format(temp, ',')

        item_str = "{0}\n({1})\n({2})".format(repr(call_remainder_ratio), format(call_quote['매수잔량'], ','), format(call_quote['매도잔량'], ','))

        if item_str != self.tableWidget_quote.item(0, 9).text():

            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 9, item)
        else:
            pass

        #temp = put_quote['매수건수'] + put_quote['매도건수']
        #건수합 = format(temp, ',')

        item_str = "{0}\n({1})\n({2})".format(repr(put_count_ratio), format(put_quote['매수건수'], ','), format(put_quote['매도건수'], ','))

        if item_str != self.tableWidget_quote.item(0, 10).text():

            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 10, item)
        else:
            pass
        
        풋매수잔량 = put_quote['매수잔량']
        풋매도잔량 = put_quote['매도잔량']

        #temp = 풋매수잔량 + 풋매도잔량
        #잔량합 = format(temp, ',')
        
        item_str = "{0}\n({1})\n({2})".format(repr(put_remainder_ratio), format(put_quote['매수잔량'], ','), format(put_quote['매도잔량'], ','))

        if item_str != self.tableWidget_quote.item(0, 11).text():

            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_quote.setItem(0, 11, item)
        else:
            pass

        temp = (call_quote['매수건수'] + call_quote['매도건수']) - (put_quote['매수건수'] + put_quote['매도건수'])
        건수차 = format(temp, ',')

        temp = (call_quote['매수잔량'] + call_quote['매도잔량']) - (put_quote['매수잔량'] + put_quote['매도잔량'])
        잔량차 = format(temp, ',')

        item_str = "{0:.2f}({1})\n{2:.2f}({3})".format(call_count_ratio - put_count_ratio, 건수차,
                                                         call_remainder_ratio - put_remainder_ratio, 잔량차)

        if item_str != self.tableWidget_quote.item(0, 12).text():

            item = QTableWidgetItem(item_str)
            item.setTextAlignment(Qt.AlignCenter)

            if call_count_ratio > put_count_ratio and call_remainder_ratio > put_remainder_ratio:
                item.setBackground(QBrush(적색))
                item.setForeground(QBrush(흰색))
            elif call_count_ratio < put_count_ratio and call_remainder_ratio < put_remainder_ratio:
                item.setBackground(QBrush(청색))
                item.setForeground(QBrush(흰색))
            else:
                item.setBackground(QBrush(흰색))
                item.setForeground(QBrush(검정색))

            self.tableWidget_quote.setItem(0, 12, item)                  
        else:
            pass        

    def oi_sum_display(self):
        
        global 콜_수정미결합, 풋_수정미결합
        global oi_delta, old_oi_delta, 수정미결_직전대비
        global df_call_total_graph, df_put_total_graph

        콜_수정미결합 = df_call['수정미결'].sum()
        풋_수정미결합 = df_put['수정미결'].sum()

        oi_str = '{0}:{1}'.format(format(int(콜_수정미결합), ','), format(int(풋_수정미결합), ','))

        item = QTableWidgetItem(oi_str)
        self.tableWidget_quote.setHorizontalHeaderItem(Quote_column.미결종합.value - 1, item)
        
        old_oi_delta = oi_delta
        oi_delta = 콜_수정미결합 - 풋_수정미결합
        
        수정미결합 = 콜_수정미결합 + 풋_수정미결합
        
        #수정미결_직전대비.extend([oi_delta - old_oi_delta])
        #temp = list(수정미결_직전대비)

        if 수정미결합 > 0:

            콜_수정미결퍼센트 = (콜_수정미결합 / 수정미결합) * 100
            풋_수정미결퍼센트 = 100 - 콜_수정미결퍼센트
        else:
            콜_수정미결퍼센트 = 0
            풋_수정미결퍼센트 = 0

        df_call_total_graph.at[ovc_x_idx, 'open_interest'] = 콜_수정미결퍼센트
        df_put_total_graph.at[ovc_x_idx, 'open_interest'] = 풋_수정미결퍼센트

        item_str = '{0:.2f}({1:.2f})% \n {2:.2f}({3:.2f})% '.format(콜_수정미결퍼센트, call_oi_init_percent, 풋_수정미결퍼센트, put_oi_init_percent)

        item = QTableWidgetItem(item_str)
        item.setTextAlignment(Qt.AlignCenter)

        if 콜_수정미결퍼센트 > call_oi_init_percent:

            item.setBackground(QBrush(적색))
            item.setForeground(QBrush(흰색))

        elif 풋_수정미결퍼센트 > put_oi_init_percent:

            item.setBackground(QBrush(청색))
            item.setForeground(QBrush(흰색))    
        else:
            pass

        self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)

        
    def AddCode(self):

        global pre_start
        global t2301_month_info
        global 진성맥점

        dt = datetime.datetime.now()
        current_str = dt.strftime('%H:%M:%S')

        # 옵션 등가 등락율 scale factor setting        
        item = QTableWidgetItem("{0}".format(drate_scale_factor))
        item.setTextAlignment(Qt.AlignCenter)
        self.tableWidget_fut.setItem(2, Futures_column.진폭.value, item)       

        # 코스피지수 조회
        XQ = t1514(parent=self)
        XQ.Query(업종코드=KOSPI,구분1='',구분2='1',CTS일자='',조회건수='0001',비중구분='', 연속조회=False)

        #time.sleep(1.1)
        QTest.qWait(1100)

        # 코스닥지수 조회
        XQ = t1514(parent=self)
        XQ.Query(업종코드=KOSDAQ,구분1='',구분2='1',CTS일자='',조회건수='0001',비중구분='', 연속조회=False)

        if service_terminate:

            if TARGET_MONTH_SELECT == 1:
                self.capture_screenshot()
            else:
                pass 
        else:
            if not refresh_flag:
                
                self.pushButton_add.setStyleSheet("background-color: lawngreen")
                self.pushButton_add.setText('Starting...')

                # 지수선물 마스터조회 API용
                XQ = t8432(parent=self)
                XQ.Query(구분='F')

                str = '[{0:02d}:{1:02d}:{2:02d}] t8432 지수선물 마스터 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(str)
                
                # 지수옵션 마스터조회 API용
                XQ = t8433(parent=self)
                XQ.Query()

                str = '[{0:02d}:{1:02d}:{2:02d}] t8433 지수옵션 마스터 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(str)

                QTest.qWait(500)                
            else:
                str = '[{0:02d}:{1:02d}:{2:02d}] OLD 진성맥점 = {3}\r'.format(dt.hour, dt.minute, dt.second, 진성맥점)
                self.textBrowser.append(str)
                print(str)

                if bms_node_list:

                    listsum = []

                    for i in range(len(bms_node_list)):

                        var1 = self.get_list_item(bms_node_list, i)
                        var2 = self.get_list_item(bms_node_frequency_list, i)
                        if var1 != None and var2 != None: # 유효한 것만 합친다 (결국 두 리스트중에서 작은 사이즈로)
                            listsum.append([var1, var2])

                    new_node = sorted(listsum, key=operator.itemgetter(0))
                    #print('new node list =', new_node)

                    for i in range(len(new_node)):
                        
                        item = QTableWidgetItem("{0:.2f}\n({1})".format(new_node[i][0], new_node[i][1]))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(lime))

                        if NightTime:
                            self.tableWidget_fut.setItem(1, 2 + i, item)
                        else:
                            self.tableWidget_fut.setItem(0, 2 + i, item)
                else:
                    pass

                item = QTableWidgetItem("{0}".format('-'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(2, Futures_column.매수건수.value, item)

                item = QTableWidgetItem("{0}".format('-'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(2, Futures_column.매도건수.value, item)

                item = QTableWidgetItem("{0}".format('-'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(2, Futures_column.매수잔량.value, item)

                item = QTableWidgetItem("{0}".format('-'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(2, Futures_column.매도잔량.value, item)

                item = QTableWidgetItem("{0}".format('-'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(2, Futures_column.건수비.value, item)

                item = QTableWidgetItem("{0}".format('-'))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(검정색))
                item.setForeground(QBrush(흰색))
                self.tableWidget_fut.setItem(2, Futures_column.잔량비.value, item)

                진성맥점 = pre_진성맥점[:]

                str = '[{0:02d}:{1:02d}:{2:02d}] 진성맥점을 초기화({3})합니다.\r'.format(dt.hour, dt.minute, dt.second, 진성맥점)
                self.textBrowser.append(str)
                print(str)

            if not NightTime:

                if 9 <= dt.hour < 16:
                    pass
                else:
                    pre_start = True
            else:
                if 16 <= dt.hour < 18:
                    pre_start = True
                else:
                    pass
            
            # 옵션 전광판 요청(주간=FC0/OC0, 야간=NC0/EC0)
            XQ = t2301(parent=self)

            if TARGET_MONTH_SELECT == 1:

                if MANGI_YAGAN:
                    t2301_month_info = NEXT_MONTH
                else:
                    t2301_month_info = CURRENT_MONTH

                str = '[{0:02d}:{1:02d}:{2:02d}] 본월물({3}) 주간옵션 전광판 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(str)

            elif TARGET_MONTH_SELECT == 2:

                if MANGI_YAGAN:
                    t2301_month_info = MONTH_AFTER_NEXT
                else:
                    t2301_month_info = NEXT_MONTH   

                str = '[{0:02d}:{1:02d}:{2:02d}] 차월물({3}) 주간옵션 전광판 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(str)

            elif TARGET_MONTH_SELECT == 3:

                if MANGI_YAGAN:
                    t2301_month_info = MONTH_AFTER_NEXT
                else:
                    t2301_month_info = MONTH_AFTER_NEXT 

                str = '[{0:02d}:{1:02d}:{2:02d}] 차차월물({3}) 주간옵션 전광판 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(str)
            else:
                pass

            XQ.Query(월물=t2301_month_info, 미니구분='G')

    def SaveResult(self):

        global flag_offline

        dt = datetime.datetime.now()
        now = time.localtime()

        times = "%04d-%02d-%02d-%02d-%02d-%02d" % \
                (now.tm_year, now.tm_mon, now.tm_mday, now.tm_hour, now.tm_min, now.tm_sec)

        # 저장전 전체 데이타를 다시 내려받음
        self.AddCode()

        self.high_low_list_save_to_file()

        str = '[{0:02d}:{1:02d}:{2:02d}] High-Low 리스트파일을 갱신했습니다.\r'.format(adj_hour, adj_min, adj_sec)
        self.textBrowser.append(str)

        # 해외선물 지수요청 취소                    
        self.OVC.UnadviseRealData()

        str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 지수요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
        self.textBrowser.append(str)

        if not NightTime:

            futures_graph_csv = "Futures {}{}".format(times, '.csv')
            df_futures_graph.to_csv(futures_graph_csv, encoding='ms949')

            str = '[{0:02d}:{1:02d}:{2:02d}] 국내선물 Graph 파일을 저장했습니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)
        else:
            pass  

        dow_graph_csv = "DOW {}{}".format(times, '.csv')
        df_dow_graph.to_csv(dow_graph_csv, encoding='ms949')

        sp500_graph_csv = "SP500 {}{}".format(times, '.csv')
        df_sp500_graph.to_csv(sp500_graph_csv, encoding='ms949')

        nasdaq_graph_csv = "NASDAQ {}{}".format(times, '.csv')
        df_nasdaq_graph.to_csv(nasdaq_graph_csv, encoding='ms949')

        wti_graph_csv = "WTI {}{}".format(times, '.csv')
        df_wti_graph.to_csv(wti_graph_csv, encoding='ms949')

        str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 Graph 파일을 저장했습니다.\r'.format(adj_hour, adj_min, adj_sec)
        self.textBrowser.append(str)
        
        str = '[{0:02d}:{1:02d}:{2:02d}] 로그파일을 저장합니다.\r'.format(adj_hour, adj_min, adj_sec)
        self.textBrowser.append(str)
        
        file = open('skybot.log', 'w')
        text = self.textBrowser.toPlainText()
        file.write(text)
        file.close()       

    def RemoveCode(self):

        global flag_telegram_on
        global flag_telegram_listen_worker, flag_telegram_send_worker
        global telegram_command

        dt = datetime.datetime.now()        

        flag_telegram_on = not flag_telegram_on
        
        chk_webhook = Check_Webhook()

        if chk_webhook.url != '':
            
            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Webhook = {3}\r'.format(adj_hour, adj_min, adj_sec, chk_webhook)
            self.textBrowser.append(str)

            # Webhook을 삭제한다.
            Delete_Webhook()
            
            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Webhook을 삭제합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)
        else:
            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Webhook이 없습니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str) 
        
        if TELEGRAM_SERVICE and not flag_telegram_send_worker:

            # 가끔 send worker가 오동작함(쓰레드 재시작...)
            
            self.telegram_send_worker.daemon = True
            self.telegram_send_worker.start()

            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Send Worker를 재시작합니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)

            flag_telegram_send_worker = True
        else:
            pass
        
        if TELEGRAM_SERVICE and not flag_telegram_listen_worker:

            flag_telegram_on = True
            
            self.telegram_listen_worker.daemon = True
            self.telegram_listen_worker.start()

            str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 Polling이 시작됩니다.\r'.format(adj_hour, adj_min, adj_sec)
            self.textBrowser.append(str)

            if TARGET_MONTH_SELECT == 1:

                ToYourTelegram("CM 텔레그램 Polling이 시작됩니다.")

            elif TARGET_MONTH_SELECT == 2:

                ToYourTelegram("NM 텔레그램 Polling이 시작됩니다.")

            else:
                ToYourTelegram("MAN 텔레그램 Polling이 시작됩니다.")
            
            self.pushButton_remove.setStyleSheet("background-color: lawngreen")
            
            flag_telegram_listen_worker = True                       
        else:
            pass               
        
        if TELEGRAM_SERVICE and flag_telegram_on:
            
            telegram_command = '/start'
            
            self.pushButton_remove.setStyleSheet("background-color: lawngreen")
            #print('flag_telegram_on =', flag_telegram_on)
        else:
            telegram_command = ''

            if TARGET_MONTH_SELECT == 1:

                str = '[{0:02d}:{1:02d}:{2:02d}] CM 텔레그램 Polling을 중지합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)

            elif TARGET_MONTH_SELECT == 2:

                str = '[{0:02d}:{1:02d}:{2:02d}] NM 텔레그램 Polling을 중지합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)

            else:
                str = '[{0:02d}:{1:02d}:{2:02d}] MAN 텔레그램 Polling을 중지합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)

            self.pushButton_remove.setStyleSheet("background-color: lightGray")
            
            if SELFID == 'soojin65':
                flag_telegram_on = True
            else:
                pass

    def high_low_list_save_to_file(self):
        
        call_low_list_to_file = []
        call_high_list_to_file = []
        put_low_list_to_file = []
        put_high_list_to_file = []
        list_final_to_file = []

        for i in range(option_pairs_count):

            콜저가 = df_call.at[i, '저가']
            콜고가 = df_call.at[i, '고가']
            풋저가 = df_put.at[i, '저가']
            풋고가 = df_put.at[i, '고가']

            if 1.2 < 콜저가 < 10.0:
                call_low_list_to_file.append(콜저가)
            else:
                pass

            if 1.2 < 콜고가 < 10.0:
                call_high_list_to_file.append(콜고가)
            else:
                pass

            if 1.2 < 풋저가 < 10.0:
                put_low_list_to_file.append(풋저가)
            else:
                pass

            if 1.2 < 풋고가 < 10.0:
                put_high_list_to_file.append(풋고가)
            else:
                pass

        print('call_low_list =', call_low_list_to_file)
        print('call_high_list =', call_high_list_to_file)
        print('put_low_list =', put_low_list_to_file)
        print('put_high_list =', put_high_list_to_file)

        list_final_to_file = call_low_list_to_file + call_high_list_to_file + put_low_list_to_file + put_high_list_to_file
        list_final_to_file.sort()

        print('list_final =', list_final_to_file)

        self.list_to_file_write(list_final_to_file, "HL-List.txt", sep = ' ')

    def list_to_file_write(self, list, fname, sep):               
        
        if os.path.isfile('HL-List.txt'):

            #기존 파일에서 첫번째 라인 삭제후 임시파일에 저장
            ff = open("tmp.txt",'w')

            with open(fname, 'r') as f:
                lines = f.readlines()

                if hlfile_line_number > HL_Depth - 1:
                    lines.pop(0)
                else:
                    pass
                ff.writelines(lines)

            ff.close()  

            #새로운 저고리스트를 임시파일에 추가후 저장
            vstr = ''

            for a in list:
                vstr = vstr + str(a) + sep 

            file = open("tmp.txt", 'a')
            strr = '\n' + vstr
            
            file.write(strr)
            file.close()

            #기존 파일삭제후 임시파일명 변경
            os.remove('HL-List.txt')
            os.rename('tmp.txt', 'HL-List.txt')
        else:
            pass

    def OnReceiveMessage(self, ClassName, systemError, messageCode, message):

        dt = datetime.datetime.now()

        if ClassName == 't2835':
            pass
            '''
            global flag_t2835_eventloop

            if systemError == 0:

                # t2835 이벤트루프 해지                    
                flag_t2835_eventloop = True

                self.t2835_event_loop.exit()

                str = 't2301_event_loop success exit...\r'
                print(str)
            else:                   
                flag_t2835_eventloop = False

                self.t2835_event_loop.exit()

                str = '[{0:02d}:{1:02d}:{2:02d}] t2835_event_loop fail exit...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(str)
                print(str)
            '''
        elif ClassName == 't2301':
            pass
            '''
            global flag_t2301_eventloop

            if systemError == 0:

                # t2301 이벤트루프 해지                    
                flag_t2301_eventloop = True

                self.t2301_event_loop.exit()

                str = 't2301_event_loop success exit...\r'
                print(str)
            else:                   
                flag_t2301_eventloop = False

                self.t2301_event_loop.exit()

                str = '[{0:02d}:{1:02d}:{2:02d}] t2301_event_loop fail exit...\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(str)
                print(str)
            '''
        elif ClassName == 't8416':
            pass
            #global flag_t8416_eventloop
            #pass
        else:
            pass

    #####################################################################################################################################################################
    def OnReceiveData(self, szTrCode, result):

        global gmshcode, cmshcode, ccmshcode, fut_code
        global call_code, put_code
        global opt_actval
        global atm_index, old_atm_index
        global df_call_price_graph, df_put_price_graph, df_call_total_graph, df_put_total_graph
        global df_call_graph, df_put_graph
        global atm_str, atm_val

        global fut_realdata, cme_realdata

        global call_ckbox
        global selected_call
        global df_call, df_call_hoga

        global put_ckbox
        global selected_put
        global df_put, df_put_hoga

        global df_call_volume, df_put_volume

        global call_행사가, put_행사가

        global call_기준가, call_월저, call_월고, call_전저, call_전고, call_종가, call_피봇, \
            call_시가, call_저가, call_고가, call_진폭
        global call_기준가_node_list, call_월저_node_list, call_월고_node_list, call_전저_node_list, call_전고_node_list, \
            call_종가_node_list, call_피봇_node_list, call_시가_node_list, call_저가_node_list, call_고가_node_list

        global put_기준가, put_월저, put_월고, put_전저, put_전고, put_종가, put_피봇, \
            put_시가, put_저가, put_고가, put_진폭
        global put_기준가_node_list, put_월저_node_list, put_월고_node_list, put_전저_node_list, put_전고_node_list, \
            put_종가_node_list, put_피봇_node_list, put_시가_node_list, put_저가_node_list, put_고가_node_list

        global option_pairs_count, real_option_pairs_count

        global 콜_순미결합, 풋_순미결합, 콜_순미결퍼센트, 풋_순미결퍼센트
        global 콜_수정미결합, 풋_수정미결합, 콜_수정미결퍼센트, 풋_수정미결퍼센트
        global call_atm_value, put_atm_value

        global df_fut
        global kp200_realdata

        global refresh_flag

        global call_oi_init_percent, put_oi_init_percent
        global call_gap_percent, call_db_percent, put_gap_percent, put_db_percent
        global call_otm_db_percent, put_otm_db_percent

        global call_open
        global call_ol
        global call_oh

        global put_open
        global put_ol
        global put_oh

        global call_volume_power, put_volume_power
        global 콜시가리스트, 콜저가리스트, 콜고가리스트, 풋시가리스트, 풋저가리스트, 풋고가리스트

        global start_time_str, end_time_str

        global df_sp500_graph, df_dow_graph, df_nasdaq_graph, df_wti_graph, df_eurofx_graph, df_hangseng_graph, df_gold_graph
        global view_actval
        
        global 선물_전저, 선물_전고, 선물_종가, 선물_피봇, 선물_시가, 선물_저가, 선물_현재가, 선물_고가
        global call_open_list, put_open_list, opt_total_list
        global call_itm_count, call_max_actval
        global put_itm_count, put_max_actval
        global KP200_전일종가, kp200_시가, kp200_저가, kp200_현재가, kp200_고가
        global t2835_month_info
        global server_date, server_time, system_server_timegap
        global cm_call_code, cm_put_code, cm_opt_length, nm_call_code, nm_put_code, nm_opt_length, CM_OPTCODE, NM_OPTCODE
        global selected_opt_list
        global 콜대비_퍼센트_평균, 풋대비_퍼센트_평균
        global atm_zero_sum, atm_zero_cha
        global 선물_전일종가
        global CENTER_VAL, CENTER_VAL1, CENTER_VAL2, CENTER_VAL3, CENTER_VAL4, CENTER_VAL5, CENTER_VAL6, CENTER_VAL7, CENTER_VAL8, CENTER_VAL9, CENTER_VAL10

        global df_futures_graph, df_kp200_graph
        global t8416_call_count, t8416_put_count

        dt = datetime.datetime.now()
        current_str = dt.strftime('%H:%M:%S')

        if szTrCode == 't0167':
            
            global 서버시간, 시스템_서버_시간차, flag_heartbeat
            global SERVER_HOUR, SERVER_MIN, SERVER_SEC, ovc_x_idx

            server_date, server_time = result
            
            systemtime = dt.hour * 3600 + dt.minute * 60 + dt.second

            SERVER_HOUR = int(server_time[0:2])
            SERVER_MIN = int(server_time[2:4])
            SERVER_SEC = int(server_time[4:6])

            서버시간 = SERVER_HOUR * 3600 + SERVER_MIN * 60 + SERVER_SEC
            시스템_서버_시간차 = systemtime - 서버시간
            
            # X축 시간좌표 계산
            if NightTime:

                night_time = SERVER_HOUR

                if 0 <= night_time <= 6:
                    night_time = night_time + 24
                else:
                    pass

                ovc_x_idx = (night_time - NightTime_PreStart_Hour) * 60 + SERVER_MIN + 1             
            else:
                ovc_x_idx = (SERVER_HOUR - DayTime_PreStart_Hour) * 60 + SERVER_MIN + 1

            str = '[{0:02d}:{1:02d}:{2:02d}] 서버시간({3})을 수신하였습니다.(시간차 = {4}초)\r'.format(SERVER_HOUR, SERVER_MIN, SERVER_SEC, ovc_x_idx, 시스템_서버_시간차)
            self.textBrowser.append(str)
            print(str)

            flag_heartbeat = True

        elif szTrCode == 't1514':

            CTS일자, df = result
            
            if df.iloc[0]['업종코드'] == KOSPI:

                if df.iloc[0]['전일대비구분'] == '5':

                    jisu_str = "KOSPI: {0} (-{1:.2f}, {2:0.1f}%)".format(format(df.iloc[0]['지수'], ','), df.iloc[0]['전일대비'], df.iloc[0]['등락율'])
                    self.label_kospi.setText(jisu_str)
                    self.label_kospi.setStyleSheet('background-color: black ; color: lightskyblue')

                elif df.iloc[0]['전일대비구분'] == '2':

                    jisu_str = "KOSPI: {0} ({1:.2f}, {2:0.1f}%)".format(format(df.iloc[0]['지수'], ','), df.iloc[0]['전일대비'], df.iloc[0]['등락율'])
                    self.label_kospi.setText(jisu_str)
                    self.label_kospi.setStyleSheet('background-color: black ; color: pink')
                else:
                    pass

            elif df.iloc[0]['업종코드'] == KOSDAQ:

                if df.iloc[0]['전일대비구분'] == '5':

                    jisu_str = "KOSDAQ: {0} (-{1:.2f}, {2:0.1f}%)".format(format(df.iloc[0]['지수'], ','), df.iloc[0]['전일대비'], df.iloc[0]['등락율'])
                    self.label_kosdaq.setText(jisu_str)
                    self.label_kosdaq.setStyleSheet('background-color: black ; color: lightskyblue')

                elif df.iloc[0]['전일대비구분'] == '2':

                    jisu_str = "KOSDAQ: {0} ({1:.2f}, {2:0.1f}%)".format(format(df.iloc[0]['지수'], ','), df.iloc[0]['전일대비'], df.iloc[0]['등락율'])
                    self.label_kosdaq.setText(jisu_str)
                    self.label_kosdaq.setStyleSheet('background-color: black ; color: pink')
                else:
                    pass
            else:
                pass                    

        elif szTrCode == 't2101':

            df = result[0]

            fut_realdata['현재가'] = df['현재가']
            fut_realdata['KP200'] = df['KOSPI200지수']
            
            atm_str = self.get_atm_str(fut_realdata['KP200'])

            if atm_str[-1] == '2' or atm_str[-1] == '7':

                atm_val = float(atm_str) + 0.5
            else:
                atm_val = float(atm_str)

            if atm_str in opt_actval:

                atm_index = opt_actval.index(atm_str)

                view_actval = opt_actval[atm_index-5:atm_index+6]

                call_atm_value = df_call.at[atm_index, '현재가']
                put_atm_value = df_put.at[atm_index, '현재가']
                
                str = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                    fut_realdata['현재가'] - fut_realdata['KP200'],
                    call_atm_value + put_atm_value,
                    abs(call_atm_value - put_atm_value))
                self.label_atm.setText(str) 
                
                df_futures_graph.at[0, 'drate'] = 0
                df_dow_graph.at[0, 'drate'] = 0

                df_call_total_graph.at[0, 'drate'] = 0
                df_put_total_graph.at[0, 'drate'] = 0

                item_str = '{0:0.2f}% \n {1:0.2f}% '.format(콜_수정미결퍼센트, 풋_수정미결퍼센트)

                item = QTableWidgetItem(item_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)
            else:
                print("atm값({0})이 리스트에 없습니다.".format(atm_str))            

            fut_realdata['종가'] = df['전일종가']
            선물_전일종가 = df['전일종가']

            item = QTableWidgetItem("{0:.2f}".format(df['전일종가']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)

            fut_realdata['시가'] = df['시가']

            item = QTableWidgetItem("{0:.2f}".format(df['시가']))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(흰색))

            if fut_realdata['시가'] > fut_realdata['종가']:
                item.setForeground(QBrush(적색))
            elif fut_realdata['시가'] < fut_realdata['종가']:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))

            self.tableWidget_fut.setItem(1, Futures_column.시가.value, item)

            if not NightTime:

                df_call_total_graph.at[0, 'centerval'] = CENTER_VAL

                df_futures_graph.at[0, 'kp200'] = fut_realdata['KP200']
                df_futures_graph.at[0, 'price'] = fut_realdata['종가']
                df_kp200_graph.at[0, 'price'] = fut_realdata['KP200']

                if fut_realdata['시가'] > 0:
                    df_futures_graph.at[GuardTime + 1, 'open'] = fut_realdata['시가']
                else:
                    pass

                df_futures_graph.at[0, 'volume'] = 0
            else:
                pass

            if not NightTime and df['시가'] > 0:

                fut_realdata['피봇'] = self.calc_pivot(fut_realdata['전저'], fut_realdata['전고'],
                                                         fut_realdata['종가'], df['시가'])

                item = QTableWidgetItem("{0:.2f}".format(fut_realdata['피봇']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)

                선물_피봇 = fut_realdata['피봇']

                fut_realdata['시가갭'] = fut_realdata['시가'] - fut_realdata['종가']

                item = QTableWidgetItem("{0:.2f}".format(fut_realdata['시가갭']))
                item.setTextAlignment(Qt.AlignCenter)

                if fut_realdata['시가'] > fut_realdata['종가']:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif fut_realdata['시가'] < fut_realdata['종가']:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))  

                self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)
            else:
                pass

            # kp200 종가는 t2801에서 읽어들여 표시함            
            fut_realdata['현재가'] = df['현재가']

            item = QTableWidgetItem("{0:.2f}".format(fut_realdata['현재가']))
            item.setTextAlignment(Qt.AlignCenter)

            if df['현재가'] > df['시가']:
                item.setForeground(QBrush(적색))
            elif df['현재가'] < df['시가']:
                item.setForeground(QBrush(청색))
            else:
                item.setForeground(QBrush(검정색))

            self.tableWidget_fut.setItem(1, Futures_column.현재가.value, item)
            
            if df['시가'] > 0:

                fut_realdata['대비'] = round((df['현재가'] - df['시가']), 2)
            else:
                fut_realdata['대비'] = 0

            item = QTableWidgetItem("{0:.2f}".format(fut_realdata['대비']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)
            
            fut_realdata['저가'] = df['저가']

            item = QTableWidgetItem("{0:.2f}".format(fut_realdata['저가']))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(옅은회색))
            self.tableWidget_fut.setItem(1, Futures_column.저가.value, item)

            fut_realdata['고가'] = df['고가']

            item = QTableWidgetItem("{0:.2f}".format(fut_realdata['고가']))
            item.setTextAlignment(Qt.AlignCenter)
            item.setBackground(QBrush(옅은회색))
            self.tableWidget_fut.setItem(1, Futures_column.고가.value, item)

            fut_realdata['진폭'] = df['고가'] - df['저가']

            item = QTableWidgetItem("{0:.2f}".format(fut_realdata['진폭']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.진폭.value, item)

            fut_realdata['거래량'] = df['거래량']
            temp = format(fut_realdata['거래량'], ',')

            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.거래량.value, item)

            fut_realdata['미결'] = df['미결제량']
            temp = format(fut_realdata['미결'], ',')

            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(1, Futures_column.OI.value, item)

            fut_realdata['미결증감'] = df['미결제증감']
            temp = format(fut_realdata['미결증감'], ',')

            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)

            if fut_realdata['미결증감'] < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_fut.setItem(1, Futures_column.OID.value, item)            
            
            if not NightTime:

                선물_피봇 = fut_realdata['피봇']
                선물_시가 = df['시가']
                선물_저가 = df['저가']
                선물_현재가 = df['현재가']
                선물_고가 = df['고가']
            else:
                pass
            
            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

        elif szTrCode == 't2301':

            block, df, df1 = result

            global 옵션잔존일

            if not refresh_flag:

                # 옵션 잔존일
                옵션잔존일 = block['옵션잔존일']

                # 옵션 행사가 갯수
                option_pairs_count = len(df)
                real_option_pairs_count = len(df)

                if option_pairs_count > 100:
                    option_pairs_count = 100
                else:
                    pass
                
                if not NightTime:

                    call_open = [False] * option_pairs_count
                    put_open = [False] * option_pairs_count
                else:
                    pass
                
                t2301_call = []
                callho_result = []
                t2301_put = []
                putho_result = []

                callche_result = []
                putche_result = []

                if NightTime:
                    timespan = yagan_timespan
                else:
                    timespan = jugan_timespan

                for i in range(option_pairs_count):

                    opt_total_list.append(i)

                    df_call_graph[i] = DataFrame(index=range(0, timespan), columns=\
                        ['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'ms_hoga', 'md_hoga', 'open_interest', 'oi_delta'])
                    df_put_graph[i] = DataFrame(index=range(0, timespan), columns=\
                        ['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'ms_hoga', 'md_hoga', 'open_interest', 'oi_delta'])

                #df_call_price_graph = DataFrame(index=range(0, timespan), columns=range(0, option_pairs_count))
                #df_put_price_graph = DataFrame(index=range(0, timespan), columns=range(0, option_pairs_count))
                df_call_total_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'volume', 'open_interest', 'ms_hoga', 'md_hoga', 'hoga_remainder_ratio', 'drate', 'centerval'])
                df_put_total_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'volume', 'open_interest', 'ms_hoga', 'md_hoga', 'hoga_remainder_ratio', 'drate', 'yanghap'])

                df_kp200_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle'])
                df_futures_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'kp200', \
                    'c_ms_hoga', 'c_md_hoga', 'c_hoga_remainder_ratio', 'n_ms_hoga', 'n_md_hoga', 'n_hoga_remainder_ratio', \
                        'drate', 'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', \
                        'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])

                df_sp500_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA',  'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])
                df_dow_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', 'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])
                df_nasdaq_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', 'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])
                df_wti_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', 'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])
                df_eurofx_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', 'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])
                df_hangseng_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', 'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])
                df_gold_graph = DataFrame(index=range(0, timespan), columns=['ctime', 'price', 'open', 'high', 'low', 'close', 'middle', 'volume', 'hoga_remainder_ratio', 'drate', \
                    'PSAR', 'TA_PSAR', 'BBLower', 'BBMiddle', 'BBUpper', 'MACD', 'MACDSig', 'MAMA', 'FAMA', 'A_FAMA', 'OE_CONV', 'OE_BASE', 'SPAN_A', 'SPAN_B'])

                # 콜처리
                for i in range(option_pairs_count):

                    행사가 = df['행사가'][i]
                    item = QTableWidgetItem("{0:0.1f}".format(df['float_행사가'][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.행사가.value, item)

                    call_code.append(df['콜옵션코드'][i])
                    opt_actval.append(df['콜옵션코드'][i][5:8])

                    OLOH = '-'
                    item = QTableWidgetItem(OLOH)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.OLOH.value, item)

                    시가 = round(df['시가'][i], 2)

                    현재가 = df['현재가'][i]
                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if pre_start:
                        item.setForeground(QBrush(검정색))
                    else:
                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            pass

                    self.tableWidget_call.setItem(i, Option_column.현재가.value, item)

                    if df['전일대비구분'][i] == '2':

                        종가 = round((현재가 - df['전일대비'][i]), 2)

                    elif df['전일대비구분'][i] == '5':

                        종가 = round((현재가 + df['전일대비'][i]), 2)

                    else:
                        종가 = round(현재가, 2)

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.종가.value, item)

                    #df_call_price_graph.iat[0, i] = 종가
                    df_call_graph[i].at[0, 'open'] = 종가
                    df_call_graph[i].at[0, 'price'] = 종가

                    if df['저가'][i] < df['고가'][i]:
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]                        
                    else:
                        저가 = 0.0
                        고가 = 0.0

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_call.setItem(i, Option_column.고가.value, item)

                    if not NightTime:

                        if df['저가'][i] < df['고가'][i]:
                            call_open[i] = True
                            self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.진폭.value, item)
                    
                    if not NightTime:

                        if 시가 > opt_search_start_value and df['저가'][i] < df['고가'][i]:
                            call_open_list.append(i)
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if not NightTime:
                            #df_call_price_graph.iat[GuardTime + 1, i] = 시가
                            df_call_graph[i].at[GuardTime + 1, 'open'] = 시가
                            df_call_graph[i].at[GuardTime + 1, 'price'] = 시가
                        else:
                            pass

                        시가갭 = 시가 - 종가
                        대비 = int(round((현재가 - 시가) * 1, 2))

                        if 시가 > 0 and 저가 < 고가:

                            call_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, call_gap_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            call_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(대비, call_db_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_str = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            gap_str = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)
                    else:
                        시가 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.대비.value, item)

                    피봇 = 0.0
                    item = QTableWidgetItem("{0:.2f}".format(피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.피봇.value, item)

                    if NightTime:
                        전저 = 저가
                        종가 = 현재가
                        전고 = 고가
                    else:
                        전저 = 0.0
                        전고 = 0.0

                    if df['현재가'][i] <= 시가갭:

                        수정미결 = int(df['미결제약정'][i] * df['현재가'][i])
                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * df['현재가'][i])
                    else:
                        수정미결 = int(df['미결제약정'][i] * (df['현재가'][i] - 시가갭))
                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * (df['현재가'][i] - 시가갭))
                    
                    순미결 = df['미결제약정'][i]
                    순거래량 = df['매수잔량'][i] - df['매도잔량'][i]

                    temp = format(수정거래량, ',')
                    
                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.VP.value, item)

                    if pre_start:

                        temp = format(순미결, ',')
                    else:
                        temp = format(수정미결, ',')               

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                    순미결증감 = df['미결제약정증감'][i]
                    수정미결증감 = int(round(df['미결제약정증감'][i] * df['현재가'][i]))
                    temp = format(수정미결증감, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                    단축코드 = 0
                    체결시간 = 0
                    기준가 = 0.0
                    월저 = 0.0
                    월고 = 0.0

                    lst = [단축코드, 체결시간, 행사가, OLOH, 기준가, 월저, 월고, 전저, 전고, 종가, 피봇, 시가, 시가갭, 저가, 현재가,
                           고가, 대비, 진폭, 순거래량, 수정거래량, 순미결, 수정미결, 순미결증감, 수정미결증감]
                    t2301_call.append(lst)

                    매도누적체결량 = 0
                    매도누적체결건수 = 0
                    매수누적체결량 = 0
                    매수누적체결건수 = 0

                    lst = [매도누적체결량, 매도누적체결건수, 매수누적체결량, 매수누적체결건수]
                    callche_result.append(lst)

                    매수건수 = 0
                    매도건수 = 0
                    매수잔량 = 0
                    매도잔량 = 0

                    lstho = [매수건수, 매도건수, 매수잔량, 매도잔량]
                    callho_result.append(lstho)

                columns = ['단축코드', '체결시간', '행사가', 'OLOH', '기준가', '월저', '월고', '전저', '전고', '종가', '피봇', '시가', '시가갭', '저가',
                           '현재가', '고가', '대비', '진폭', '순거래량', '수정거래량', '순미결', '수정미결', '순미결증감', '수정미결증감']

                df_call = DataFrame(data=t2301_call, columns=columns)

                columns = ['매도누적체결량', '매도누적체결건수', '매수누적체결량', '매수누적체결건수']
                df_call_volume = DataFrame(data=callche_result, columns=columns)

                columns = ['매수건수', '매도건수', '매수잔량', '매도잔량']
                df_call_hoga = DataFrame(data=callho_result, columns=columns)

                temp = format(df_call['수정거래량'].sum(), ',')

                item = QTableWidgetItem(temp)
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.VP.value, item)

                if pre_start:

                    순미결합 = format(df_call['순미결'].sum(), ',')

                    item = QTableWidgetItem(순미결합)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)
                else:
                    temp = '{0}k'.format(format(int(df_call['수정미결'].sum()/1000), ','))                       
                    
                    item = QTableWidgetItem(temp)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)

                call_행사가 = df_call['행사가'].values.tolist()

                print('t2301 주간 전광판 콜 데이타 = \r', df_call)

                str = '[{0:02d}:{1:02d}:{2:02d}] {3} 월물 Call 전광판 데이타 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(str)

                # 풋처리
                for i in range(option_pairs_count):

                    행사가 = df1['행사가'][i]
                    item = QTableWidgetItem("{0:0.1f}".format(df1['float_행사가'][i]))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.행사가.value, item)

                    put_code.append(df1['풋옵션코드'][i])

                    OLOH = '-'
                    item = QTableWidgetItem(OLOH)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.OLOH.value, item)

                    시가 = round(df1['시가'][i], 2)

                    현재가 = df1['현재가'][i]
                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if pre_start:
                        item.setForeground(QBrush(검정색))
                    else:
                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            pass

                    self.tableWidget_put.setItem(i, Option_column.현재가.value, item)

                    if df1['전일대비구분'][i] == '2':

                        종가 = round((현재가 - df1['전일대비'][i]), 2)

                    elif df['전일대비구분'][i] == '5':

                        종가 = round((현재가 + df1['전일대비'][i]), 2)

                    else:
                        종가 = round(현재가, 2)                                            

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.종가.value, item)

                    #df_put_price_graph.iat[0, i] = 종가
                    df_put_graph[i].at[0, 'open'] = 종가
                    df_put_graph[i].at[0, 'price'] = 종가

                    if df1['저가'][i] < df1['고가'][i]:
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]                        
                    else:
                        저가 = 0.0
                        고가 = 0.0

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_put.setItem(i, Option_column.고가.value, item)

                    if not NightTime:

                        if df1['저가'][i] < df1['고가'][i]:
                            put_open[i] = True
                            self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.진폭.value, item)
                    
                    if not NightTime:

                        if 시가 > opt_search_start_value and df1['저가'][i] < df1['고가'][i]:
                            put_open_list.append(i)
                        else:
                            pass
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        if not NightTime:
                            #df_put_price_graph.iat[GuardTime + 1, i] = 시가
                            df_put_graph[i].at[GuardTime + 1, 'open'] = 시가
                            df_put_graph[i].at[GuardTime + 1, 'price'] = 시가
                        else:
                            pass

                        시가갭 = 시가 - 종가
                        대비 = int(round((현재가 - 시가) * 1, 2))

                        if 시가 > 0 and 저가 < 고가:

                            put_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, put_gap_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            put_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(대비, put_db_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_str = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            gap_str = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                    else:
                        시가 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.대비.value, item)

                    피봇 = 0.0
                    item = QTableWidgetItem("{0:.2f}".format(피봇))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.피봇.value, item)

                    if NightTime:
                        전저 = 저가
                        종가 = 현재가
                        전고 = 고가
                    else:
                        전저 = 0.0
                        전고 = 0.0

                    if df1['현재가'][i] <= 시가갭:

                        수정미결 = int(df1['미결제약정'][i] * df1['현재가'][i])
                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * df1['현재가'][i])
                    else:
                        수정미결 = int(df1['미결제약정'][i] * (df1['현재가'][i] - 시가갭))
                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * (df1['현재가'][i] - 시가갭))
                    
                    순미결 = df1['미결제약정'][i]
                    순거래량 = df1['매수잔량'][i] - df1['매도잔량'][i] 

                    temp = format(수정거래량, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.VP.value, item)                   

                    if pre_start:

                        temp = format(순미결, ',')
                    else:
                        temp = format(수정미결, ',')                                                

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                    순미결증감 = df1['미결제약정증감'][i]
                    수정미결증감 = int(round(df1['미결제약정증감'][i] * df1['현재가'][i]))
                    temp = format(수정미결증감, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.OID.value, item)

                    단축코드 = 0
                    체결시간 = 0
                    기준가 = 0.0
                    월저 = 0.0
                    월고 = 0.0

                    lst = [단축코드, 체결시간, 행사가, OLOH, 기준가, 월저, 월고, 전저, 전고, 종가, 피봇, 시가, 시가갭, 저가, 현재가,
                           고가, 대비, 진폭, 순거래량, 수정거래량, 순미결, 수정미결, 순미결증감, 수정미결증감]
                    t2301_put.append(lst)

                    매도누적체결량 = 0
                    매도누적체결건수 = 0
                    매수누적체결량 = 0
                    매수누적체결건수 = 0

                    lst = [매도누적체결량, 매도누적체결건수, 매수누적체결량, 매수누적체결건수]
                    putche_result.append(lst)

                    매수건수 = 0
                    매도건수 = 0
                    매수잔량 = 0
                    매도잔량 = 0

                    lstho = [매수건수, 매도건수, 매수잔량, 매도잔량]
                    putho_result.append(lstho)

                columns = ['단축코드', '체결시간', '행사가', 'OLOH', '기준가', '월저', '월고', '전저', '전고', '종가', '피봇', '시가', '시가갭', '저가',
                           '현재가', '고가', '대비', '진폭', '순거래량', '수정거래량', '순미결', '수정미결', '순미결증감', '수정미결증감']

                df_put = DataFrame(data=t2301_put, columns=columns)

                columns = ['매도누적체결량', '매도누적체결건수', '매수누적체결량', '매수누적체결건수']
                df_put_volume = DataFrame(data=putche_result, columns=columns)

                columns = ['매수건수', '매도건수', '매수잔량', '매도잔량']
                df_put_hoga = DataFrame(data=putho_result, columns=columns)

                temp = format(df_put['수정거래량'].sum(), ',')

                item = QTableWidgetItem(temp)
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.VP.value, item)

                if pre_start:

                    순미결합 = format(df_put['순미결'].sum(), ',')

                    item = QTableWidgetItem(순미결합)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)
                else:
                    temp = '{0}k'.format(format(int(df_put['수정미결'].sum()/1000), ','))                                   

                    item = QTableWidgetItem(temp)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)

                put_행사가 = df_put['행사가'].values.tolist()
                
                print('t2301 주간 전광판 풋 데이타 = \r', df_put)

                str = '[{0:02d}:{1:02d}:{2:02d}] {3} 월물 Put 전광판 데이타 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second, t2301_month_info)
                self.textBrowser.append(str)
                
                call_저가 = df_call['저가'].values.tolist()

                str = '[{0:02d}:{1:02d}:{2:02d}] call_저가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, call_저가)
                #self.textBrowser.append(str)
                print(str)

                call_고가 = df_call['고가'].values.tolist()

                str = '[{0:02d}:{1:02d}:{2:02d}] call_고가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, call_고가)
                #self.textBrowser.append(str)
                print(str)

                put_저가 = df_put['저가'].values.tolist()

                str = '[{0:02d}:{1:02d}:{2:02d}] put_저가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, put_저가)
                #self.textBrowser.append(str)
                print(str)

                put_고가 = df_put['고가'].values.tolist()

                str = '[{0:02d}:{1:02d}:{2:02d}] put_고가 list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, put_고가)
                #self.textBrowser.append(str)
                print(str)
                
                if not pre_start:

                    # 콜 컬러링 리스트 작성
                    call_시가 = df_call['시가'].values.tolist()
                    call_시가_node_list = self.make_node_list(call_시가)

                    call_피봇 = df_call['피봇'].values.tolist()
                    call_피봇_node_list = self.make_node_list(call_피봇)
                    
                    call_저가 = df_call['저가'].values.tolist()
                    call_저가_node_list = self.make_node_list(call_저가)

                    call_고가 = df_call['고가'].values.tolist()
                    call_고가_node_list = self.make_node_list(call_고가)
                    
                    call_진폭 = df_call['진폭'].values.tolist()
                    진폭최대값 = max(call_진폭)
                    max_str = '{0:.2f}'.format(진폭최대값)

                    item = QTableWidgetItem(max_str)
                    self.tableWidget_call.setHorizontalHeaderItem(Option_column.진폭.value, item)

                    # 풋 컬러링 리스트 작성
                    put_시가 = df_put['시가'].values.tolist()
                    put_시가_node_list = self.make_node_list(put_시가)

                    put_피봇 = df_put['피봇'].values.tolist()
                    put_피봇_node_list = self.make_node_list(put_피봇)
                    
                    put_저가 = df_put['저가'].values.tolist()
                    put_저가_node_list = self.make_node_list(put_저가)

                    put_고가 = df_put['고가'].values.tolist()
                    put_고가_node_list = self.make_node_list(put_고가)
                    
                    put_진폭 = df_put['진폭'].values.tolist()
                    진폭최대값 = max(put_진폭)
                    max_str = '{0:.2f}'.format(진폭최대값)

                    item = QTableWidgetItem(max_str)
                    self.tableWidget_put.setHorizontalHeaderItem(Option_column.진폭.value, item)
                else:
                    pass

                self.opt_high_low_list_update()

                str = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2301 = {3}\r'.format(dt.hour, dt.minute, dt.second, high_low_list)
                #self.textBrowser.append(str)
                print(str) 

                df_call_total_graph.at[0, 'volume'] = 0
                df_put_total_graph.at[0, 'volume'] = 0
                
                df_call_total_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_put_total_graph.at[0, 'hoga_remainder_ratio'] = 0

                # 본월물, 차월물 호가잔량비 초기화
                df_futures_graph.at[0, 'c_hoga_remainder_ratio'] = 0
                df_futures_graph.at[0, 'n_hoga_remainder_ratio'] = 0

                # 해외선물 호가 초기화
                df_sp500_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_dow_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_nasdaq_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_wti_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_eurofx_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_hangseng_graph.at[0, 'hoga_remainder_ratio'] = 0
                df_gold_graph.at[0, 'hoga_remainder_ratio'] = 0
                
                콜_순미결합 = df_call['순미결'].sum()
                풋_순미결합 = df_put['순미결'].sum()

                순미결합 = 콜_순미결합 + 풋_순미결합

                콜_수정미결합 = df_call['수정미결'].sum()
                풋_수정미결합 = df_put['수정미결'].sum()

                수정미결합 = 콜_수정미결합 + 풋_수정미결합

                if 순미결합 > 0:

                    콜_순미결퍼센트 = (콜_순미결합 / 순미결합) * 100
                    풋_순미결퍼센트 = 100 - 콜_순미결퍼센트
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] Call/Put OI 순미결 초기값 : {3}/{4}\r'.format(dt.hour,
                                            dt.minute, dt.second, format(콜_순미결합, ','), format(풋_순미결합, ','))
                    self.textBrowser.append(str)
                else:
                    pass

                if 수정미결합 > 0:

                    콜_수정미결퍼센트 = (콜_수정미결합 / 수정미결합) * 100
                    풋_수정미결퍼센트 = 100 - 콜_수정미결퍼센트

                    #call_oi_init_percent = 콜_수정미결합
                    #put_oi_init_percent = 풋_수정미결합
                    call_oi_init_percent = 콜_수정미결퍼센트
                    put_oi_init_percent = 풋_수정미결퍼센트

                    df_call_total_graph.at[0, 'open_interest'] = call_oi_init_percent
                    df_put_total_graph.at[0, 'open_interest'] = put_oi_init_percent

                    str = '[{0:02d}:{1:02d}:{2:02d}] Call/Put OI 수정미결 초기값 : {3}/{4}\r'.format(dt.hour,
                                            dt.minute, dt.second, format(콜_수정미결합, ','), format(풋_수정미결합, ','))
                    self.textBrowser.append(str)
                    
                    oi_str = '{0}k:{1}k'.format(format(int(콜_수정미결합/1000), ','), format(int(풋_수정미결합/1000), ','))

                    item = QTableWidgetItem(oi_str)
                    self.tableWidget_quote.setHorizontalHeaderItem(Quote_column.미결종합.value - 1, item)
                else:
                    pass

                # 장운영정보 요청
                self.JIF.AdviseRealData('0')

                str = '[{0:02d}:{1:02d}:{2:02d}] 장운영 정보를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(str)

                '''
                # 해외선물 체결,가격 실시간 요청
                self.OVC.AdviseRealData(종목코드=SP500)
                self.OVC.AdviseRealData(종목코드=DOW)
                self.OVC.AdviseRealData(종목코드=NASDAQ)
                self.OVC.AdviseRealData(종목코드=WTI)                
                self.OVC.AdviseRealData(종목코드=HANGSENG)
                #self.OVC.AdviseRealData(종목코드=EUROFX)
                #self.OVC.AdviseRealData(종목코드=GOLD)
                
                # 해외선물 호가 실시간 요청(호가정보가 국내용인듯)
                self.OVH.AdviseRealData(종목코드=SP500)
                self.OVH.AdviseRealData(종목코드=DOW)
                self.OVH.AdviseRealData(종목코드=NASDAQ)
                self.OVH.AdviseRealData(종목코드=WTI)
                self.OVH.AdviseRealData(종목코드=HANGSENG)                
                #self.OVH.AdviseRealData(종목코드=EUROFX)                
                #self.OVH.AdviseRealData(종목코드=GOLD)
                
                # 해외옵션 체결 실시간 요청                
                self.WOC.AdviseRealData(종목코드=SP500)
                self.WOC.AdviseRealData(종목코드=DOW)
                self.WOC.AdviseRealData(종목코드=NASDAQ)
                self.WOC.AdviseRealData(종목코드=WTI)
                self.WOC.AdviseRealData(종목코드=EUROFX)
                self.WOC.AdviseRealData(종목코드=HANGSENG)
                self.WOC.AdviseRealData(종목코드=GOLD)
                '''

                XQ = t2101(parent=self)
                XQ.Query(종목코드=fut_code)

                if fut_code == gmshcode:
                    str = '[{0:02d}:{1:02d}:{2:02d}] t2101 본월물 주간선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                elif fut_code == cmshcode:
                    str = '[{0:02d}:{1:02d}:{2:02d}] t2101 차월물 주간선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                elif fut_code == ccmshcode:
                    str = '[{0:02d}:{1:02d}:{2:02d}] t2101 차차월물 주간선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] 잘못된 선물코드({3})입니다.\r'.format(dt.hour, dt.minute, dt.second, fut_code)

                self.textBrowser.append(str)

                #time.sleep(0.1)
                QTest.qWait(100)

                XQ = t2801(parent=self)
                XQ.Query(종목코드=fut_code)

                if fut_code == gmshcode:
                    str = '[{0:02d}:{1:02d}:{2:02d}] t2801 본월물 야간선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                elif fut_code == cmshcode:
                    str = '[{0:02d}:{1:02d}:{2:02d}] t2801 차월물 야간선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                elif fut_code == ccmshcode:
                    str = '[{0:02d}:{1:02d}:{2:02d}] t2801 차차월물 야간선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] 잘못된 선물코드({3})입니다.\r'.format(dt.hour, dt.minute, dt.second, fut_code)

                self.textBrowser.append(str)

                if not NightTime:        

                    print('\r')
                    print('t2301 call open list = ', call_open_list, len(call_open_list))
                    print('\r')
                    print('t2301 put open list = ', put_open_list, len(put_open_list))
                    print('\r')

                    # 주간 실시간테이타 요청                
                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간 실시간데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(str)

                    if pre_start:

                        # FUTURES/KOSPI200 예상지수 요청
                        self.YJ.AdviseRealData(FUTURES)
                        self.YJ.AdviseRealData(KOSPI200)

                        # 지수선물예상체결 요청
                        self.YFC.AdviseRealData(fut_code)

                        # KOSPI예상체결 요청                        
                        self.YS3.AdviseRealData(SAMSUNG)
                        self.YS3.AdviseRealData(HYUNDAI)
                        #self.YS3.AdviseRealData(Celltrion)

                        # 지수옵션예상체결 요청
                        for i in range(option_pairs_count):
                            self.YOC.AdviseRealData(call_code[i])
                            self.YOC.AdviseRealData(put_code[i])
                    else:
                        pass

                    self.OPT_REAL = OC0(parent=self)
                    self.OPT_HO = OH0(parent=self)
                    self.FUT_REAL = FC0(parent=self)
                    self.FUT_HO = FH0(parent=self)

                    # 옵션 실시간 가격 및 호가요청
                    for i in range(option_pairs_count):
                        self.OPT_REAL.AdviseRealData(call_code[i])
                        self.OPT_REAL.AdviseRealData(put_code[i])

                    if not NightTime:
                        if ALL_QUOTE_REQUEST:
                            print('주간옵션 모든 호가를 요청합니다.\r')
                            for i in range(option_pairs_count):
                                self.OPT_HO.AdviseRealData(call_code[i])
                                self.OPT_HO.AdviseRealData(put_code[i])
                        else:
                            print('주간옵션 호가 20개를 요청합니다.\r')
                            for i in range(20):
                                self.OPT_HO.AdviseRealData(call_code[atm_index - 10 + i])
                                self.OPT_HO.AdviseRealData(put_code[atm_index - 10 + i])
                    else:
                        for i in range(option_pairs_count):
                            self.OPT_HO.AdviseRealData(call_code[i])
                            self.OPT_HO.AdviseRealData(put_code[i])
                    
                    # 선물 실시간테이타 요청
                    self.FUT_REAL.AdviseRealData(fut_code)
                    self.FUT_HO.AdviseRealData(fut_code)

                    if TARGET_MONTH_SELECT == 1:
                        # 차월물 호가요청
                        self.FUT_HO.AdviseRealData(cmshcode)
                        self.FUT_HO.AdviseRealData(ccmshcode)
                    else:
                        pass

                    # KOSPI/KOSPI200/KOSDAQ 지수요청
                    self.IJ.AdviseRealData(KOSPI)
                    self.IJ.AdviseRealData(KOSPI200)
                    self.IJ.AdviseRealData(KOSDAQ)

                    # KOSPI체결 요청
                    self.S3.AdviseRealData(SAMSUNG)
                    #self.S3.AdviseRealData(HYUNDAI)
                    #self.S3.AdviseRealData(Celltrion)

                    # 업종별 투자자별 매매현황 요청
                    self.BM.AdviseRealData(FUTURES)
                    self.BM.AdviseRealData(KOSPI)

                    # 프로그램 매매현황 요청
                    self.PM.AdviseRealData()                    
                else:
                    # 야간 실시간테이타 요청                
                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간 실시간데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(str)

                    self.OPT_REAL = EC0(parent=self)                
                    self.OPT_HO = EH0(parent=self)
                    self.FUT_REAL = NC0(parent=self)
                    self.FUT_HO = NH0(parent=self) 

                    for i in range(option_pairs_count):
                        self.OPT_REAL.AdviseRealData(call_code[i])
                        self.OPT_REAL.AdviseRealData(put_code[i])

                    if not NightTime:
                        if ALL_QUOTE_REQUEST:
                            print('야간옵션 모든 호가를 요청합니다.\r')
                            for i in range(option_pairs_count):
                                self.OPT_HO.AdviseRealData(call_code[i])
                                self.OPT_HO.AdviseRealData(put_code[i])
                        else:
                            print('야간옵션 호가 20개를 요청합니다.\r')
                            for i in range(20):
                                self.OPT_HO.AdviseRealData(call_code[atm_index - 10 + i])
                                self.OPT_HO.AdviseRealData(put_code[atm_index - 10 + i])
                    else:
                        for i in range(option_pairs_count):
                            self.OPT_HO.AdviseRealData(call_code[i])
                            self.OPT_HO.AdviseRealData(put_code[i])
                    
                    self.FUT_REAL.AdviseRealData(fut_code)                                   
                    self.FUT_HO.AdviseRealData(fut_code)

                    # 업종별 투자자별 매매현황 요청(야간선물 서비스중단)
                    #self.BM.AdviseRealData(CME)

                # t8416 요청
                '''                
                self.t8416_callworker.daemon = True
                self.t8416_callworker.start()
                '''
                print('t8416 call 요청시작...')

                for i in range(option_pairs_count):
                    
                    self.t8416_call_request(i)
                    #print('t8416 call {0}번째 event loop 시작\r'.format(i+1))
                    self.t8416_call_event_loop.exec_()
            else:
                # Refresh
                if not NightTime:

                    if not flag_checkBox_HS:                
                        str = '[{0:02d}:{1:02d}:{2:02d}] 주간옵션 전광판을 갱신합니다.\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(str)
                    else:
                        pass

                    del call_open_list[:]
                    del put_open_list[:]

                    del call_저가[:]
                    del call_고가[:]
                    del put_저가[:]
                    del put_고가[:]

                    for i in range(option_pairs_count):

                        # 콜 데이타 획득                        
                        시가 = df['시가'][i]
                        df_call.at[i, '시가'] = 시가

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        if 시가 > 0 and df['저가'][i] < df['고가'][i]:

                            종가 = df_call.at[i, '종가']

                            시가갭 = 시가 - 종가
                            df_call.at[i, '시가갭'] = 시가갭

                            if 종가 > 0:

                                call_gap_percent[i] = (시가 / 종가 - 1) * 100
                                gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, call_gap_percent[i])
                            else:
                                call_gap_percent[i] = 0.0
                                gap_str = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            if df_call.at[i, '피봇'] == 0:

                                피봇 = self.calc_pivot(df_call.at[i, '전저'], df_call.at[i, '전고'], 종가, 시가)

                                df_call.at[i, '피봇'] = 피봇

                                item = QTableWidgetItem("{0:.2f}".format(피봇))
                                item.setTextAlignment(Qt.AlignCenter)
                                self.tableWidget_call.setItem(i, Option_column.피봇.value, item)
                            else:
                                pass
                        else:
                            시가갭 = 0
                            df_call.at[i, '시가갭'] = 시가갭

                        현재가 = df['현재가'][i]
                        df_call.at[i, '현재가'] = 현재가

                        df_call_graph[i].at[ovc_x_idx, 'price'] = 현재가

                        item = QTableWidgetItem("{0:.2f}".format(현재가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            pass
                        
                        self.tableWidget_call.setItem(i, Option_column.현재가.value, item)
                        
                        if df['저가'][i] < df['고가'][i]:
                            저가 = df['저가'][i]
                            고가 = df['고가'][i]                        
                        else:
                            저가 = 0.0
                            고가 = 0.0
                        
                        df_call.at[i, '저가'] = 저가

                        item = QTableWidgetItem("{0:.2f}".format(저가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                        df_call.at[i, '고가'] = 고가

                        item = QTableWidgetItem("{0:.2f}".format(고가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(i, Option_column.고가.value, item)
                        
                        if 시가 > opt_search_start_value and df['저가'][i] < df['고가'][i]:
                            call_open_list.append(i)
                        else:
                            pass

                        # 수정거래량, 수정미결 갱신
                        if df['현재가'][i] <= 시가갭:

                            수정미결 = int(df['미결제약정'][i] * df['현재가'][i])
                            수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * df['현재가'][i])
                        else:
                            수정미결 = int(df['미결제약정'][i] * (df['현재가'][i] - 시가갭))
                            수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * (df['현재가'][i] - 시가갭))

                        df_call.at[i, '수정미결'] = 수정미결
                        df_call.at[i, '수정거래량'] = 수정거래량

                        순미결 = df['미결제약정'][i]
                        순거래량 = df['매수잔량'][i] - df['매도잔량'][i]

                        temp = format(수정거래량, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.VP.value, item)

                        temp = format(수정미결, ',')                                           

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                        순미결증감 = df['미결제약정증감'][i]
                        수정미결증감 = int(round(df['미결제약정증감'][i] * df['현재가'][i]))
                        temp = format(수정미결증감, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                        # 풋 데이타 획득                        
                        시가 = df1['시가'][i]
                        df_put.at[i, '시가'] = 시가

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:

                            종가 = df_put.at[i, '종가']

                            시가갭 = 시가 - 종가
                            df_put.at[i, '시가갭'] = 시가갭

                            if 종가 > 0:

                                put_gap_percent[i] = (시가 / 종가 - 1) * 100
                                gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, put_gap_percent[i])
                            else:
                                put_gap_percent[i] = 0.0
                                gap_str = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            if df_put.at[i, '피봇'] == 0:

                                피봇 = self.calc_pivot(df_put.at[i, '전저'], df_put.at[i, '전고'], 종가, 시가)

                                df_put.at[i, '피봇'] = 피봇                                         

                                item = QTableWidgetItem("{0:.2f}".format(피봇))
                                item.setTextAlignment(Qt.AlignCenter)
                                self.tableWidget_put.setItem(i, Option_column.피봇.value, item)
                            else:
                                pass
                        else:
                            시가갭 = 0
                            df_put.at[i, '시가갭'] = 시가갭

                        현재가 = df1['현재가'][i]
                        df_put.at[i, '현재가'] = 현재가

                        df_put_graph[i].at[ovc_x_idx, 'price'] = 현재가

                        item = QTableWidgetItem("{0:.2f}".format(현재가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 0:

                            if 현재가 > 시가:
                                item.setForeground(QBrush(적색))
                            elif 현재가 < 시가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))
                        else:
                            pass
                        
                        self.tableWidget_put.setItem(i, Option_column.현재가.value, item)

                        if df1['저가'][i] < df1['고가'][i]:
                            저가 = df1['저가'][i]
                            고가 = df1['고가'][i]                        
                        else:
                            저가 = 0.0
                            고가 = 0.0
                        
                        df_put.at[i, '저가'] = 저가

                        item = QTableWidgetItem("{0:.2f}".format(저가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                        df_put.at[i, '고가'] = 고가

                        item = QTableWidgetItem("{0:.2f}".format(고가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                        
                        if 시가 > opt_search_start_value and df1['저가'][i] < df1['고가'][i]:
                            put_open_list.append(i)
                        else:
                            pass

                        # 수정거래량, 수정미결 갱신
                        if df1['현재가'][i] <= 시가갭:

                            수정미결 = int(df1['미결제약정'][i] * df1['현재가'][i])
                            수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * df1['현재가'][i])
                        else:
                            수정미결 = int(df1['미결제약정'][i] * (df1['현재가'][i] - 시가갭))
                            수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * (df1['현재가'][i] - 시가갭))

                        df_put.at[i, '수정미결'] = 수정미결
                        df_put.at[i, '수정거래량'] = 수정거래량

                        순미결 = df1['미결제약정'][i]
                        순거래량 = df1['매수잔량'][i] - df1['매도잔량'][i]

                        temp = format(수정거래량, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.VP.value, item)

                        temp = format(수정미결, ',')                                           

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                        순미결증감 = df1['미결제약정증감'][i]
                        수정미결증감 = int(round(df1['미결제약정증감'][i] * df1['현재가'][i]))
                        temp = format(수정미결증감, ',')

                        item = QTableWidgetItem(temp)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.OID.value, item)

                    
                    call_시가 = df_call['시가'].values.tolist()
                    call_시가_node_list = self.make_node_list(call_시가)

                    call_피봇 = df_call['피봇'].values.tolist()
                    call_피봇_node_list = self.make_node_list(call_피봇)
                    
                    call_저가 = df_call['저가'].values.tolist()
                    call_저가_node_list = self.make_node_list(call_저가)

                    call_고가 = df_call['고가'].values.tolist()
                    call_고가_node_list = self.make_node_list(call_고가)
                    
                    put_시가 = df_put['시가'].values.tolist()
                    put_시가_node_list = self.make_node_list(put_시가)

                    put_피봇 = df_put['피봇'].values.tolist()
                    put_피봇_node_list = self.make_node_list(put_피봇)
                    
                    put_저가 = df_put['저가'].values.tolist()
                    put_저가_node_list = self.make_node_list(put_저가)

                    put_고가 = df_put['고가'].values.tolist()
                    put_고가_node_list = self.make_node_list(put_고가)                    
                    
                    self.opt_high_low_list_update()

                    '''
                    str = '[{0:02d}:{1:02d}:{2:02d}] call_저가 list in t2301 refresh = {3}\r'.format(dt.hour, dt.minute, dt.second, call_저가)
                    #self.textBrowser.append(str)
                    print(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] call_고가 list in t2301 refresh = {3}\r'.format(dt.hour, dt.minute, dt.second, call_고가)
                    #self.textBrowser.append(str)
                    print(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] put_저가 list in t2301 refresh = {3}\r'.format(dt.hour, dt.minute, dt.second, put_저가)
                    #self.textBrowser.append(str)
                    print(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] put_고가 list in t2301 refresh = {3}\r'.format(dt.hour, dt.minute, dt.second, put_고가)
                    #self.textBrowser.append(str)
                    print(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2301 refresh = {3}\r'.format(dt.hour, dt.minute, dt.second, high_low_list)
                    #self.textBrowser.append(str)
                    print(str) 
                    '''

                    if not flag_checkBox_HS:

                        for i in range(option_pairs_count):

                            if df['저가'][i] < df['고가'][i]:
                                저가 = df['저가'][i]
                                고가 = df['고가'][i]                        
                            else:
                                저가 = 0.0
                                고가 = 0.0

                            df_call.at[i, '저가'] = 저가
                            빈도수 = moving_list.count(저가)

                            if 1.20 < 저가 < 10.0:
                                item_str = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_str)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(저가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                            df_call.at[i, '고가'] = 고가
                            빈도수 = moving_list.count(고가)

                            if 1.20 < 고가 < 10.0:
                                item_str = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_str)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(고가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_call.setItem(i, Option_column.고가.value, item)

                            if df1['저가'][i] < df1['고가'][i]:
                                저가 = df1['저가'][i]
                                고가 = df1['고가'][i]                        
                            else:
                                저가 = 0.0
                                고가 = 0.0

                            df_put.at[i, '저가'] = 저가
                            빈도수 = moving_list.count(저가)

                            if 1.20 < 저가 < 10.0:
                                item_str = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_str)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(저가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                            df_put.at[i, '고가'] = 고가
                            빈도수 = moving_list.count(고가)

                            if 1.20 < 고가 < 10.0:
                                item_str = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                                item = QTableWidgetItem(item_str)
                            else:
                                item = QTableWidgetItem("{0:.2f}".format(고가))

                            item.setTextAlignment(Qt.AlignCenter)

                            if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                                item.setBackground(QBrush(옅은회색))
                            else:
                                item.setBackground(QBrush(흰색))

                            self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                    else:
                        pass

                    if not flag_checkBox_HS:

                        # 주야간 선물전광판 데이타 요청
                        XQ = t2101(parent=self)
                        XQ.Query(종목코드=fut_code)

                        str = '[{0:02d}:{1:02d}:{2:02d}] 주간 선물전광판 갱신을 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(str)

                        #time.sleep(0.1)
                        QTest.qWait(100)

                        XQ = t2801(parent=self)
                        XQ.Query(종목코드=fut_code)

                        str = '[{0:02d}:{1:02d}:{2:02d}] 야간 선물전광판 갱신을 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(str)

                        #time.sleep(0.1)
                        QTest.qWait(100)
                    else:
                        pass
                                       
                else:                    
                    # EUREX 야간옵션 시세전광판
                    XQ = t2835(parent=self)
                    XQ.Query(월물=t2835_month_info)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간옵션 전광판 갱신을 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(str)                    
            
            if ResizeRowsToContents:
                self.tableWidget_call.resizeRowsToContents()
            else:
                pass
            self.tableWidget_call.resizeColumnsToContents()

            if ResizeRowsToContents:
                self.tableWidget_put.resizeRowsToContents()
            else:
                pass
            self.tableWidget_put.resizeColumnsToContents()

        elif szTrCode == 't2801':

            df = result[0]

            if pre_start:

                if df['종합지수전일대비구분'] == '5':

                    jisu_str = "KOSPI: {0} (-{1:.2f}, {2:0.1f}%)".format(format(df['종합지수'], ','), df['종합지수전일대비'], df['종합지수등락율'])
                    self.label_kospi.setText(jisu_str)
                    self.label_kospi.setStyleSheet('background-color: black ; color: lightskyblue')

                elif df['종합지수전일대비구분'] == '2':

                    jisu_str = "KOSPI: {0} ({1:.2f}, {2:0.1f}%)".format(format(df['종합지수'], ','), df['종합지수전일대비'], df['종합지수등락율'])
                    self.label_kospi.setText(jisu_str)
                    self.label_kospi.setStyleSheet('background-color: black ; color: pink')
                else:
                    pass
            else:
                pass

            # 주간 데이타를 가져옴
            kp200_현재가 = df['KOSPI200지수']           
            item = QTableWidgetItem("{0:.2f}".format(df['KOSPI200지수']))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(2, Futures_column.현재가.value, item)

            # kp200 COREVAL 리스트 만듬
            if KP200_전일종가 == 0:
                KP200_전일종가 = df['KOSPI200지수']
            else:
                pass
            
            kp200_realdata['종가'] = KP200_전일종가

            item = QTableWidgetItem("{0:.2f}".format(KP200_전일종가))
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(2, Futures_column.종가.value, item)
            
            if not NightTime:
                atm_str = self.get_atm_str(kp200_현재가)
            else:
                atm_str = self.get_atm_str(kp200_현재가)

            atm_index = opt_actval.index(atm_str)
            old_atm_index = atm_index
                        
            # update 쓰레드 시간단축 목적 !!!
            selected_opt_list.append(opt_actval[option_pairs_count-1])

            if atm_str[-1] == '2' or atm_str[-1] == '7':

                atm_val = float(atm_str) + 0.5
            else:
                atm_val = float(atm_str)

            if call_open_list:

                for index in call_open_list:

                    if index > atm_index:
                        call_itm_count += 1
                    else:
                        pass
                    
                    if index == option_pairs_count - 1:
                        call_max_actval = True
                    else:
                        pass
            else:
                pass                

            if put_open_list:

                for index in put_open_list:

                    if index > atm_index:
                        put_itm_count += 1
                    else:
                        pass
                    
                    if index == option_pairs_count - 1:
                        put_max_actval = True
                    else:
                        pass
            else:
                pass                    

            # kp200 맥점 10개를 리스트로 만듬
            global KP200_COREVAL

            # KP200_COREVAL 리스트 기존데이타 삭제(초기화)
            del KP200_COREVAL[:]

            for i in range(6):

                KP200_COREVAL.append(atm_val - 2.5 * i + 1.25) 

            for i in range(1, 5):

                KP200_COREVAL.append(atm_val + 2.5 * i + 1.25)

            KP200_COREVAL.sort()
            print('t2801 KP200_COREVAL =', KP200_COREVAL)

            #atm_str = self.get_atm_str(KP200_전일종가)

            if atm_str[-1] == '2' or atm_str[-1] == '7':

                atm_val = float(atm_str) + 0.5
            else:
                atm_val = float(atm_str)       
            
            self.tableWidget_call.item(atm_index, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_call.item(atm_index, Option_column.행사가.value).setForeground(QBrush(검정색))
            self.tableWidget_put.item(atm_index, Option_column.행사가.value).setBackground(QBrush(노란색))
            self.tableWidget_put.item(atm_index, Option_column.행사가.value).setForeground(QBrush(검정색))            
            
            if not refresh_flag:

                #self.tableWidget_call.cellWidget(atm_index - 1, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)
                self.tableWidget_call.cellWidget(atm_index, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)
                #self.tableWidget_call.cellWidget(atm_index + 1, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)

                #self.tableWidget_put.cellWidget(atm_index - 1, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)
                self.tableWidget_put.cellWidget(atm_index, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)
                #self.tableWidget_put.cellWidget(atm_index + 1, 0).findChild(type(QCheckBox())).setCheckState(Qt.Checked)

                #selected_call = [atm_index - 1, atm_index, atm_index + 1]
                #selected_put = [atm_index - 1, atm_index, atm_index + 1]
                selected_call = [atm_index]
                selected_put = [atm_index]
            else:
                pass

            view_actval = opt_actval[atm_index-5:atm_index+6]

            call_atm_value = df_call.at[atm_index, '현재가']
            put_atm_value = df_put.at[atm_index, '현재가']

            str = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                fut_realdata['현재가'] - fut_realdata['KP200'],
                call_atm_value + put_atm_value,
                abs(call_atm_value - put_atm_value))
            self.label_atm.setText(str)
            
            if NightTime:
                
                item_str = '{0:0.2f}% \n {1:0.2f}% '.format(콜_수정미결퍼센트, 풋_수정미결퍼센트)

                item = QTableWidgetItem(item_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_quote.setItem(0, Quote_column.미결종합.value - 1, item)

                df_futures_graph.at[0, 'kp200'] = KP200_전일종가
                df_kp200_graph.at[0, 'price'] = KP200_전일종가

                # 주간 현재가가 야간 종가임
                df_futures_graph.at[0, 'price'] = fut_realdata['현재가']

                df_futures_graph.at[0, 'volume'] = 0

                if df['시가'] > 0:
                    df_futures_graph.at[GuardTime + 1, 'open'] = df['시가']
                else:
                    pass

                cme_realdata['전저'] = fut_realdata['저가']

                item = QTableWidgetItem("{0:.2f}".format(cme_realdata['전저']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.전저.value, item)

                cme_realdata['전고'] = fut_realdata['고가']

                item = QTableWidgetItem("{0:.2f}".format(cme_realdata['전고']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.전고.value, item)

                cme_realdata['종가'] = fut_realdata['현재가']

                item = QTableWidgetItem("{0:.2f}".format(cme_realdata['종가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.종가.value, item) 
            else:
                item = QTableWidgetItem("{0:.2f}".format(df['전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.종가.value, item)

            if df['시가'] > 0:

                cme_realdata['시가'] = df['시가']

                item = QTableWidgetItem("{0:.2f}".format(df['시가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(흰색))

                if df['시가'] > df['전일종가']:
                    item.setForeground(QBrush(적색))
                elif df['시가'] < df['전일종가']:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))

                self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                item = QTableWidgetItem("{0:.2f}".format(df['시가'] - df['전일종가']))
                item.setTextAlignment(Qt.AlignCenter)

                if df['시가'] > df['전일종가']:
                    item.setBackground(QBrush(콜기준가색))
                    item.setForeground(QBrush(검정색))
                elif df['시가'] < df['전일종가']:
                    item.setBackground(QBrush(풋기준가색))
                    item.setForeground(QBrush(흰색))
                else:
                    item.setBackground(QBrush(흰색))  

                self.tableWidget_fut.setItem(0, Futures_column.시가갭.value, item)

                if cme_realdata['전저'] > 0 and cme_realdata['전고'] > 0:

                    cme_realdata['피봇'] = self.calc_pivot(cme_realdata['전저'], cme_realdata['전고'], 
                                            df['전일종가'], cme_realdata['시가'])

                    item = QTableWidgetItem("{0:.2f}".format(cme_realdata['피봇']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)
                else:
                    pass
            else:
                pass   

            cme_realdata['저가'] = df['저가']   

            if df['저가'] > 0:
                item = QTableWidgetItem("{0:.2f}".format(df['저가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(옅은회색))
                self.tableWidget_fut.setItem(0, Futures_column.저가.value, item)
            else:
                pass

            if NightTime:
                cme_realdata['현재가'] = df['현재가']
            else:
                pass            

            item = QTableWidgetItem("{0:.2f}".format(df['현재가']))
            item.setTextAlignment(Qt.AlignCenter)

            if df['시가'] > 0:

                if df['현재가'] > df['시가']:
                    item.setForeground(QBrush(적색))
                elif df['현재가'] < df['시가']:
                    item.setForeground(QBrush(청색))
                else:
                    item.setForeground(QBrush(검정색))
            else:
                pass

            self.tableWidget_fut.setItem(0, Futures_column.현재가.value, item)

            if df['시가'] > 0:
                temp = (round((df['현재가'] - df['시가']), 2))

                item = QTableWidgetItem("{0:.2f}".format(temp))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.대비.value, item)
            else:
                pass
            
            if NightTime:

                선물_전저 = cme_realdata['전저']
                선물_전고 = cme_realdata['전고']

                # 주간 현재가가 야간종가 임
                선물_종가 = cme_realdata['종가']

                if cme_realdata['피봇'] > 0:
                    선물_피봇 = cme_realdata['피봇']
                else:
                    #선물_피봇 = cme_realdata['종가']
                    pass

                if df['시가'] > 0:
                    선물_시가 = df['시가']
                else:
                    선물_시가 = cme_realdata['종가']

                if df['저가'] > 0:
                    선물_저가 = df['저가']
                else:
                    #선물_저가 = cme_realdata['종가']
                    pass

                if df['현재가'] > 0:
                    선물_현재가 = df['현재가']
                else:
                    선물_현재가 = cme_realdata['종가']

                if df['고가'] > 0:
                    선물_고가 = df['고가']
                else:
                    #선물_고가 = cme_realdata['종가']
                    pass
            else:
                pass    
            
            if NightTime:

                df_futures_graph.at[0, 'kp200'] = fut_realdata['KP200']
                df_futures_graph.at[0, 'price'] = cme_realdata['종가']

                if cme_realdata['시가'] > 0:
                    df_futures_graph.at[GuardTime + 1, 'open'] = cme_realdata['시가']
                else:
                    pass

                df_futures_graph.at[0, 'volume'] = 0
            else:
                pass

            cme_realdata['고가'] = df['고가']           

            if df['고가'] > 0:
                item = QTableWidgetItem("{0:.2f}".format(df['고가']))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(옅은회색))
                self.tableWidget_fut.setItem(0, Futures_column.고가.value, item)
            else:
                pass

            cme_realdata['진폭'] = df['고가'] - df['저가']

            if cme_realdata['진폭'] > 0:
                item = QTableWidgetItem("{0:.2f}".format(cme_realdata['진폭']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.진폭.value, item)
            else:
                pass

            if df['거래량'] > 0:
                temp = format(df['거래량'], ',')
                item = QTableWidgetItem(temp)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(0, Futures_column.거래량.value, item)
            else:
                pass

            temp = format(df['미결제량'], ',')
            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)
            self.tableWidget_fut.setItem(0, Futures_column.OI.value, item)

            temp = format(df['미결제증감'], ',')
            item = QTableWidgetItem(temp)
            item.setTextAlignment(Qt.AlignCenter)

            if df['미결제증감'] < 0:
                item.setBackground(QBrush(라임))
            else:
                item.setBackground(QBrush(흰색))

            self.tableWidget_fut.setItem(0, Futures_column.OID.value, item)                        

            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

            columns = ['KP200', '전저', '전고', '종가', '피봇', '시가', '시가갭', '저가',
                       '현재가', '고가', '대비', '진폭', '거래량', '미결', '미결증감']

            df_fut = DataFrame(data=[cme_realdata, fut_realdata, kp200_realdata], columns=columns)

            print('df_fut', df_fut)

            # 선물 맥점 컬러 체크(실시간에서만 표시됨)
            if market_service:
                self.fut_node_color_clear()
                self.fut_oloh_check()
                self.fut_node_coloring()

                self.kp200_node_color_clear()
                self.kp200_node_coloring()

                self.kp200_low_node_coloring()
                self.kp200_high_node_coloring()
            else:
                pass
            
            if ResizeRowsToContents:  
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass                        
            self.tableWidget_fut.resizeColumnsToContents()             

            if refresh_flag:
            
                # 옵션 맥점 컬러링                
                str = '[{0:02d}:{1:02d}:{2:02d}] 옵션맥점 Refresh 컬러링을 시작합니다.\r'.format(adj_hour, adj_min, adj_sec)
                self.textBrowser.append(str)

                self.opt_all_node_coloring()    
                
                if ResizeRowsToContents:
                    self.tableWidget_call.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_call.resizeColumnsToContents()

                if ResizeRowsToContents:
                    self.tableWidget_put.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_put.resizeColumnsToContents() 

                self.tableWidget_fut.resizeRowsToContents()
                self.tableWidget_fut.resizeColumnsToContents()          
            else:
                pass

        elif szTrCode == 't2830':

            pass

        elif szTrCode == 't2835':

            # EUREX 야간옵션 시세전광판

            block, df, df1 = result

            if not refresh_flag:

                # open, ol/oh 초기화
                if NightTime:

                    call_open = [False] * option_pairs_count
                    put_open = [False] * option_pairs_count
                else:
                    pass

                # gap percent 초기화
                call_gap_percent = [NaN] * option_pairs_count
                put_gap_percent = [NaN] * option_pairs_count

                # db percent 초기화
                call_db_percent = [NaN] * option_pairs_count
                put_db_percent = [NaN] * option_pairs_count

                콜대비_퍼센트_평균 = 0
                풋대비_퍼센트_평균 = 0

                item = QTableWidgetItem('행사가')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.행사가.value, item)

                item = QTableWidgetItem('▲:▼\n✓')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.OLOH.value, item)

                item = QTableWidgetItem('시가갭\n(%)')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)

                item = QTableWidgetItem('대비\n(%)')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.대비.value, item)

                item = QTableWidgetItem('∑PVP')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.VP.value, item)

                item = QTableWidgetItem('∑OI')
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.OI.value, item)

                item = QTableWidgetItem('행사가')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.행사가.value, item)

                item = QTableWidgetItem('▲:▼\n✓')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.OLOH.value, item)

                item = QTableWidgetItem('시가갭\n(%)')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)

                item = QTableWidgetItem('대비\n(%)')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.대비.value, item)

                item = QTableWidgetItem('∑PVP')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.VP.value, item)

                item = QTableWidgetItem('∑OI')
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.OI.value, item)

                수정거래량 = 0

                for i in range(option_pairs_count):

                    # 수정거래량 초기화
                    df_call.at[i, '시가갭'] = 0
                    df_call.at[i, '대비'] = 0

                    # Call 처리
                    self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(흰색))

                    oloh_str = ''
                    item = QTableWidgetItem(oloh_str)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(i, Option_column.OLOH.value, item)

                    전저 = df_call.at[i, '저가']
                    df_call.at[i, '전저'] = 전저

                    if 전저 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전저))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전저))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.전저.value, item)

                    전고 = df_call.at[i, '고가']
                    df_call.at[i, '전고'] = 전고

                    if 전고 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전고))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전고))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.전고.value, item)

                    # to be check !!!
                    '''
                    if 18 <= dt.hour < 24 or 0 <= dt.hour < 4:
                        
                        시가 = df['시가'][i]
                    else:
                        시가 = 0.0
                    '''
                    
                    시가 = df['시가'][i]
                    df_call.at[i, '시가'] = 시가

                    종가 = df_call.at[i, '현재가']
                    df_call.at[i, '종가'] = 종가

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.종가.value, item)

                    #df_call_price_graph.iat[0, i] = 종가
                    df_call_graph[i].at[0, 'open'] = 종가
                    df_call_graph[i].at[0, 'price'] = 종가

                    현재가 = df['현재가'][i]
                    df_call.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.현재가.value, item)

                    if df['저가'][i] < df['고가'][i]:
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    
                    df_call.at[i, '저가'] = 저가
                    
                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                    df_call.at[i, '고가'] = 고가
                    
                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_call.setItem(i, Option_column.고가.value, item)

                    if NightTime:

                        if df['저가'][i] < df['고가'][i]:
                            call_open[i] = True
                            self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    df_call.at[i, '진폭'] = 진폭

                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.진폭.value, item)
                    
                    if 시가 > opt_search_start_value and df['저가'][i] < df['고가'][i]:
                        call_open_list.append(i)
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:

                            self.tableWidget_call.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_call.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        #df_call_price_graph.iat[GuardTime + 1, i] = 시가
                        df_call_graph[i].at[GuardTime + 1, 'open'] = 시가
                        df_call_graph[i].at[GuardTime + 1, 'price'] = 시가

                        시가갭 = 시가 - 종가
                        df_call.at[i, '시가갭'] = 시가갭

                        대비 = round((현재가 - 시가), 2)
                        df_call.at[i, '대비'] = 대비

                        if 시가 > 0 and df['저가'][i] < df['고가'][i]:

                            call_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, call_gap_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            call_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(대비, call_db_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_str = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                            gap_str = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.대비.value, item)

                        피봇 = self.calc_pivot(전저, 전고, 종가, 시가)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가 = 0.0
                        피봇 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.대비.value, item)

                        self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(흰색))
                        self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))

                    df_call.at[i, '피봇'] = 피봇

                    if 시가 > 0 and df['저가'][i] < df['고가'][i]:
                        self.tableWidget_call.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        self.tableWidget_call.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if df['현재가'][i] <= 시가갭:

                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * df['현재가'][i])
                    else:

                        수정거래량 = int((df['매수잔량'][i] - df['매도잔량'][i]) * (df['현재가'][i] - 시가갭))

                    # 수정거래량 초기화
                    df_call.at[i, '수정거래량'] = 0

                    # t2835에 미결항목이 없음
                    df_call.at[i, '순미결'] = 0
                    df_call.at[i, '수정미결'] = 0
                    df_call.at[i, '수정미결증감'] = 0

                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.VP.value, item)
                    
                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                    df_call_total_graph.at[0, 'volume'] = 0

                    # Put 처리
                    df_put.at[i, '시가갭'] = 0
                    df_put.at[i, '대비'] = 0

                    self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(흰색))

                    item = QTableWidgetItem(oloh_str)
                    item.setBackground(QBrush(흰색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(i, Option_column.OLOH.value, item)

                    전저 = df_put.at[i, '저가']
                    df_put.at[i, '전저'] = 전저

                    if 전저 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전저))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전저))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.전저.value, item)

                    전고 = df_put.at[i, '고가']
                    df_put.at[i, '전고'] = 전고

                    if 전고 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(전고))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(전고))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.전고.value, item)

                    # to be check !!!
                    '''
                    if 18 <= dt.hour < 24 or 0 <= dt.hour < 4:
                        
                        시가 = df1['시가'][i]
                    else:
                        시가 = 0.0
                    '''

                    시가 = df1['시가'][i]
                    df_put.at[i, '시가'] = 시가

                    종가 = df_put.at[i, '현재가']
                    df_put.at[i, '종가'] = 종가

                    if 종가 >= 100:
                        item = QTableWidgetItem("{0:0.1f}".format(종가))
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(종가))

                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.종가.value, item)

                    #df_put_price_graph.iat[0, i] = 종가
                    df_put_graph[i].at[0, 'price'] = 종가

                    현재가 = df1['현재가'][i]
                    df_put.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.현재가.value, item)

                    if df1['저가'][i] < df1['고가'][i]:
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    
                    df_put.at[i, '저가'] = 저가

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                    df_put.at[i, '고가'] = 고가
                    
                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_put.setItem(i, Option_column.고가.value, item)

                    if NightTime:

                        if df1['저가'][i] < df1['고가'][i]:

                            put_open[i] = True
                            self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        else:
                            pass
                    else:
                        pass

                    진폭 = 고가 - 저가
                    df_put.at[i, '진폭'] = 진폭

                    item = QTableWidgetItem("{0:.2f}".format(진폭))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.진폭.value, item)
                    
                    if 시가 > opt_search_start_value and df1['저가'][i] < df1['고가'][i]:
                        put_open_list.append(i)
                    else:
                        pass

                    if 시가 > 0:

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 시가 > 종가:
                            item.setForeground(QBrush(적색))
                        elif 시가 < 종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        if 시가 in COREVAL:

                            self.tableWidget_put.item(i, Option_column.시가.value).setBackground(QBrush(대맥점색))
                            self.tableWidget_put.item(i, Option_column.시가.value).setForeground(QBrush(검정색))
                        else:
                            pass

                        #df_put_price_graph.iat[GuardTime + 1, i] = 시가
                        df_put_graph[i].at[GuardTime + 1, 'open'] = 시가
                        df_put_graph[i].at[GuardTime + 1, 'price'] = 시가

                        시가갭 = 시가 - 종가
                        df_put.at[i, '시가갭'] = 시가갭

                        대비 = 현재가 - 시가
                        df_put.at[i, '대비'] = 대비

                        if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:

                            put_gap_percent[i] = (시가 / 종가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, put_gap_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            put_db_percent[i] = (현재가 / 시가 - 1) * 100

                            gap_str = "{0:.2f}\n({1:.0f}%)".format(대비, put_db_percent[i])

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)
                        else:
                            gap_str = "{0:.2f}".format(시가갭)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                            gap_str = "{0:.2f}".format(대비)

                            item = QTableWidgetItem(gap_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.대비.value, item)

                        피봇 = self.calc_pivot(전저, 전고, 종가, 시가)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가 = 0.0
                        피봇 = 0.0
                        시가갭 = 0.0
                        대비 = 0.0

                        item = QTableWidgetItem("{0:.2f}".format(시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.시가갭.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.대비.value, item)

                        self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(흰색))
                        self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))

                    df_put.at[i, '피봇'] = 피봇

                    if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:
                        self.tableWidget_put.item(i, Option_column.행사가.value).setBackground(QBrush(라임))
                        self.tableWidget_put.item(i, Option_column.행사가.value).setForeground(QBrush(검정색))
                    else:
                        pass

                    if df1['현재가'][i] <= 시가갭:

                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * df1['현재가'][i])
                    else:

                        수정거래량 = int((df1['매수잔량'][i] - df1['매도잔량'][i]) * (df1['현재가'][i] - 시가갭))

                    # 수정거래량 초기화
                    df_put.at[i, '수정거래량'] = 0

                    # t2835에 미결항목이 없음
                    df_put.at[i, '순미결'] = 0
                    df_put.at[i, '수정미결'] = 0
                    df_put.at[i, '수정미결증감'] = 0

                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.VP.value, item)

                    temp = format(0, ',')

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                    item = QTableWidgetItem(temp)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.OID.value, item)

                    df_put_total_graph.at[0, 'volume'] = 0
                
                print('\r')
                print('t2835 야간 전광판 콜 데이타 = ', df_call)
                print('\r')
                print('t2835 야간 전광판 풋 데이타 = ', df_put)
                print('\r')
                print('t2835 call open list = ', call_open_list, len(call_open_list))
                print('\r')
                print('t2835 put open list = ', put_open_list, len(put_open_list))
                print('\r')
                '''
                self.tableWidget_call.item(atm_index, Option_column.행사가.value).setBackground(QBrush(노란색))
                self.tableWidget_call.item(atm_index, Option_column.행사가.value).setForeground(QBrush(검정색))
                self.tableWidget_put.item(atm_index, Option_column.행사가.value).setBackground(QBrush(노란색))
                self.tableWidget_put.item(atm_index, Option_column.행사가.value).setForeground(QBrush(검정색))
                '''
                call_atm_value = df_call.at[atm_index, '현재가']
                put_atm_value = df_put.at[atm_index, '현재가']

                str = '{0:.2f}({1:.2f}:{2:.2f})'.format(
                    fut_realdata['현재가'] - fut_realdata['KP200'],
                    call_atm_value + put_atm_value,
                    abs(call_atm_value - put_atm_value))
                self.label_atm.setText(str)             

                call_전저 = df_call['전저'].values.tolist()
                call_전저_node_list = self.make_node_list(call_전저)

                call_전고 = df_call['전고'].values.tolist()
                call_전고_node_list = self.make_node_list(call_전고)

                call_종가 = df_call['종가'].values.tolist()
                call_종가_node_list = self.make_node_list(call_종가)
                
                call_피봇 = df_call['피봇'].values.tolist()
                call_피봇_node_list = self.make_node_list(call_피봇)

                call_시가 = df_call['시가'].values.tolist()
                call_시가_node_list = self.make_node_list(call_시가)
                
                call_저가 = df_call['저가'].values.tolist()
                call_저가_node_list = self.make_node_list(call_저가)

                call_고가 = df_call['고가'].values.tolist()
                call_고가_node_list = self.make_node_list(call_고가)
                
                call_진폭 = df_call['진폭'].values.tolist()
                진폭최대값 = max(call_진폭)
                max_str = '{0:.2f}'.format(진폭최대값)

                item = QTableWidgetItem(max_str)
                self.tableWidget_call.setHorizontalHeaderItem(Option_column.진폭.value, item)

                put_전저 = df_put['전저'].values.tolist()
                put_전저_node_list = self.make_node_list(put_전저)

                put_전고 = df_put['전고'].values.tolist()
                put_전고_node_list = self.make_node_list(put_전고)

                put_종가 = df_put['종가'].values.tolist()
                put_종가_node_list = self.make_node_list(put_종가)
                
                put_피봇 = df_put['피봇'].values.tolist()
                put_피봇_node_list = self.make_node_list(put_피봇)

                put_시가 = df_put['시가'].values.tolist()
                put_시가_node_list = self.make_node_list(put_시가)
                
                put_저가 = df_put['저가'].values.tolist()
                put_저가_node_list = self.make_node_list(put_저가)

                put_고가 = df_put['고가'].values.tolist()
                put_고가_node_list = self.make_node_list(put_고가)
                
                put_진폭 = df_put['진폭'].values.tolist()
                진폭최대값 = max(put_진폭)
                max_str = '{0:.2f}'.format(진폭최대값)

                item = QTableWidgetItem(max_str)
                self.tableWidget_put.setHorizontalHeaderItem(Option_column.진폭.value, item)

                self.opt_high_low_list_update()

                str = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2835 = {3}\r'.format(dt.hour, dt.minute, dt.second, high_low_list)
                #self.textBrowser.append(str)
                print(str)

                #중심가 계산
                CENTER_VAL1 = round((df_call.at[atm_index - 5, '종가'] + df_put.at[atm_index - 5, '종가'])/2, 2)
                CENTER_VAL2 = round((df_call.at[atm_index - 4, '종가'] + df_put.at[atm_index - 4, '종가'])/2, 2)
                CENTER_VAL3 = round((df_call.at[atm_index - 3, '종가'] + df_put.at[atm_index - 3, '종가'])/2, 2)
                CENTER_VAL4 = round((df_call.at[atm_index - 2, '종가'] + df_put.at[atm_index - 2, '종가'])/2, 2)
                CENTER_VAL5 = round((df_call.at[atm_index - 1, '종가'] + df_put.at[atm_index - 1, '종가'])/2 , 2)
                CENTER_VAL = round((df_call.at[atm_index, '종가'] + df_put.at[atm_index, '종가'])/2 , 2)
                CENTER_VAL6 = round((df_call.at[atm_index + 1, '종가'] + df_put.at[atm_index + 1, '종가'])/2 , 2)
                CENTER_VAL7 = round((df_call.at[atm_index + 2, '종가'] + df_put.at[atm_index + 2, '종가'])/2 , 2)
                CENTER_VAL8 = round((df_call.at[atm_index + 3, '종가'] + df_put.at[atm_index + 3, '종가'])/2 , 2)
                CENTER_VAL9 = round((df_call.at[atm_index + 4, '종가'] + df_put.at[atm_index + 4, '종가'])/2 , 2)
                CENTER_VAL10 = round((df_call.at[atm_index + 5, '종가'] + df_put.at[atm_index + 5, '종가'])/2 , 2)
                
                # 옵션 양합표시
                atm_minus_5 = round((df_call.at[atm_index - 5, '현재가'] + df_put.at[atm_index - 5, '현재가']), 2)
                atm_minus_4 = round((df_call.at[atm_index - 4, '현재가'] + df_put.at[atm_index - 4, '현재가']), 2)
                atm_minus_3 = round((df_call.at[atm_index - 3, '현재가'] + df_put.at[atm_index - 3, '현재가']), 2)
                atm_minus_2 = round((df_call.at[atm_index - 2, '현재가'] + df_put.at[atm_index - 2, '현재가']), 2)
                atm_minus_1 = round((df_call.at[atm_index - 1, '현재가'] + df_put.at[atm_index - 1, '현재가']) , 2)
                atm_zero_sum = round((df_call.at[atm_index, '현재가'] + df_put.at[atm_index, '현재가']) , 2)
                atm_zero_cha = round((df_call.at[atm_index, '현재가'] - df_put.at[atm_index, '현재가']) , 2)
                atm_plus_1 = round((df_call.at[atm_index + 1, '현재가'] + df_put.at[atm_index + 1, '현재가']) , 2)
                atm_plus_2 = round((df_call.at[atm_index + 2, '현재가'] + df_put.at[atm_index + 2, '현재가']) , 2)
                atm_plus_3 = round((df_call.at[atm_index + 3, '현재가'] + df_put.at[atm_index + 3, '현재가']) , 2)
                atm_plus_4 = round((df_call.at[atm_index + 4, '현재가'] + df_put.at[atm_index + 4, '현재가']) , 2)
                atm_plus_5 = round((df_call.at[atm_index + 5, '현재가'] + df_put.at[atm_index + 5, '현재가']) , 2)
                
                atm_list = []
                atm_list.append(atm_minus_5)
                atm_list.append(atm_minus_4)
                atm_list.append(atm_minus_3)
                atm_list.append(atm_minus_2)
                atm_list.append(atm_minus_1)
                atm_list.append(atm_zero_sum)
                atm_list.append(atm_plus_1)
                atm_list.append(atm_plus_2)
                atm_list.append(atm_plus_3)
                atm_list.append(atm_plus_4) 
                atm_list.append(atm_plus_5)    

                min_index = atm_list.index(min(atm_list)) + atm_index - 5

                # 콜에 중심가 표시
                val = df_call.at[atm_index - 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL1))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index - 5, Option_column.기준가.value, item) 

                val = df_call.at[atm_index - 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL2))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index - 4, Option_column.기준가.value, item) 

                val = df_call.at[atm_index - 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL3))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index - 3, Option_column.기준가.value, item) 

                val = df_call.at[atm_index - 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL4))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index - 2, Option_column.기준가.value, item)  

                val = df_call.at[atm_index - 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL5))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index - 1, Option_column.기준가.value, item)            

                val = df_call.at[atm_index, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index, Option_column.기준가.value, item)            

                val = df_call.at[atm_index + 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL6))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index + 1, Option_column.기준가.value, item)

                val = df_call.at[atm_index + 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL7))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index + 2, Option_column.기준가.value, item)

                val = df_call.at[atm_index + 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL8))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index + 3, Option_column.기준가.value, item)

                val = df_call.at[atm_index + 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL9))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index + 4, Option_column.기준가.value, item)

                val = df_call.at[atm_index + 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL10))
                item.setTextAlignment(Qt.AlignCenter)
                #item.setBackground(QBrush(라임))
                #item.setForeground(QBrush(검정색))
                self.tableWidget_call.setItem(atm_index + 5, Option_column.기준가.value, item)

                # 풋 양합표시
                val = df_put.at[atm_index - 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_5))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index - 5, Option_column.기준가.value, item)

                val = df_put.at[atm_index - 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_4))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index - 4, Option_column.기준가.value, item)

                val = df_put.at[atm_index - 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_3))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index - 3, Option_column.기준가.value, item)

                val = df_put.at[atm_index - 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_2))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index - 2, Option_column.기준가.value, item)    

                val = df_put.at[atm_index - 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_1))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index - 1, Option_column.기준가.value, item)            

                val = df_put.at[atm_index, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_zero_sum))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(노란색))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index, Option_column.기준가.value, item)            

                val = df_put.at[atm_index + 1, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_1))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index + 1, Option_column.기준가.value, item)

                val = df_put.at[atm_index + 2, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_2))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index + 2, Option_column.기준가.value, item)

                val = df_put.at[atm_index + 3, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_3))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index + 3, Option_column.기준가.value, item)

                val = df_put.at[atm_index + 4, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_4))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index + 4, Option_column.기준가.value, item)

                val = df_put.at[atm_index + 5, '기준가']
                item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_5))
                item.setTextAlignment(Qt.AlignCenter)
                item.setBackground(QBrush(라임))
                item.setForeground(QBrush(검정색))
                self.tableWidget_put.setItem(atm_index + 5, Option_column.기준가.value, item)

                if min_index != atm_index:

                    #self.tableWidget_call.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
                    #self.tableWidget_call.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
                    self.tableWidget_put.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
                    self.tableWidget_put.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
                else:
                    pass                
                
                str = '[{0:02d}:{1:02d}:{2:02d}] Screen Update 쓰레드가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                self.textBrowser.append(str)
                print(str)

                if ResizeRowsToContents:
                    self.tableWidget_call.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_call.resizeColumnsToContents()

                if ResizeRowsToContents:
                    self.tableWidget_put.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_put.resizeColumnsToContents()

                if ResizeRowsToContents:
                    self.tableWidget_fut.resizeRowsToContents()
                else:
                    pass  
                self.tableWidget_fut.resizeColumnsToContents()                
                
                self.screen_update_worker.daemon = True
                self.screen_update_worker.start()
                
                refresh_flag = True

                self.pushButton_add.setStyleSheet("background-color: lawngreen")
                self.pushButton_add.setText('Refresh')                
            else:
                # Refresh
                if not flag_checkBox_HS:
                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간옵션 전광판을 갱신합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)
                else:
                    pass

                del call_open_list[:]
                del put_open_list[:]

                for i in range(option_pairs_count):

                    # 콜 데이타 획득
                    종가 = df_call.at[i, '종가']

                    시가 = df['시가'][i]
                    df_call.at[i, '시가'] = 시가

                    item = QTableWidgetItem("{0:.2f}".format(시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(i, Option_column.시가.value, item)

                    if 시가 > 0:

                        시가갭 = 시가 - 종가
                        df_call.at[i, '시가갭'] = 시가갭

                        피봇 = self.calc_pivot(df_call.at[i, '전저'], df_call.at[i, '전고'], 종가, 시가)
                        df_call.at[i, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가갭 = 0
                        df_call.at[i, '시가갭'] = 시가갭

                    현재가 = df['현재가'][i]
                    df_call.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_call.setItem(i, Option_column.현재가.value, item)

                    if df['저가'][i] < df['고가'][i]:
                        저가 = df['저가'][i]
                        고가 = df['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0

                    df_call.at[i, '저가'] = 저가

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                    df_call.at[i, '고가'] = 고가

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_call.setItem(i, Option_column.고가.value, item)
                    
                    if 시가 > 0 and df['저가'][i] < df['고가'][i]:
                        call_open_list.append(i)
                    else:
                        pass

                    # 풋 데이타 획득
                    종가 = df_put.at[i, '종가']

                    시가 = df1['시가'][i]
                    df_put.at[i, '시가'] = 시가

                    item = QTableWidgetItem("{0:.2f}".format(시가))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(i, Option_column.시가.value, item)

                    if 시가 > 0:

                        시가갭 = 시가 - 종가
                        df_put.at[i, '시가갭'] = 시가갭

                        피봇 = self.calc_pivot(df_put.at[i, '전저'], df_put.at[i, '전고'], 종가, 시가)
                        df_put.at[i, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(i, Option_column.피봇.value, item)
                    else:
                        시가갭 = 0
                        df_put.at[i, '시가갭'] = 시가갭

                    현재가 = df1['현재가'][i]
                    df_put.at[i, '현재가'] = 현재가

                    item = QTableWidgetItem("{0:.2f}".format(현재가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if 시가 > 0:

                        if 시가 < 현재가:
                            item.setForeground(QBrush(적색))
                        elif 시가 > 현재가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))
                    else:
                        item.setForeground(QBrush(검정색))

                    self.tableWidget_put.setItem(i, Option_column.현재가.value, item)

                    if df1['저가'][i] < df1['고가'][i]:
                        저가 = df1['저가'][i]
                        고가 = df1['고가'][i]
                    else:
                        저가 = 0.0
                        고가 = 0.0
                    
                    df_put.at[i, '저가'] = 저가

                    item = QTableWidgetItem("{0:.2f}".format(저가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                    df_put.at[i, '고가'] = 고가

                    item = QTableWidgetItem("{0:.2f}".format(고가))
                    item.setTextAlignment(Qt.AlignCenter)

                    if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                        item.setBackground(QBrush(옅은회색))
                    else:
                        item.setBackground(QBrush(흰색))

                    self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                    
                    if 시가 > 0 and df1['저가'][i] < df1['고가'][i]:
                        put_open_list.append(i)
                    else:
                        pass

                # Node 리스트 갱신
                call_시가 = df_call['시가'].values.tolist()
                call_시가_node_list = self.make_node_list(call_시가)

                call_피봇 = df_call['피봇'].values.tolist()
                call_피봇_node_list = self.make_node_list(call_피봇)
                
                call_저가 = df_call['저가'].values.tolist()
                call_저가_node_list = self.make_node_list(call_저가)

                call_고가 = df_call['고가'].values.tolist()
                call_고가_node_list = self.make_node_list(call_고가)
                
                put_시가 = df_put['시가'].values.tolist()
                put_시가_node_list = self.make_node_list(put_시가)

                put_피봇 = df_put['피봇'].values.tolist()
                put_피봇_node_list = self.make_node_list(put_피봇)
                
                put_저가 = df_put['저가'].values.tolist()
                put_저가_node_list = self.make_node_list(put_저가)

                put_고가 = df_put['고가'].values.tolist()
                put_고가_node_list = self.make_node_list(put_고가)
                
                self.opt_high_low_list_update()

                if not flag_checkBox_HS:
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] high low list in t2835 refresh = {3}\r'.format(adj_hour, adj_min, adj_sec, high_low_list)
                    #self.textBrowser.append(str)
                    print(str)

                    for i in range(option_pairs_count):

                        if df['저가'][i] < df['고가'][i]:
                            저가 = df['저가'][i]
                            고가 = df['고가'][i]
                        else:
                            저가 = 0.0
                            고가 = 0.0

                        df_call.at[i, '저가'] = 저가
                        빈도수 = moving_list.count(저가)                    

                        if 1.20 < 저가 < 10.0:
                            item_str = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_str)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(저가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(i, Option_column.저가.value, item)

                        df_call.at[i, '고가'] = 고가
                        빈도수 = moving_list.count(고가)

                        if 1.20 < 고가 < 10.0:
                            item_str = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_str)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(고가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_call.setItem(i, Option_column.고가.value, item)

                        if df1['저가'][i] < df1['고가'][i]:
                            저가 = df1['저가'][i]
                            고가 = df1['고가'][i]
                        else:
                            저가 = 0.0
                            고가 = 0.0

                        df_put.at[i, '저가'] = 저가
                        빈도수 = moving_list.count(저가)                    

                        if 1.20 < 저가 < 10.0:
                            item_str = '{0:.2f}'.format(저가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_str)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(저가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(i, Option_column.저가.value, item)

                        df_put.at[i, '고가'] = 고가
                        빈도수 = moving_list.count(고가)                    

                        if 1.20 < 고가 < 10.0:
                            item_str = '{0:.2f}'.format(고가) + '\n(' + repr(빈도수) + ')'
                            item = QTableWidgetItem(item_str)
                        else:
                            item = QTableWidgetItem("{0:.2f}".format(고가))

                        item.setTextAlignment(Qt.AlignCenter)

                        if i == atm_index - 1 or i == atm_index or i == atm_index + 1:
                            item.setBackground(QBrush(옅은회색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_put.setItem(i, Option_column.고가.value, item)
                else:
                    pass

            if ResizeRowsToContents:
                self.tableWidget_call.resizeRowsToContents()
            else:
                pass        
            self.tableWidget_call.resizeColumnsToContents()

            if ResizeRowsToContents:
                self.tableWidget_put.resizeRowsToContents()
            else:
                pass
            self.tableWidget_put.resizeColumnsToContents()

            if not flag_checkBox_HS:
                # 주야간 선물전광판 데이타 요청
                XQ = t2101(parent=self)
                XQ.Query(종목코드=fut_code)
                print('t2101 요청')

                #time.sleep(0.1)
                QTest.qWait(100)

                XQ = t2801(parent=self)
                XQ.Query(종목코드=fut_code)
                print('t2801 요청')

                #time.sleep(0.1)
                QTest.qWait(100)
            else:
                pass

        elif szTrCode == 't8408':

            df = result

            print('\r')
            print('[t8408 cme data]')
            print('\r')
            print(df)
            print('\r')

            temp = df['현재가'].values.tolist()
            temp.reverse()
            temp1 = copy.deepcopy(temp)

            CME_전일종가 = temp1[1::2]
            
            print('[CME_전일종가] = \r', CME_전일종가)
            print('\r')

            str = '[{0:02d}:{1:02d}:{2:02d}] 야간선물 전일데이타 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
            self.textBrowser.append(str)           

        elif szTrCode == 't8415':

            block, df = result

            if block['단축코드'][0:3] == '101':

                pass
                
            elif block['단축코드'][0:3] == '201':

                for i in range(len(selected_call)):

                    if result['단축코드'][5:8] == df_call.at[selected_call[i], '행사가']:

                        pass
                    else:
                        pass

            elif block['단축코드'][0:3] == '301':

                for i in range(len(selected_put)):

                    if result['단축코드'][5:8] == df_put.at[selected_put[i], '행사가']:

                        pass
                    else:
                        pass
            else:
                pass

        elif szTrCode == 't8416':

            block, df = result

            global new_actval_up_count, new_actval_down_count, actval_increased

            str = '{0:02d}:{1:02d}:{2:02d}'.format(dt.hour, dt.minute, dt.second)
            self.label_msg.setText(str)

            if new_actval_up_count == 0 and new_actval_down_count == 0:

                item_str = '{0:d}'.format(real_option_pairs_count)
                item = QTableWidgetItem(item_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_call.setHorizontalHeaderItem(0, item)

                if ResizeRowsToContents:
                    self.tableWidget_call.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_call.resizeColumnsToContents()

                item_str = '{0:d}'.format(real_option_pairs_count)
                item = QTableWidgetItem(item_str)
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_put.setHorizontalHeaderItem(0, item) 

                if ResizeRowsToContents:
                    self.tableWidget_put.resizeRowsToContents()
                else:
                    pass
                self.tableWidget_put.resizeColumnsToContents()
            else:
                pass
            
            if new_actval_up_count > 0 or new_actval_down_count > 0:
                logger.debug('t8416 단축코드 = %s' % block['단축코드'])
                logger.debug('t8416 call count = %d' % t8416_call_count)
                logger.debug('t8416 call new_actval_up_count = %d' % new_actval_up_count)
                logger.debug('t8416 put count = %d' % t8416_put_count)
                logger.debug('t8416 call new_actval_down_count = %d' % new_actval_down_count)
            else:
                pass

            if block['단축코드'] == '':

                actval_increased = True

                #if t8416_call_count == 0:
                if new_actval_down_count == 0 and t8416_call_count < option_pairs_count:

                    new_actval_up_count += 1
                    t8416_call_count += 1

                    str = '[{0:02d}:{1:02d}:{2:02d}] 새로운 상방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_up_count)
                    #self.textBrowser.append(str)
                    print(str) 

                    # 추가된 행사가 갯수 표시
                    item_str = '(+' + '{0:d})'.format(new_actval_up_count) + '\n' + '{0:d}'.format(real_option_pairs_count)
                    item = QTableWidgetItem(item_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(0, item)

                    if ResizeRowsToContents:
                        self.tableWidget_call.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_call.resizeColumnsToContents()

                    item_str = '(+' + '{0:d})'.format(new_actval_up_count) + '\n' + '{0:d}'.format(real_option_pairs_count)
                    item = QTableWidgetItem(item_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(0, item)

                    if ResizeRowsToContents:
                        self.tableWidget_put.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_put.resizeColumnsToContents()
                else:
                    pass
                
                if new_actval_up_count > 0 and t8416_call_count == option_pairs_count:
                    t8416_put_count += 1
                else:
                    pass
                
                if new_actval_up_count == 0 and t8416_put_count == 0:

                    new_actval_down_count += 1 

                    str = '[{0:02d}:{1:02d}:{2:02d}] 새로운 하방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_down_count)
                    #self.textBrowser.append(str) 
                    print(str)  

                    # 추가된 행사가 갯수 표시
                    item_str =  '{0:d}'.format(real_option_pairs_count) + '\n' + '(+' + '{0:d})'.format(new_actval_down_count)
                    item = QTableWidgetItem(item_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setHorizontalHeaderItem(0, item)

                    if ResizeRowsToContents:
                        self.tableWidget_call.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_call.resizeColumnsToContents()

                    item_str = '{0:d}'.format(real_option_pairs_count) + '\n' + '(+' + '{0:d})'.format(new_actval_down_count)
                    item = QTableWidgetItem(item_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setHorizontalHeaderItem(0, item) 

                    if ResizeRowsToContents:
                        self.tableWidget_put.resizeRowsToContents()
                    else:
                        pass                   
                    self.tableWidget_put.resizeColumnsToContents()                  

                    if t8416_call_count == option_pairs_count - new_actval_down_count:

                        #if self.t8416_callworker.isRunning():
                        if True:

                            call_기준가 = df_call['기준가'].values.tolist()
                            call_월저 = df_call['월저'].values.tolist()
                            call_월고 = df_call['월고'].values.tolist()
                            call_전저 = df_call['전저'].values.tolist()
                            call_전고 = df_call['전고'].values.tolist()
                            call_종가 = df_call['종가'].values.tolist()
                            call_피봇 = df_call['피봇'].values.tolist()
                            call_시가 = df_call['시가'].values.tolist()
                            call_저가 = df_call['저가'].values.tolist()
                            call_고가 = df_call['고가'].values.tolist()

                            call_기준가_node_list = self.make_node_list(call_기준가)
                            call_월저_node_list = self.make_node_list(call_월저)
                            call_월고_node_list = self.make_node_list(call_월고)
                            call_전저_node_list = self.make_node_list(call_전저)
                            call_전고_node_list = self.make_node_list(call_전고)
                            call_종가_node_list = self.make_node_list(call_종가)
                            call_피봇_node_list = self.make_node_list(call_피봇)
                            call_시가_node_list = self.make_node_list(call_시가)
                            call_저가_node_list = self.make_node_list(call_저가)
                            call_고가_node_list = self.make_node_list(call_고가)

                            print('Call 전체 행사가 수신완료')

                            #self.t8416_callworker.terminate()
                            str = '[{0:02d}:{1:02d}:{2:02d}] Call 전체 행사가 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(str)                            

                            call_positionCell = self.tableWidget_call.item(atm_index + 9, 1)
                            self.tableWidget_call.scrollToItem(call_positionCell)

                            '''
                            #time.sleep(1.1)
                            #QTest.qWait(1100)
                            
                            self.t8416_putworker.daemon = True
                            self.t8416_putworker.start()                            
                            '''
                            print('t8416 put 요청시작...')

                            for i in range(option_pairs_count):
                                self.t8416_put_request(i)
                                #print('t8416 put {0}번째 event loop 시작\r'.format(i+1))
                                self.t8416_put_event_loop.exec_()
                        else:
                            pass
                    else:
                        pass                    
                else:
                    pass                
            else:
                pass
            
            if block['단축코드'][0:3] == '101':

                if not NightTime:

                    item = QTableWidgetItem("{0:.2f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)

                    item = QTableWidgetItem("{0:.2f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)

                    if int(current_str[0:2]) == 8 and int(current_str[3:5]) <= 59:
                        item = QTableWidgetItem("{0:.2f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)
                    else:
                        pass

                    if ResizeRowsToContents:
                        self.tableWidget_fut.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass

            elif block['단축코드'][0:3] == '201':

                if new_actval_up_count > 0:

                    str = '[{0:02d}:{1:02d}:{2:02d}] 새로운 상방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_up_count)
                    #self.textBrowser.append(str)
                    print(str)
                else:
                    pass

                if today_str != MONTH_FIRSTDAY:

                    df_call.at[t8416_call_count, '기준가'] = df['저가'][0]

                    if df['저가'][0] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.기준가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.기준가.value, item)

                    df_call.at[t8416_call_count, '월저'] = min(df['저가'])

                    if min(df['저가']) >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월저.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월저.value, item)

                    df_call.at[t8416_call_count, '월고'] = max(df['고가'])

                    if max(df['고가']) >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월고.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.월고.value, item)
                else:
                    pass

                df_call.at[t8416_call_count, '전저'] = block['전일저가']

                if block['전일저가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전저.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전저.value, item)

                df_call.at[t8416_call_count, '전고'] = block['전일고가']

                if block['전일고가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전고.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_call.setItem(t8416_call_count, Option_column.전고.value, item)
                
                if block['전일종가'] != df_call.at[t8416_call_count, '종가']:

                    df_call.at[t8416_call_count, '종가'] = block['전일종가']

                    if block['전일종가'] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.종가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.종가.value, item)

                    if t8416_call_count < option_pairs_count:
                        #df_call_price_graph.iat[0, t8416_call_count] = block['전일종가']
                        df_call_graph[t8416_call_count].at[0, 'price'] = block['전일종가']
                    else:
                        pass

                    #str = '[{0:02d}:{1:02d}:{2:02d}] t2301과 t8416의 콜[{3}] 종가가 상이합니다. !!!\r'.format(dt.hour, dt.minute, dt.second, t8416_call_count + 1)
                    #self.textBrowser.append(str)
                    #print(str)
                else:
                    pass                

                if not pre_start:

                    전저 = df_call.at[t8416_call_count, '전저']
                    전고 = df_call.at[t8416_call_count, '전고']
                    종가 = df_call.at[t8416_call_count, '종가']
                    시가 = df_call.at[t8416_call_count, '시가']
                    저가 = df_call.at[t8416_call_count, '저가']
                    고가 = df_call.at[t8416_call_count, '고가']
                    현재가 = df_call.at[t8416_call_count, '현재가']

                    if 시가 > 0: 

                        피봇 = self.calc_pivot(전저, 전고, 종가, 시가)
                        df_call.at[t8416_call_count, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.피봇.value, item)

                        시가갭 = 시가 - 종가
                        df_call.at[t8416_call_count, '시가갭'] = 시가갭

                        if 종가 > 0:

                            gap_percent = int((시가 / 종가 - 1) * 100)

                            item = QTableWidgetItem("{0:.2f}\n({1}%)".format(시가갭, gap_percent))
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(t8416_call_count, Option_column.시가갭.value, item)
                        else:
                            pass

                        대비 = 현재가 - 시가
                        df_call.at[t8416_call_count, '대비'] = 대비

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.대비.value, item)

                        진폭 = 고가 - 저가
                        df_call.at[t8416_call_count, '진폭'] = 진폭

                        item = QTableWidgetItem("{0:.2f}".format(진폭))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_call.setItem(t8416_call_count, Option_column.진폭.value, item)
                    else:
                        pass
                else:
                    pass

                str = '[{0:02d}:{1:02d}:{2:02d}] Call 행사가 {3}개중 {4}번째를 수신했습니다.\r'.\
                    format(dt.hour, dt.minute, dt.second, option_pairs_count, t8416_call_count + 1)

                self.textBrowser.append(str)

                t8416_call_count += 1

                print('Call 행사가 %d 개중 %d개 수신...' % (option_pairs_count, t8416_call_count))

                # t8416은 초당 1건 전송가능
                self.t8416_call_event_loop.exit()
                print('t8416_call_event_loop exit...')
                QTest.qWait(1000)
                
                # to be checked !!!
                if t8416_call_count == option_pairs_count:

                    #if self.t8416_callworker.isRunning():
                    if True:

                        call_기준가 = df_call['기준가'].values.tolist()
                        call_월저 = df_call['월저'].values.tolist()
                        call_월고 = df_call['월고'].values.tolist()
                        call_전저 = df_call['전저'].values.tolist()
                        call_전고 = df_call['전고'].values.tolist()
                        call_종가 = df_call['종가'].values.tolist()
                        call_피봇 = df_call['피봇'].values.tolist()
                        call_시가 = df_call['시가'].values.tolist()
                        call_저가 = df_call['저가'].values.tolist()
                        call_고가 = df_call['고가'].values.tolist()

                        call_기준가_node_list = self.make_node_list(call_기준가)
                        call_월저_node_list = self.make_node_list(call_월저)
                        call_월고_node_list = self.make_node_list(call_월고)
                        call_전저_node_list = self.make_node_list(call_전저)
                        call_전고_node_list = self.make_node_list(call_전고)
                        call_종가_node_list = self.make_node_list(call_종가)
                        call_피봇_node_list = self.make_node_list(call_피봇)
                        call_시가_node_list = self.make_node_list(call_시가)
                        call_저가_node_list = self.make_node_list(call_저가)
                        call_고가_node_list = self.make_node_list(call_고가)

                        print('Call 전체 행사가 수신완료')

                        #self.t8416_callworker.terminate()
                        str = '[{0:02d}:{1:02d}:{2:02d}] Call 전체 행사가 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(str)

                        call_positionCell = self.tableWidget_call.item(atm_index + 9, 1)
                        self.tableWidget_call.scrollToItem(call_positionCell)

                        '''
                        #time.sleep(1.1)
                        #QTest.qWait(1000)
                        #t8416_put_count += 1
                        
                        self.t8416_putworker.daemon = True
                        self.t8416_putworker.start()                        
                        '''
                        print('t8416 put 요청시작...')

                        for i in range(option_pairs_count):
                                self.t8416_put_request(i)
                                #print('t8416 put {0}번째 event loop 시작\r'.format(i+1))
                                self.t8416_put_event_loop.exec_()
                    else:
                        pass
                else:
                    pass
                
            elif block['단축코드'][0:3] == '301':

                if new_actval_down_count > 0:

                    str = '[{0:02d}:{1:02d}:{2:02d}] 새로운 하방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_down_count)
                    #self.textBrowser.append(str)
                    print(str)
                else:
                    pass

                if today_str != MONTH_FIRSTDAY:

                    df_put.at[t8416_put_count, '기준가'] = df['저가'][0]

                    if df['저가'][0] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.기준가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(df['저가'][0]))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.기준가.value, item)                    

                    df_put.at[t8416_put_count, '월저'] = min(df['저가'])

                    if min(df['저가']) >= 100:
                        
                        item = QTableWidgetItem("{0:0.1f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월저.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(min(df['저가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월저.value, item)

                    df_put.at[t8416_put_count, '월고'] = max(df['고가'])

                    if max(df['고가']) >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월고.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(max(df['고가'])))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.월고.value, item)
                else:
                    pass                

                df_put.at[t8416_put_count, '전저'] = block['전일저가']

                if block['전일저가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전저.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일저가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전저.value, item)

                df_put.at[t8416_put_count, '전고'] = block['전일고가']

                if block['전일고가'] >= 100:

                    item = QTableWidgetItem("{0:0.1f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전고.value, item)
                else:
                    item = QTableWidgetItem("{0:.2f}".format(block['전일고가']))
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_put.setItem(t8416_put_count, Option_column.전고.value, item)
                
                if block['전일종가'] != df_put.at[t8416_put_count, '종가']:

                    df_put.at[t8416_put_count, '종가'] = block['전일종가']

                    if block['전일종가'] >= 100:

                        item = QTableWidgetItem("{0:0.1f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.종가.value, item)
                    else:
                        item = QTableWidgetItem("{0:.2f}".format(block['전일종가']))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.종가.value, item)

                    if t8416_put_count < option_pairs_count:
                        #df_put_price_graph.iat[0, t8416_put_count] = block['전일종가']
                        df_put_graph[t8416_put_count].at[0, 'price'] = block['전일종가']
                    else:
                        pass

                    #str = '[{0:02d}:{1:02d}:{2:02d}] t2301과 t8416의 풋[{3}] 종가가 상이합니다. !!!\r'.format(dt.hour, dt.minute, dt.second, t8416_put_count + 1)
                    #self.textBrowser.append(str)
                    #print(str)
                else:
                    pass                

                if not pre_start:

                    전저 = df_put.at[t8416_put_count, '전저']
                    전고 = df_put.at[t8416_put_count, '전고']
                    종가 = df_put.at[t8416_put_count, '종가']
                    시가 = df_put.at[t8416_put_count, '시가']
                    저가 = df_put.at[t8416_put_count, '저가']
                    고가 = df_put.at[t8416_put_count, '고가']
                    현재가 = df_put.at[t8416_put_count, '현재가']

                    if 시가 > 0:

                        피봇 = self.calc_pivot(전저, 전고, 종가, 시가)
                        df_put.at[t8416_put_count, '피봇'] = 피봇

                        item = QTableWidgetItem("{0:.2f}".format(피봇))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.피봇.value, item)

                        시가갭 = 시가 - 종가
                        df_put.at[t8416_put_count, '시가갭'] = 시가갭

                        if 종가 > 0:

                            gap_percent = int((시가 / 종가 - 1) * 100)

                            item = QTableWidgetItem("{0:.2f}\n({1}%)".format(시가갭, gap_percent))
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(t8416_put_count, Option_column.시가갭.value, item)
                        else:
                            pass

                        대비 = 현재가 - 시가
                        df_put.at[t8416_put_count, '대비'] = 대비

                        item = QTableWidgetItem("{0:.2f}".format(대비))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.대비.value, item)

                        진폭 = 고가 - 저가
                        df_put.at[t8416_put_count, '진폭'] = 진폭

                        item = QTableWidgetItem("{0:.2f}".format(진폭))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_put.setItem(t8416_put_count, Option_column.진폭.value, item)
                    else:
                        pass
                else:
                    pass

                str = '[{0:02d}:{1:02d}:{2:02d}] Put 행사가 {3}개중 {4}번째를 수신했습니다.\r'.format(dt.hour, dt.minute, dt.second, 
                    option_pairs_count, t8416_put_count + 1)
                self.textBrowser.append(str)

                t8416_put_count += 1

                print('Put 행사가 %d 개중 %d개 수신...' % (option_pairs_count, t8416_put_count))

                self.t8416_put_event_loop.exit()
                print('t8416_put_event_loop exit...')
                QTest.qWait(1000)

                if t8416_put_count == option_pairs_count - new_actval_down_count:
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] Put 전체 행사가 수신완료 !!!\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(str)
                    print(str)

                    print('\r')
                    print('t8416 Call 전광판\r')
                    print(df_call)
                    print('\r')
                    print('t8416 Put 전광판\r')
                    print(df_put)
                    print('\r')
                    
                    put_기준가 = df_put['기준가'].values.tolist()
                    put_월저 = df_put['월저'].values.tolist()
                    put_월고 = df_put['월고'].values.tolist()
                    put_전저 = df_put['전저'].values.tolist()
                    put_전고 = df_put['전고'].values.tolist()
                    put_종가 = df_put['종가'].values.tolist()
                    put_피봇 = df_put['피봇'].values.tolist()
                    put_시가 = df_put['시가'].values.tolist()
                    put_저가 = df_put['저가'].values.tolist()
                    put_고가 = df_put['고가'].values.tolist()

                    put_기준가_node_list = self.make_node_list(put_기준가)
                    put_월저_node_list = self.make_node_list(put_월저)
                    put_월고_node_list = self.make_node_list(put_월고)
                    put_전저_node_list = self.make_node_list(put_전저)
                    put_전고_node_list = self.make_node_list(put_전고)
                    put_종가_node_list = self.make_node_list(put_종가)
                    put_피봇_node_list = self.make_node_list(put_피봇)
                    put_시가_node_list = self.make_node_list(put_시가)
                    put_저가_node_list = self.make_node_list(put_저가)
                    put_고가_node_list = self.make_node_list(put_고가)
                    
                    if ResizeRowsToContents:
                        self.tableWidget_put.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_put.resizeColumnsToContents()

                    #if self.t8416_putworker.isRunning():
                    if True:

                        #self.t8416_putworker.terminate()
                                                
                        put_positionCell = self.tableWidget_put.item(atm_index + 20, 1)
                        self.tableWidget_put.scrollToItem(put_positionCell)
                    else:
                        pass
                    
                    if new_actval_up_count > 0:

                        str = '[{0:02d}:{1:02d}:{2:02d}] 새로운 상방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_up_count)
                        self.textBrowser.append(str)
                        print(str)
                    else:
                        pass

                    if new_actval_down_count > 0:

                        str = '[{0:02d}:{1:02d}:{2:02d}] 새로운 하방 행사가 {3}개 추가됨 !!!\r'.format(dt.hour, dt.minute, dt.second, new_actval_down_count)
                        self.textBrowser.append(str)
                        print(str)
                    else:
                        pass                                    
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] 옵션 만기일은 {3}일 남았습니다.\r'.format(dt.hour, dt.minute, dt.second, 옵션잔존일)
                    self.textBrowser.append(str)
                    print(str)

                    #중심가 계산
                    CENTER_VAL1 = round((df_call.at[atm_index - 5, '종가'] + df_put.at[atm_index - 5, '종가'])/2, 2)
                    CENTER_VAL2 = round((df_call.at[atm_index - 4, '종가'] + df_put.at[atm_index - 4, '종가'])/2, 2)
                    CENTER_VAL3 = round((df_call.at[atm_index - 3, '종가'] + df_put.at[atm_index - 3, '종가'])/2, 2)
                    CENTER_VAL4 = round((df_call.at[atm_index - 2, '종가'] + df_put.at[atm_index - 2, '종가'])/2, 2)
                    CENTER_VAL5 = round((df_call.at[atm_index - 1, '종가'] + df_put.at[atm_index - 1, '종가'])/2 , 2)
                    CENTER_VAL = round((df_call.at[atm_index, '종가'] + df_put.at[atm_index, '종가'])/2 , 2)
                    CENTER_VAL6 = round((df_call.at[atm_index + 1, '종가'] + df_put.at[atm_index + 1, '종가'])/2 , 2)
                    CENTER_VAL7 = round((df_call.at[atm_index + 2, '종가'] + df_put.at[atm_index + 2, '종가'])/2 , 2)
                    CENTER_VAL8 = round((df_call.at[atm_index + 3, '종가'] + df_put.at[atm_index + 3, '종가'])/2 , 2)
                    CENTER_VAL9 = round((df_call.at[atm_index + 4, '종가'] + df_put.at[atm_index + 4, '종가'])/2 , 2)
                    CENTER_VAL10 = round((df_call.at[atm_index + 5, '종가'] + df_put.at[atm_index + 5, '종가'])/2 , 2)
                    
                    # 옵션 양합표시
                    atm_minus_5 = round((df_call.at[atm_index - 5, '현재가'] + df_put.at[atm_index - 5, '현재가']), 2)
                    atm_minus_4 = round((df_call.at[atm_index - 4, '현재가'] + df_put.at[atm_index - 4, '현재가']), 2)
                    atm_minus_3 = round((df_call.at[atm_index - 3, '현재가'] + df_put.at[atm_index - 3, '현재가']), 2)
                    atm_minus_2 = round((df_call.at[atm_index - 2, '현재가'] + df_put.at[atm_index - 2, '현재가']), 2)
                    atm_minus_1 = round((df_call.at[atm_index - 1, '현재가'] + df_put.at[atm_index - 1, '현재가']) , 2)
                    atm_zero_sum = round((df_call.at[atm_index, '현재가'] + df_put.at[atm_index, '현재가']) , 2)
                    atm_zero_cha = round((df_call.at[atm_index, '현재가'] - df_put.at[atm_index, '현재가']) , 2)
                    atm_plus_1 = round((df_call.at[atm_index + 1, '현재가'] + df_put.at[atm_index + 1, '현재가']) , 2)
                    atm_plus_2 = round((df_call.at[atm_index + 2, '현재가'] + df_put.at[atm_index + 2, '현재가']) , 2)
                    atm_plus_3 = round((df_call.at[atm_index + 3, '현재가'] + df_put.at[atm_index + 3, '현재가']) , 2)
                    atm_plus_4 = round((df_call.at[atm_index + 4, '현재가'] + df_put.at[atm_index + 4, '현재가']) , 2)
                    atm_plus_5 = round((df_call.at[atm_index + 5, '현재가'] + df_put.at[atm_index + 5, '현재가']) , 2)
                    
                    atm_list = []
                    atm_list.append(atm_minus_5)
                    atm_list.append(atm_minus_4)
                    atm_list.append(atm_minus_3)
                    atm_list.append(atm_minus_2)
                    atm_list.append(atm_minus_1)
                    atm_list.append(atm_zero_sum)
                    atm_list.append(atm_plus_1)
                    atm_list.append(atm_plus_2)
                    atm_list.append(atm_plus_3)
                    atm_list.append(atm_plus_4)
                    atm_list.append(atm_plus_5)   

                    min_index = atm_list.index(min(atm_list)) + atm_index - 5

                    # 콜에 중심가 표시
                    val = df_call.at[atm_index - 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL1))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index - 5, Option_column.기준가.value, item) 

                    val = df_call.at[atm_index - 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL2))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index - 4, Option_column.기준가.value, item) 

                    val = df_call.at[atm_index - 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL3))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index - 3, Option_column.기준가.value, item) 

                    val = df_call.at[atm_index - 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL4))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index - 2, Option_column.기준가.value, item)  

                    val = df_call.at[atm_index - 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL5))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index - 1, Option_column.기준가.value, item)            

                    val = df_call.at[atm_index, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index, Option_column.기준가.value, item)            

                    val = df_call.at[atm_index + 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL6))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index + 1, Option_column.기준가.value, item)

                    val = df_call.at[atm_index + 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL7))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index + 2, Option_column.기준가.value, item)

                    val = df_call.at[atm_index + 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL8))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index + 3, Option_column.기준가.value, item)

                    val = df_call.at[atm_index + 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL9))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index + 4, Option_column.기준가.value, item)

                    val = df_call.at[atm_index + 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, CENTER_VAL10))
                    item.setTextAlignment(Qt.AlignCenter)
                    #item.setBackground(QBrush(라임))
                    #item.setForeground(QBrush(검정색))
                    self.tableWidget_call.setItem(atm_index + 5, Option_column.기준가.value, item)

                    # 풋 양합표시
                    val = df_put.at[atm_index - 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_5))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index - 5, Option_column.기준가.value, item)

                    val = df_put.at[atm_index - 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_4))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index - 4, Option_column.기준가.value, item)

                    val = df_put.at[atm_index - 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_3))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index - 3, Option_column.기준가.value, item)

                    val = df_put.at[atm_index - 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_2))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index - 2, Option_column.기준가.value, item)    

                    val = df_put.at[atm_index - 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_minus_1))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index - 1, Option_column.기준가.value, item)            

                    val = df_put.at[atm_index, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_zero_sum))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(노란색))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index, Option_column.기준가.value, item)            

                    val = df_put.at[atm_index + 1, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_1))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index + 1, Option_column.기준가.value, item)

                    val = df_put.at[atm_index + 2, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_2))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index + 2, Option_column.기준가.value, item)

                    val = df_put.at[atm_index + 3, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_3))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index + 3, Option_column.기준가.value, item)

                    val = df_put.at[atm_index + 4, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_4))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index + 4, Option_column.기준가.value, item)

                    val = df_put.at[atm_index + 5, '기준가']
                    item = QTableWidgetItem("{0:.2f}\n({1})".format(val, atm_plus_5))
                    item.setTextAlignment(Qt.AlignCenter)
                    item.setBackground(QBrush(라임))
                    item.setForeground(QBrush(검정색))
                    self.tableWidget_put.setItem(atm_index + 5, Option_column.기준가.value, item)

                    if min_index != atm_index:

                        #self.tableWidget_call.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
                        #self.tableWidget_call.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
                        self.tableWidget_put.item(min_index, Option_column.기준가.value).setBackground(QBrush(검정색))
                        self.tableWidget_put.item(min_index, Option_column.기준가.value).setForeground(QBrush(노란색))
                    else:
                        pass

                    str = '[{0:02d}:{1:02d}:{2:02d}] 해외선물 실시간 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                    self.textBrowser.append(str)
                    print(str)

                    # 해외선물 체결,가격 실시간 요청
                    self.OVC.AdviseRealData(종목코드=SP500)
                    self.OVC.AdviseRealData(종목코드=DOW)
                    self.OVC.AdviseRealData(종목코드=NASDAQ)
                    self.OVC.AdviseRealData(종목코드=WTI)                
                    self.OVC.AdviseRealData(종목코드=HANGSENG)
                    self.OVC.AdviseRealData(종목코드=EUROFX)
                    self.OVC.AdviseRealData(종목코드=GOLD)

                    # 해외선물 호가 실시간 요청(호가정보가 국내용인듯)      
                    '''              
                    self.OVH.AdviseRealData(종목코드=SP500)
                    self.OVH.AdviseRealData(종목코드=DOW)
                    self.OVH.AdviseRealData(종목코드=NASDAQ)
                    self.OVH.AdviseRealData(종목코드=WTI)
                    self.OVH.AdviseRealData(종목코드=HANGSENG)                
                    self.OVH.AdviseRealData(종목코드=EUROFX)                
                    self.OVH.AdviseRealData(종목코드=GOLD)                    

                    # 해외선물 수급 실시간 요청                    
                    self.MK2.AdviseRealData(심볼코드=KRWUSD)
                    self.MK2.AdviseRealData(심볼코드=EURUSD)
                    self.MK2.AdviseRealData(심볼코드=SP500_SND)
                    self.MK2.AdviseRealData(심볼코드=DOW_SND)
                    self.MK2.AdviseRealData(심볼코드=NASDAQ_SND)
                    self.MK2.AdviseRealData(심볼코드=HANGSENG_SND)
                    self.MK2.AdviseRealData(심볼코드=WTI_SND)
                    self.MK2.AdviseRealData(심볼코드=GOLD_SND)
                    '''

                    if NightTime:                        

                        # EUREX 야간옵션 시세전광판
                        XQ = t2835(parent=self)

                        if TARGET_MONTH_SELECT == 1:

                            if MANGI_YAGAN:
                                t2835_month_info = NEXT_MONTH
                            else:
                                t2835_month_info = CURRENT_MONTH

                            str = '[{0:02d}:{1:02d}:{2:02d}] EUREX(t2835) 본월물 야간옵션 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(str) 

                        elif TARGET_MONTH_SELECT == 2:

                            if MANGI_YAGAN:
                                t2835_month_info = MONTH_AFTER_NEXT
                            else:
                                t2835_month_info = NEXT_MONTH

                            str = '[{0:02d}:{1:02d}:{2:02d}] EUREX(t2835) 차월물 야간옵션 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(str)

                        else:
                            if MANGI_YAGAN:
                                # to be checked !!!
                                pass
                            else:
                                t2835_month_info = MONTH_AFTER_NEXT

                            str = '[{0:02d}:{1:02d}:{2:02d}] EUREX(t2835) 차차월물 야간옵션 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second)
                            self.textBrowser.append(str)

                        XQ.Query(월물=t2835_month_info)
                    else:
                            
                        수정거래량 = 0
                        수정미결 = 0
                        수정미결증감 = 0

                        for i in range(option_pairs_count):

                            df_call.at[i, '수정거래량'] = 수정거래량
                            df_put.at[i, '수정거래량'] = 수정거래량

                            temp = format(수정거래량, ',')

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.VP.value, item)

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.VP.value, item)

                            df_call.at[i, '수정미결'] = 수정미결
                            df_put.at[i, '수정미결'] = 수정미결

                            temp = format(수정미결, ',')

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.OI.value, item)

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.OI.value, item)

                            df_call.at[i, '수정미결증감'] = 수정미결증감
                            df_put.at[i, '수정미결증감'] = 수정미결증감

                            temp = format(수정미결증감, ',')

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(i, Option_column.OID.value, item)

                            item = QTableWidgetItem(temp)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(i, Option_column.OID.value, item)                        

                        # 옵션 맥점 컬러링
                        str = '[{0:02d}:{1:02d}:{2:02d}] t8416종료 주간 옵션 맥점 컬러링을 시작합니다.\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(str)
                        
                        self.opt_all_node_coloring() 

                        if ResizeRowsToContents:
                            self.tableWidget_call.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_call.resizeColumnsToContents()

                        if ResizeRowsToContents:
                            self.tableWidget_put.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_put.resizeColumnsToContents()

                        if ResizeRowsToContents:
                            self.tableWidget_fut.resizeRowsToContents()
                        else:
                            pass
                        self.tableWidget_fut.resizeColumnsToContents()
                        
                        self.screen_update_worker.daemon = True
                        self.screen_update_worker.start()

                        str = '[{0:02d}:{1:02d}:{2:02d}] Screen Update 쓰레드가 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                        self.textBrowser.append(str)
                        print(str)

                        refresh_flag = True

                        self.pushButton_add.setStyleSheet("background-color: lawngreen")
                        self.pushButton_add.setText('Refresh')                                                                                
                else:
                    pass
            else:
                pass

        elif szTrCode == 't8432':

            df = result[0]

            근월물선물코드 = df.at[0, '단축코드']
            차월물선물코드 = df.at[1, '단축코드']
            차차월물선물코드 = df.at[2, '단축코드']

            if MANGI_YAGAN:

                if current_month == 3 or current_month == 6 or current_month == 9 or current_month == 12:
                    gmshcode = 차월물선물코드
                    cmshcode = 차차월물선물코드
                else:
                    gmshcode = 근월물선물코드
                    cmshcode = 차월물선물코드
                    ccmshcode = 차차월물선물코드
            else:
                gmshcode = 근월물선물코드
                cmshcode = 차월물선물코드
                ccmshcode = 차차월물선물코드

            str = '[{0:02d}:{1:02d}:{2:02d}] 선물 본월물코드 = {3}\r'.format(dt.hour, dt.minute, dt.second, gmshcode)
            self.textBrowser.append(str)
            print(str)

            str = '[{0:02d}:{1:02d}:{2:02d}] 선물 차월물코드 = {3}\r'.format(dt.hour, dt.minute, dt.second, cmshcode)
            self.textBrowser.append(str)
            print(str)

            if TARGET_MONTH_SELECT == 1:

                fut_code = gmshcode
                str = '[{0:02d}:{1:02d}:{2:02d}] 본월물({3:02d}월물, {4}) 선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second, current_month, fut_code)
                self.textBrowser.append(str)
                print(str)
                
                fut_realdata['전저'] = df.at[0, '전일저가']
                선물_전저 = df.at[0, '전일저가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[0, '전일저가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)

                fut_realdata['전고'] = df.at[0, '전일고가']
                선물_전고 = df.at[0, '전일고가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[0, '전일고가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)

                fut_realdata['종가'] = df.at[0, '전일종가']
                선물_종가 = df.at[0, '전일종가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[0, '전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)

            elif TARGET_MONTH_SELECT == 2:

                fut_code = cmshcode
                str = '[{0:02d}:{1:02d}:{2:02d}] 차월물({3:02d}월물, {4}) 선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second, next_month, fut_code)
                self.textBrowser.append(str)
                print(str)

                fut_realdata['전저'] = df.at[1, '전일저가']
                선물_전저 = df.at[0, '전일저가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[1, '전일저가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)

                fut_realdata['전고'] = df.at[1, '전일고가']
                선물_전고 = df.at[0, '전일고가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[1, '전일고가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)

                fut_realdata['종가'] = df.at[1, '전일종가']
                선물_종가 = df.at[1, '전일종가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[1, '전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)

            else:
                fut_code = ccmshcode
                str = '[{0:02d}:{1:02d}:{2:02d}] 차차월물({3:02d}월물, {4}) 선물 데이타를 요청합니다.\r'.format(dt.hour, dt.minute, dt.second, month_after_next, fut_code)
                self.textBrowser.append(str)
                print(str) 

                fut_realdata['전저'] = df.at[2, '전일저가']
                선물_전저 = df.at[0, '전일저가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[2, '전일저가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.전저.value, item)

                fut_realdata['전고'] = df.at[2, '전일고가']
                선물_전고 = df.at[0, '전일고가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[2, '전일고가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.전고.value, item)

                fut_realdata['종가'] = df.at[2, '전일종가']
                선물_종가 = df.at[2, '전일종가']

                item = QTableWidgetItem("{0:.2f}".format(df.at[2, '전일종가']))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(1, Futures_column.종가.value, item)           

            if os.path.isfile('daytime.txt'):

                item = QTableWidgetItem("{0:.2f}".format(KP200_전저))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(2, Futures_column.전저.value, item)

                item = QTableWidgetItem("{0:.2f}".format(KP200_전고))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(2, Futures_column.전고.value, item)

                item = QTableWidgetItem("{0:.2f}".format(KP200_전일시가))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget_fut.setItem(2, Futures_column.시가.value, item)
            else:
                pass            

            if ResizeRowsToContents:
                self.tableWidget_fut.resizeRowsToContents()
            else:
                pass
            self.tableWidget_fut.resizeColumnsToContents()

        elif szTrCode == 't8433':            

            df = result[0]

            global df_cm_call, df_cm_put, df_nm_call, df_nm_put

            first_cm_call = False
            first_cm_put = False
            first_nm_call = False
            first_nm_put = False

            for i in range(len(df)):

                if df['종목명'][i][2:6] == CURRENT_MONTH[2:6] and df['종목명'][i][0] == 'C':                

                    cm_call_code.append(df['단축코드'][i])

                    if not first_cm_call:
                        first_cm_call = True
                        cm_call_count = i
                    else:
                        pass

                    df_cm_call.at[i - cm_call_count, '종목명'] = df['종목명'][i]
                    df_cm_call.at[i - cm_call_count, '단축코드'] = df['단축코드'][i]
                    df_cm_call.at[i - cm_call_count, '전일종가'] = df['전일종가'][i]
                    df_cm_call.at[i - cm_call_count, '전일고가'] = df['전일고가'][i]
                    df_cm_call.at[i - cm_call_count, '전일저가'] = df['전일저가'][i]                    

                elif df['종목명'][i][2:6] == CURRENT_MONTH[2:6] and df['종목명'][i][0] == 'P': 

                    cm_put_code.append(df['단축코드'][i])

                    if not first_cm_put:
                        first_cm_put = True
                        cm_put_count = i
                    else:
                        pass

                    df_cm_put.at[i - cm_put_count, '종목명'] = df['종목명'][i]
                    df_cm_put.at[i - cm_put_count, '단축코드'] = df['단축코드'][i]
                    df_cm_put.at[i - cm_put_count, '전일종가'] = df['전일종가'][i]
                    df_cm_put.at[i - cm_put_count, '전일고가'] = df['전일고가'][i]
                    df_cm_put.at[i - cm_put_count, '전일저가'] = df['전일저가'][i]

                elif df['종목명'][i][2:6] == NEXT_MONTH[2:6] and df['종목명'][i][0] == 'C':                

                    nm_call_code.append(df['단축코드'][i])

                    if not first_nm_call:
                        first_nm_call = True
                        nm_call_count = i
                    else:
                        pass

                    df_nm_call.at[i - nm_call_count, '종목명'] = df['종목명'][i]
                    df_nm_call.at[i - nm_call_count, '단축코드'] = df['단축코드'][i]
                    df_nm_call.at[i - nm_call_count, '전일종가'] = df['전일종가'][i]
                    df_nm_call.at[i - nm_call_count, '전일고가'] = df['전일고가'][i]
                    df_nm_call.at[i - nm_call_count, '전일저가'] = df['전일저가'][i]

                elif df['종목명'][i][2:6] == NEXT_MONTH[2:6] and df['종목명'][i][0] == 'P': 

                    nm_put_code.append(df['단축코드'][i])

                    if not first_nm_put:
                        first_nm_put = True
                        nm_put_count = i
                    else:
                        pass

                    df_nm_put.at[i - nm_put_count, '종목명'] = df['종목명'][i]
                    df_nm_put.at[i - nm_put_count, '단축코드'] = df['단축코드'][i]
                    df_nm_put.at[i - nm_put_count, '전일종가'] = df['전일종가'][i]
                    df_nm_put.at[i - nm_put_count, '전일고가'] = df['전일고가'][i]
                    df_nm_put.at[i - nm_put_count, '전일저가'] = df['전일저가'][i]
                else:
                    pass
            
            #print('nm call code = {0}\r'.format(nm_call_code))
            #print('nm put code = {0}\r'.format(nm_put_code)) 

            cm_opt_length = len(cm_call_code)
            nm_opt_length = len(nm_call_code)

            CM_OPTCODE = cm_call_code[0][3:5]
            NM_OPTCODE = nm_call_code[0][3:5]

            print('df cm call = {0}\r'.format(df_cm_call))
            print('df cm put = {0}\r'.format(df_cm_put))
            print('df nm call = {0}\r'.format(df_nm_call))
            print('df nm put = {0}\r'.format(df_nm_put))

            str = '[{0:02d}:{1:02d}:{2:02d}] 본월물({3}) 옵션크기 = {4}\r'.format(dt.hour, dt.minute, dt.second, CM_OPTCODE, cm_opt_length)
            self.textBrowser.append(str)
            print(str) 

            str = '[{0:02d}:{1:02d}:{2:02d}] 차월물({3}) 옵션크기 = {4}\r'.format(dt.hour, dt.minute, dt.second, NM_OPTCODE, nm_opt_length)
            self.textBrowser.append(str)
            print(str)

        elif szTrCode == 'o3126':

            df = result[0]
            print('해외선물 호가 =', df)
            self.o3126_event_loop.exit()

        else:
            pass
    #####################################################################################################################################################################
    
    #####################################################################################################################################################################
    def OnReceiveRealData(self, szTrCode, result):

        result['szTrCode'] = szTrCode
        self.producer_queue.put(result)            

    def RealData_Process(self, result):

        szTrCode = result['szTrCode']

        try:
            global pre_start
            global atm_str, atm_val, atm_index
            global yj_atm_index

            global fut_realdata

            global df_call, df_put
            global df_call_hoga, df_put_hoga

            global df_call_price_graph, df_put_price_graph
            global df_call_graph, df_put_graph

            global opt_callreal_update_counter, opt_putreal_update_counter
            global opt_call_ho_update_counter, opt_put_ho_update_counter
            global call_atm_value, put_atm_value
            global receive_quote

            global FUT_FOREIGNER_거래대금순매수, FUT_RETAIL_거래대금순매수, FUT_INSTITUTIONAL_거래대금순매수, FUT_STOCK_거래대금순매수, \
                FUT_BOHEOM_거래대금순매수, FUT_TOOSIN_거래대금순매수, FUT_BANK_거래대금순매수, FUT_JONGGEUM_거래대금순매수, \
                FUT_GIGEUM_거래대금순매수, FUT_GITA_거래대금순매수

            global FUT_FOREIGNER_거래대금순매수_직전대비, FUT_RETAIL_거래대금순매수_직전대비, FUT_INSTITUTIONAL_거래대금순매수_직전대비, \
                FUT_STOCK_거래대금순매수_직전대비, FUT_BOHEOM_거래대금순매수_직전대비, FUT_TOOSIN_거래대금순매수_직전대비, \
                FUT_BANK_거래대금순매수_직전대비, FUT_JONGGEUM_거래대금순매수_직전대비, FUT_GIGEUM_거래대금순매수_직전대비, \
                FUT_GITA_거래대금순매수_직전대비

            global KOSPI_FOREIGNER_거래대금순매수, KOSPI_RETAIL_거래대금순매수, KOSPI_INSTITUTIONAL_거래대금순매수, KOSPI_STOCK_거래대금순매수, \
                KOSPI_BOHEOM_거래대금순매수, KOSPI_TOOSIN_거래대금순매수, KOSPI_BANK_거래대금순매수, KOSPI_JONGGEUM_거래대금순매수, \
                KOSPI_GIGEUM_거래대금순매수, KOSPI_GITA_거래대금순매수

            global KOSPI_FOREIGNER_거래대금순매수_직전대비, KOSPI_RETAIL_거래대금순매수_직전대비, KOSPI_INSTITUTIONAL_거래대금순매수_직전대비, \
                KOSPI_STOCK_거래대금순매수_직전대비, KOSPI_BOHEOM_거래대금순매수_직전대비, KOSPI_TOOSIN_거래대금순매수_직전대비, \
                KOSPI_BANK_거래대금순매수_직전대비, KOSPI_JONGGEUM_거래대금순매수_직전대비, KOSPI_GIGEUM_거래대금순매수_직전대비, \
                KOSPI_GITA_거래대금순매수_직전대비

            global FUT_FOREIGNER_직전대비, FUT_RETAIL_직전대비, FUT_INSTITUTIONAL_직전대비, \
                KOSPI_FOREIGNER_직전대비, PROGRAM_직전대비

            global 프로그램_전체순매수금액, 프로그램_전체순매수금액직전대비
            global 선물_거래대금순매수, 현물_거래대금순매수

            global kp200_realdata
            global call_result, put_result
            global yoc_call_gap_percent, yoc_put_gap_percent

            global opt_callreal_update_counter
            global call_atm_value, call_db_percent, atm_zero_cha
            global call_피봇, call_피봇_node_list, call_시가, call_시가_node_list
            global call_저가, call_저가_node_list, call_고가, call_고가_node_list

            global opt_putreal_update_counter
            global put_atm_value, put_db_percent
            global put_피봇, put_피봇_node_list, put_시가, put_시가_node_list
            global put_저가, put_저가_node_list, put_고가, put_고가_node_list
            global market_service, service_terminate, jugan_service_terminate, yagan_service_terminate

            global yoc_stop
            global OVC_체결시간, adj_hour, adj_min, OVC_SEC

            global df_sp500_graph, df_dow_graph, df_nasdaq_graph, df_wti_graph, df_eurofx_graph, df_hangseng_graph, df_gold_graph

            global sp500_delta, old_sp500_delta, sp500_직전대비, sp500_text_color
            global dow_delta, old_dow_delta, dow_직전대비, dow_text_color
            global nasdaq_delta, old_nasdaq_delta, nasdaq_직전대비, nasdaq_text_color
            global wti_delta, old_wti_delta, wti_직전대비, wti_text_color
            global eurofx_delta, old_eurofx_delta, eurofx_직전대비, eurofx_text_color
            global hangseng_delta, old_hangseng_delta, hangseng_직전대비, hangseng_text_color
            global gold_delta, old_gold_delta, gold_직전대비, gold_text_color
            
            global FC0_선물현재가, OC0_콜현재가, OC0_풋현재가
            global flag_telegram_send_worker
            global dongsi_hoga

            global SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_현재가, SP500_전일대비, SP500_등락율, SP500_진폭, SP500_고가
            global DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_현재가, DOW_전일대비, DOW_등락율, DOW_진폭, DOW_고가
            global NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_현재가, NASDAQ_전일대비, NASDAQ_등락율, NASDAQ_진폭, NASDAQ_고가
            global WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭, WTI_고가
            global EUROFX_종가, EUROFX_피봇, EUROFX_시가, EUROFX_저가, EUROFX_현재가, EUROFX_전일대비, EUROFX_등락율, EUROFX_진폭, EUROFX_고가
            global HANGSENG_종가, HANGSENG_피봇, HANGSENG_시가, HANGSENG_저가, HANGSENG_현재가, HANGSENG_전일대비, HANGSENG_등락율, HANGSENG_진폭, HANGSENG_고가
            global GOLD_종가, GOLD_피봇, GOLD_시가, GOLD_저가, GOLD_현재가, GOLD_전일대비, GOLD_등락율, GOLD_진폭, GOLD_고가

            global SP500_과거가, DOW_과거가, NASDAQ_과거가, WTI_과거가, EUROFX_과거가, HANGSENG_과거가, GOLD_과거가

            global NASDAQ_순매수, NASDAQ_잔량비
            global SP500_순매수, SP500_잔량비
            global DOW_순매수, DOW_잔량비
            global WTI_순매수, WTI_잔량비
            global EUROFX_순매수, EUROFX_잔량비
            global HANGSENG_순매수, HANGSENG_잔량비
            global GOLD_순매수, GOLD_잔량비

            global CME_당일종가, DOW_당일종가, SP500_당일종가, NASDAQ_당일종가, WTI_당일종가, EUROFX_당일종가, HANGSENG_당일종가, GOLD_당일종가
            global 시스템시간, 서버시간, 시스템_서버_시간차
            global kp200_시가, kp200_피봇, kp200_저가, kp200_현재가, kp200_고가            
            global DOW_진폭비
            global DOW_주간_시작가, WTI_주간_시작가
            global DOW_야간_시작가, WTI_야간_시작가
            global 장시작_양합

            global df_kp200_graph
            global df_futures_graph, df_dow_graph, df_sp500_graph, df_nasdaq_graph, df_wti_graph, df_eurofx_graph, df_hangseng_graph, df_gold_graph
            global flag_dow_ohlc_open, flag_sp500_ohlc_open, flag_nasdaq_ohlc_open, flag_wti_ohlc_open, flag_eurofx_ohlc_open, flag_hangseng_ohlc_open, flag_gold_ohlc_open

            global DOW_현재가_버퍼
            global SP500_현재가_버퍼
            global NASDAQ_현재가_버퍼
            global WTI_현재가_버퍼
            global 선물_시가, 선물_피봇, 선물_현재가
            
            global receive_real_ovc, ovc_x_idx, old_ovc_x_idx
            global flag_option_start
                        
            start_time = timeit.default_timer()

            dt = datetime.datetime.now()

            if szTrCode == 'JIF':

                str = '[{0:02d}:{1:02d}:{2:02d}] 장구분[{3}], 장상태[{4}]\r'.format(\
                    adj_hour, adj_min, adj_sec, result['장구분'], result['장상태'])
                self.textBrowser.append(str)

                # 장시작 10분전
                if result['장구분'] == '5' and result['장상태'] == '25':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 장시작 10분전입니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                # 현물장 시작 10초전
                elif result['장구분'] == '1' and result['장상태'] == '22':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 현물장 시작 10초전입니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                # 선물장 시작 10초전
                elif result['장구분'] == '5' and result['장상태'] == '22':
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] 선물장 시작 10초전입니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                # 주간 선물/옵션장 시작
                elif result['장구분'] == '5' and result['장상태'] == '21':

                    yoc_stop = not yoc_stop

                    market_service = True

                    DOW_주간_시작가 = DOW_현재가
                    WTI_주간_시작가 = WTI_현재가

                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간장이 시작됩니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] DOW 주간시작가 = {3}\r'.format(adj_hour, adj_min, adj_sec, DOW_주간_시작가)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] WTI 주간시작가 = {3}\r'.format(adj_hour, adj_min, adj_sec, WTI_주간_시작가)
                    self.textBrowser.append(str)

                # 야간 선물장 시작
                elif result['장구분'] == '7' and result['장상태'] == '21':
                    
                    market_service = True

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간 선물장이 시작됩니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    DOW_야간_시작가 = DOW_현재가
                    WTI_야간_시작가 = WTI_현재가

                    jisu_str = "DOW 야간시작가: {0}".format(DOW_야간_시작가)
                    self.label_kospi.setText(jisu_str)
                    self.label_kospi.setStyleSheet('background-color: black ; color: yellow')

                    str = '[{0:02d}:{1:02d}:{2:02d}] DOW 야간시작가 = {3}\r'.format(adj_hour, adj_min, adj_sec, DOW_야간_시작가)
                    self.textBrowser.append(str)

                    jisu_str = "WTI 야간시작가: {0}".format(WTI_야간_시작가)
                    self.label_kosdaq.setText(jisu_str)
                    self.label_kosdaq.setStyleSheet('background-color: black ; color: yellow')

                    str = '[{0:02d}:{1:02d}:{2:02d}] WTI 야간시작가 = {3}\r'.format(adj_hour, adj_min, adj_sec, WTI_야간_시작가)
                    self.textBrowser.append(str)

                # 야간 옵션장 시작
                elif result['장구분'] == '8' and result['장상태'] == '21':

                    market_service = True

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간 옵션장이 시작됩니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    DOW_야간_시작가 = DOW_현재가
                    WTI_야간_시작가 = WTI_현재가

                    jisu_str = "DOW 야간시작가: {0}".format(DOW_야간_시작가)
                    self.label_kospi.setText(jisu_str)
                    self.label_kospi.setStyleSheet('background-color: black ; color: yellow')

                    str = '[{0:02d}:{1:02d}:{2:02d}] DOW 야간시작가 = {3}\r'.format(adj_hour, adj_min, adj_sec, DOW_야간_시작가)
                    self.textBrowser.append(str)

                    jisu_str = "WTI 야간시작가: {0}".format(WTI_야간_시작가)
                    self.label_kosdaq.setText(jisu_str)
                    self.label_kosdaq.setStyleSheet('background-color: black ; color: yellow')

                    str = '[{0:02d}:{1:02d}:{2:02d}] WTI 야간시작가 = {3}\r'.format(adj_hour, adj_min, adj_sec, WTI_야간_시작가)
                    self.textBrowser.append(str)

                # 현물 장마감 5분전
                elif result['장구분'] == '1' and result['장상태'] == '44':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 현물 장마감 5분전입니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                # 현물 장마감 1분전
                elif result['장구분'] == '1' and result['장상태'] == '43':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 현물 장마감 1분전입니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    # FUTURES/KOSPI200 예상지수 요청취소
                    self.YJ.UnadviseRealData()

                    str = '[{0:02d}:{1:02d}:{2:02d}] FUTURES/KOSPI200 예상지수 요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    # 지수선물예상체결 요청취소
                    self.YFC.UnadviseRealData()

                    str = '[{0:02d}:{1:02d}:{2:02d}] 지수선물 예상체결 요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    # KOSPI예상체결 요청취소
                    self.YS3.UnadviseRealData()

                    str = '[{0:02d}:{1:02d}:{2:02d}] KOSPI 예상체결 요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    # 지수옵션예상체결 요청취소
                    self.YOC.UnadviseRealData()

                    str = '[{0:02d}:{1:02d}:{2:02d}] 지수옵션 예상체결 요청을 취소합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                # 장후 동시호가 시작
                elif result['장구분'] == '5' and result['장상태'] == '31':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 장후 동시호가가 시작되었습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    dongsi_hoga = True

                    str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 종료합니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    if self.telegram_send_worker.isRunning():
                        self.telegram_send_worker.terminate()
                    else:
                        pass

                    if self.telegram_listen_worker.isRunning():
                        self.telegram_listen_worker.terminate()
                    else:
                        pass

                # 주간 선물/옵션장 종료
                elif result['장구분'] == '5' and result['장상태'] == '41':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간 선물/옵션장이 종료되었습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 S&P 500 지수 = {3}\r'.format(adj_hour, adj_min, adj_sec, SP500_현재가)
                    self.textBrowser.append(str)
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 DOW 지수 = {3}\r'.format(adj_hour, adj_min, adj_sec, DOW_현재가)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 NASDAQ 지수 = {3}\r'.format(adj_hour, adj_min, adj_sec, NASDAQ_현재가)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 주간장 종료시 WTI 지수 = {3}\r'.format(adj_hour, adj_min, adj_sec, WTI_현재가)
                    self.textBrowser.append(str)

                    if market_service:
                        
                        market_service = False
                        service_terminate = True
                        jugan_service_terminate = True
                        flag_option_start = False

                        call_atm_value = df_call.at[atm_index, '현재가']
                        put_atm_value = df_put.at[atm_index, '현재가']

                        # 저장을 위한 중심가 계산 및 표시
                        if call_atm_value >= put_atm_value:
                            atm_zero_cha = round((call_atm_value - put_atm_value) , 2)
                        else:
                            atm_zero_cha = round((put_atm_value - call_atm_value) , 2)

                        if call_atm_value > put_atm_value:

                            CENTER_VAL = round((put_atm_value + atm_zero_cha / 2), 2)

                        elif put_atm_value > call_atm_value:

                            CENTER_VAL = round((call_atm_value + atm_zero_cha / 2), 2)
                        else:
                            CENTER_VAL = call_atm_value

                        item = QTableWidgetItem("{0:.2f}".format(CENTER_VAL))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(대맥점색))
                        item.setForeground(QBrush(검정색))

                        self.tableWidget_fut.setItem(2, Futures_column.거래량.value, item)
                        
                        # KP200의 주요정보를 저장
                        with open('daytime.txt', mode='w') as daytime_file:

                            file_str = '################# < KP200 Index of the Last Day > ###################\n'                        
                            daytime_file.write(file_str)
                            file_str = 'Center Value = {0}\n'.format(CENTER_VAL)
                            daytime_file.write(file_str)
                            file_str = 'KP200 Open = {0}\n'.format(kp200_realdata['시가'])
                            daytime_file.write(file_str)                            
                            file_str = 'KP200 High = {0}\n'.format(kp200_realdata['고가'])
                            daytime_file.write(file_str)
                            file_str = 'KP200 Low = {0}\n'.format(kp200_realdata['저가'])
                            daytime_file.write(file_str)
                            file_str = 'KP200 Close = {0}\n'.format(kp200_realdata['현재가'])
                            daytime_file.write(file_str)
                            file_str = '################### < Foreign Futures Index of the Day > #####################\n'
                            daytime_file.write(file_str)
                            file_str = 'SP500 Day Close = {0}\n'.format(SP500_현재가)
                            daytime_file.write(file_str)
                            file_str = 'DOW Day Close = {0}\n'.format(DOW_현재가)
                            daytime_file.write(file_str)
                            file_str = 'NASDAQ Day Close = {0}\n'.format(NASDAQ_현재가)
                            daytime_file.write(file_str)
                            file_str = 'WTI Day Close = {0}\n'.format(WTI_현재가)
                            daytime_file.write(file_str)
                            file_str = 'EUROFX Day Close = {0}\n'.format(EUROFX_현재가)
                            daytime_file.write(file_str)
                            file_str = 'HANGSENG Day Close = {0}\n'.format(HANGSENG_현재가)
                            daytime_file.write(file_str)
                            file_str = 'GOLD Day Close = {0}\n'.format(GOLD_현재가)
                            daytime_file.write(file_str)

                            daytime_file.close()

                        receive_quote = False
                        
                        self.pushButton_add.setText('ScrShot')

                        self.SaveResult()                                        
                    else:
                        pass                                               

                # 야간 선물장 종료
                elif result['장구분'] == '7' and result['장상태'] == '41':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간 선물장이 종료되었습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)

                    CME_당일종가 = cme_realdata['현재가']
                    
                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 S&P 500 지수 = {3}\r'.format \
                        (adj_hour, adj_min, adj_sec, SP500_현재가)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 DOW 지수 = {3}\r'.format \
                        (adj_hour, adj_min, adj_sec, DOW_현재가)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 NASDAQ 지수 = {3}\r'.format \
                        (adj_hour, adj_min, adj_sec, NASDAQ_현재가)
                    self.textBrowser.append(str)

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간장 종료시 WTI 지수 = {3}\r'.format \
                        (adj_hour, adj_min, adj_sec, WTI_현재가)
                    self.textBrowser.append(str)

                    if market_service:

                        market_service = False
                        service_terminate = True
                        yagan_service_terminate = True
                        
                        receive_quote = False
                        
                        self.pushButton_add.setText('ScrShot')
                        
                        str = '[{0:02d}:{1:02d}:{2:02d}] 텔레그램 쓰레드를 종료합니다.\r'.format(adj_hour, adj_min, adj_sec)
                        self.textBrowser.append(str)

                        if self.telegram_send_worker.isRunning():
                            self.telegram_send_worker.terminate()
                        else:
                            pass

                        if self.telegram_listen_worker.isRunning():
                            self.telegram_listen_worker.terminate()
                        else:
                            pass
                        
                        self.SaveResult()
                    else:
                        pass                    

                # 야간 옵션장 종료(선물장보다 1시간 먼저 종료됨)
                elif result['장구분'] == '8' and result['장상태'] == '41':

                    str = '[{0:02d}:{1:02d}:{2:02d}] 야간 옵션장이 종료되었습니다.\r'.format(adj_hour, adj_min, adj_sec)
                    self.textBrowser.append(str)
                    '''
                    file = open('skybot.log', 'w')
                    text = self.textBrowser.toPlainText()
                    file.write(text)
                    file.close()
                    '''
                else:
                    pass

            elif szTrCode == 'YJ_':

                if pre_start:

                    if result['업종코드'] == KOSPI200:

                        if result['예상지수'] != float(self.tableWidget_fut.item(2, Futures_column.시가.value).text()):

                            kp200_시가 = result['예상지수']
                            kp200_realdata['시가'] = result['예상지수']
                            fut_realdata['KP200'] = result['예상지수']

                            df_futures_graph.at[ovc_x_idx, 'kp200'] = result['예상지수']
                            df_kp200_graph.at[ovc_x_idx, 'price'] = result['예상지수']

                            item = QTableWidgetItem("{0:.2f}".format(result['예상지수']))
                            item.setTextAlignment(Qt.AlignCenter)

                            if kp200_시가 > KP200_전일종가:
                                item.setForeground(QBrush(적색))
                            elif kp200_시가 < KP200_전일종가:
                                item.setForeground(QBrush(청색))
                            else:
                                item.setForeground(QBrush(검정색))

                            self.tableWidget_fut.setItem(2, Futures_column.시가.value, item)
                        else:
                            pass

                        atm_str = self.get_atm_str(result['예상지수'])

                        if atm_str[-1] == '2' or atm_str[-1] == '7':

                            atm_val = float(atm_str) + 0.5
                        else:
                            atm_val = float(atm_str)

                        if fut_realdata['시가'] > 0 and fut_realdata['KP200'] > 0:

                            예상_Basis = fut_realdata['시가'] - fut_realdata['KP200']                            
                        else:
                            pass

                        if atm_str in opt_actval:
                            yj_atm_index = opt_actval.index(atm_str)
                        else:
                            print("atm_str이 리스트에 없습니다.", atm_str)

                    elif result['업종코드'] == FUTURES:

                        print('선물 예상지수 : ', result['예상지수'])

                    else:
                        pass
                else:
                    pass

            elif szTrCode == 'YS3':                
                
                if pre_start:

                    현재가 = format(result['예상체결가격'], ',')

                    if result['단축코드'] == SAMSUNG:

                        if result['예상체결가전일종가대비구분'] == '5':

                            jisu_str = "SAMSUNG: {0}({1}, {2:0.1f}%)".format(현재가, format(-result['예상체결가전일종가대비'], ','),
                                                                                result['예상체결가전일종가등락율'])
                            self.label_samsung.setText(jisu_str)
                            self.label_samsung.setStyleSheet('background-color: blue ; color: white')

                        elif result['예상체결가전일종가대비구분'] == '2':

                            jisu_str = "SAMSUNG: {0}({1}, {2:0.1f}%)".format(현재가, format(result['예상체결가전일종가대비'], ','),
                                                                                result['예상체결가전일종가등락율'])
                            self.label_samsung.setText(jisu_str)
                            self.label_samsung.setStyleSheet('background-color: red ; color: white')

                        else:
                            jisu_str = "SAMSUNG: {0}({1})".format(현재가, format(result['예상체결가전일종가대비'], ','))
                            self.label_samsung.setText(jisu_str)
                            self.label_samsung.setStyleSheet('background-color: yellow ; color: black')
                    
                    elif result['단축코드'] == HYUNDAI:

                        if result['예상체결가전일종가대비구분'] == '5':

                            jisu_str = "HYUNDAI: {0}({1}, {2:0.1f}%)".format(현재가, format(-result['예상체결가전일종가대비'], ','),
                                                                              result['예상체결가전일종가등락율'])
                            self.label_kosdaq.setText(jisu_str)
                            self.label_kosdaq.setStyleSheet('background-color: blue ; color: white')

                        elif result['예상체결가전일종가대비구분'] == '2':

                            jisu_str = "HYUNDAI: {0}({1}, {2:0.1f}%)".format(현재가, format(result['예상체결가전일종가대비'], ','),
                                                                              result['예상체결가전일종가등락율'])
                            self.label_kosdaq.setText(jisu_str)
                            self.label_kosdaq.setStyleSheet('background-color: red ; color: white')

                        else:
                            jisu_str = "HYUNDAI: {0}({1})".format(현재가, format(result['예상체결가전일종가대비'], ','))
                            self.label_kosdaq.setText(jisu_str)
                            self.label_kosdaq.setStyleSheet('background-color: yellow ; color: black')
                    else:
                        pass

                    '''
                    elif result['단축코드'] == Celltrion:
                        
                        if result['예상체결가전일종가대비구분'] == '5':

                            jisu_str = "CTRO : {0}({1}, {2:0.1f}%)".format(현재가, format(-result['예상체결가전일종가대비'], ','),
                                                                              result['예상체결가전일종가등락율'])
                            self.label_3rd.setText(jisu_str)
                            self.label_3rd.setStyleSheet('background-color: blue ; color: white')

                        elif result['예상체결가전일종가대비구분'] == '2':

                            jisu_str = "CTRO : {0}({1}, {2:0.1f}%)".format(현재가, format(result['예상체결가전일종가대비'], ','),
                                                                              result['예상체결가전일종가등락율'])
                            self.label_3rd.setText(jisu_str)
                            self.label_3rd.setStyleSheet('background-color: red ; color: white')

                        else:
                            jisu_str = "CTRO : {0}({1})".format(현재가, format(result['예상체결가전일종가대비'], ','))
                            self.label_3rd.setText(jisu_str)
                            self.label_3rd.setStyleSheet('background-color: yellow ; color: black')                        
                    else:
                        #print('단축코드', result['단축코드'])
                        pass
                    '''
                else:
                    pass                

            elif szTrCode == 'YOC':

                if int(result['예상체결시간'][0:2]) == (KSE_START_HOUR - 1) and int(result['예상체결시간'][2:4]) == 59 and \
                    (int(result['예상체결시간'][4:6]) == 58 or int(result['예상체결시간'][4:6]) == 59):

                    # 지수옵션 예상체결 요청취소(안하면 시작시 지연발생함 ???)
                    self.YOC.UnadviseRealData()

                    yoc_stop = True

                    str = '[{0:02d}:{1:02d}:{2:02d}] 지수옵션 예상체결 요청을 취소합니다.\r'.format \
                        (int(result['예상체결시간'][0:2]), int(result['예상체결시간'][2:4]), int(result['예상체결시간'][4:6]))
                    self.textBrowser.append(str)
                else:
                    pass

                if not yoc_stop:

                    if result['단축코드'][0:3] == '201':

                        index = call_행사가.index(result['단축코드'][5:8])

                        if result['예상체결가격'] != self.tableWidget_call.item(index, Option_column.시가.value).text():

                            if float(result['예상체결가격']) > 0:
                                df_call.at[index, '시가'] = float(result['예상체결가격'])
                            else:
                                pass

                            if yj_atm_index > 0:
                                call_atm_value = df_call.at[yj_atm_index, '현재가']
                            else:
                                pass

                            전저 = df_call.at[index, '전저']
                            전고 = df_call.at[index, '전고']
                            종가 = df_call.at[index, '종가']

                            self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(흰색))

                            item = QTableWidgetItem("{0}".format(result['예상체결가격']))
                            item.setTextAlignment(Qt.AlignCenter)

                            if float(result['예상체결가격']) > 종가:

                                item.setForeground(QBrush(적색))

                                if float(result['예상체결가격']) >= 10.0:
                                    item.setBackground(QBrush(청색))
                                else:
                                    item.setBackground(QBrush(흰색))

                            elif float(result['예상체결가격']) < 종가:

                                item.setForeground(QBrush(청색))

                                if float(result['예상체결가격']) >= 10.0:
                                    item.setBackground(QBrush(적색))
                                else:
                                    item.setBackground(QBrush(흰색))
                            else:
                                item.setForeground(QBrush(검정색))

                            self.tableWidget_call.setItem(index, Option_column.시가.value, item)
                            
                            if float(result['예상체결가격']) >= 10.0:
                                #df_call_price_graph.iat[ovc_x_idx, index] = 9.99
                                df_call_graph[index].at[ovc_x_idx, 'price'] = 9.99
                            elif 0 < float(result['예상체결가격']) < 10.0:
                                #df_call_price_graph.iat[ovc_x_idx, index] = float(result['예상체결가격'])
                                df_call_graph[index].at[ovc_x_idx, 'price'] = float(result['예상체결가격'])
                            else:
                                pass

                            if float(result['예상체결가격']) in COREVAL:

                                self.tableWidget_call.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                                self.tableWidget_call.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
                            else:
                                pass

                            피봇 = self.calc_pivot(전저, 전고, 종가, float(result['예상체결가격']))

                            df_call.at[index, '피봇'] = 피봇

                            item = QTableWidgetItem("{0:.2f}".format(피봇))
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_call.setItem(index, Option_column.피봇.value, item)

                            if float(result['예상체결가격']) > 0 and 종가 > 0:

                                시가갭 = float(result['예상체결가격']) - 종가
                                df_call.at[index, '시가갭'] = 시가갭

                                yoc_call_gap_percent[index] = (float(result['예상체결가격']) / 종가 - 1) * 100

                                gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, yoc_call_gap_percent[index])

                                if gap_str != self.tableWidget_call.item(index, Option_column.시가갭.value).text():

                                    item = QTableWidgetItem(gap_str)
                                    item.setTextAlignment(Qt.AlignCenter)
                                    self.tableWidget_call.setItem(index, Option_column.시가갭.value, item)

                                    if ResizeRowsToContents:
                                        self.tableWidget_call.resizeRowsToContents()
                                    else:
                                        pass
                                    self.tableWidget_call.resizeColumnsToContents()
                                else:
                                    pass
                            else:
                                pass                            
                        else:
                            pass

                        global 콜시가갭합, 콜시가갭합_퍼센트, 콜시가갭합_단위평균

                        콜시가갭합 = round(df_call['시가갭'].sum(), 2)

                        temp = yoc_call_gap_percent[:]
                        call_gap_percent_local = [value for value in temp if value == value]
                        call_gap_percent_local.sort()

                        if call_gap_percent_local:

                            콜시가갭합_단위평균 = round(콜시가갭합/len(call_gap_percent_local), 2)

                            tmp = np.array(call_gap_percent_local)                            
                            콜시가갭합_퍼센트 = int(round(np.mean(tmp), 2))
                            call_str = repr(콜시가갭합_단위평균) + '\n(' + repr(콜시가갭합_퍼센트) + '%' + ')'

                            if call_str != self.tableWidget_call.horizontalHeaderItem(Option_column.시가갭.value).text():
                                item = QTableWidgetItem(call_str)
                                self.tableWidget_call.setHorizontalHeaderItem(Option_column.시가갭.value, item)

                                if ResizeRowsToContents:
                                    self.tableWidget_call.resizeRowsToContents()
                                else:
                                    pass
                                self.tableWidget_call.resizeColumnsToContents()
                            else:
                                pass

                            new_actval = repr(len(call_gap_percent_local))

                            if new_actval != self.tableWidget_call.horizontalHeaderItem(1).text():
                                item = QTableWidgetItem(new_actval)
                                item.setTextAlignment(Qt.AlignCenter)
                                self.tableWidget_call.setHorizontalHeaderItem(1, item)
                            else:
                                pass
                        else:
                            pass

                    elif result['단축코드'][0:3] == '301':

                        index = put_행사가.index(result['단축코드'][5:8])

                        if result['예상체결가격'] != self.tableWidget_put.item(index, Option_column.시가.value).text():

                            if float(result['예상체결가격']) > 0:
                                df_put.at[index, '시가'] = float(result['예상체결가격'])
                            else:
                                pass

                            if yj_atm_index > 0:
                                put_atm_value = df_put.at[yj_atm_index, '현재가']
                            else:
                                pass

                            전저 = df_put.at[index, '전저']
                            전고 = df_put.at[index, '전고']
                            종가 = df_put.at[index, '종가']

                            self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(흰색))

                            item = QTableWidgetItem("{0}".format(result['예상체결가격']))
                            item.setTextAlignment(Qt.AlignCenter)

                            if float(result['예상체결가격']) > 종가:

                                item.setForeground(QBrush(적색))

                                if float(result['예상체결가격']) >= 10.0:
                                    item.setBackground(QBrush(청색))
                                else:
                                    item.setBackground(QBrush(흰색))

                            elif float(result['예상체결가격']) < 종가:

                                item.setForeground(QBrush(청색))

                                if float(result['예상체결가격']) >= 10.0:
                                    item.setBackground(QBrush(적색))
                                else:
                                    item.setBackground(QBrush(흰색))
                            else:
                                item.setForeground(QBrush(검정색))

                            self.tableWidget_put.setItem(index, Option_column.시가.value, item)
                            
                            if float(result['예상체결가격']) >= 10.0:
                                #df_put_price_graph.iat[ovc_x_idx, index] = 9.99
                                df_put_graph[index].at[ovc_x_idx, 'price'] = 9.99
                            elif 0 < float(result['예상체결가격']) < 10.0:
                                #df_put_price_graph.iat[ovc_x_idx, index] = float(result['예상체결가격'])
                                df_put_graph[index].at[ovc_x_idx, 'price'] = float(result['예상체결가격'])
                            else:
                                pass

                            if float(result['예상체결가격']) in COREVAL:

                                self.tableWidget_put.item(index, Option_column.시가.value).setBackground(QBrush(대맥점색))
                                self.tableWidget_put.item(index, Option_column.시가.value).setForeground(QBrush(검정색))
                            else:
                                pass

                            피봇 = self.calc_pivot(전저, 전고, 종가, float(result['예상체결가격']))

                            df_put.at[index, '피봇'] = 피봇

                            item = QTableWidgetItem("{0:.2f}".format(피봇))
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_put.setItem(index, Option_column.피봇.value, item)

                            if float(result['예상체결가격']) > 0 and 종가 > 0:

                                시가갭 = float(result['예상체결가격']) - 종가
                                df_put.at[index, '시가갭'] = 시가갭

                                yoc_put_gap_percent[index] = (float(result['예상체결가격']) / 종가 - 1) * 100

                                gap_str = "{0:.2f}\n({1:.0f}%)".format(시가갭, yoc_put_gap_percent[index])

                                if gap_str != self.tableWidget_put.item(index, Option_column.시가갭.value).text():

                                    item = QTableWidgetItem(gap_str)
                                    item.setTextAlignment(Qt.AlignCenter)
                                    self.tableWidget_put.setItem(index, Option_column.시가갭.value, item)

                                    if ResizeRowsToContents:
                                        self.tableWidget_put.resizeRowsToContents()
                                    else:
                                        pas
                                    self.tableWidget_put.resizeColumnsToContents()
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass

                        global 풋시가갭합, 풋시가갭합_퍼센트, 풋시가갭합_단위평균 

                        풋시가갭합 = round(df_put['시가갭'].sum(), 2)

                        temp = yoc_put_gap_percent[:]
                        put_gap_percent_local = [value for value in temp if value == value]
                        put_gap_percent_local.sort()

                        if put_gap_percent_local:

                            풋시가갭합_단위평균 = round(풋시가갭합/len(put_gap_percent_local), 2)

                            tmp = np.array(put_gap_percent_local)                            
                            풋시가갭합_퍼센트 = int(round(np.mean(tmp), 2))
                            put_str = repr(풋시가갭합_단위평균) + '\n(' + repr(풋시가갭합_퍼센트) + '%' + ')'

                            if put_str != self.tableWidget_put.horizontalHeaderItem(Option_column.시가갭.value).text():
                                item = QTableWidgetItem(put_str)
                                self.tableWidget_put.setHorizontalHeaderItem(Option_column.시가갭.value, item)

                                if ResizeRowsToContents:
                                    self.tableWidget_put.resizeRowsToContents()
                                else:
                                    pass
                                self.tableWidget_put.resizeColumnsToContents()
                            else:
                                pass

                            new_actval = repr(len(put_gap_percent_local))

                            if new_actval != self.tableWidget_put.horizontalHeaderItem(1).text():
                                item = QTableWidgetItem(new_actval)
                                item.setTextAlignment(Qt.AlignCenter)
                                self.tableWidget_put.setHorizontalHeaderItem(1, item)
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] Wrong [{3}] 수신... \r'.format(
                        int(result['예상체결시간'][0:2]),
                        int(result['예상체결시간'][2:4]),
                        int(result['예상체결시간'][4:6]),
                        szTrCode)
                    self.textBrowser.append(str)

            elif szTrCode == 'YFC':

                if result['단축코드'] == gmshcode:                    

                    market_service = True
                    
                    if result['예상체결가격'] != float(self.tableWidget_fut.item(1, Futures_column.시가.value).text()):

                        #선물_시가 = result['예상체결가격']
                        선물_현재가 = result['예상체결가격']
                        fut_realdata['시가'] = result['예상체결가격']

                        df_futures_graph.at[ovc_x_idx, 'price'] = 선물_현재가

                        item = QTableWidgetItem("{0:.2f}".format(선물_현재가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 선물_현재가 > fut_realdata['종가']:
                            item.setForeground(QBrush(적색))
                        elif 선물_현재가 < fut_realdata['종가']:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_fut.setItem(1, Futures_column.시가.value, item)

                        시가갭 = 선물_현재가 - fut_realdata['종가']

                        item = QTableWidgetItem("{0:.2f}".format(시가갭))
                        item.setTextAlignment(Qt.AlignCenter)

                        if 선물_현재가 > fut_realdata['종가']:
                            item.setBackground(QBrush(콜기준가색))
                            item.setForeground(QBrush(검정색))
                        elif 선물_현재가 < fut_realdata['종가']:
                            item.setBackground(QBrush(풋기준가색))
                            item.setForeground(QBrush(흰색))
                        else:
                            item.setBackground(QBrush(흰색))

                        self.tableWidget_fut.setItem(1, Futures_column.시가갭.value, item)

                        선물_피봇 = self.calc_pivot(선물_전저, 선물_전고, 선물_종가, 선물_현재가)

                        item = QTableWidgetItem("{0:.2f}".format(fut_realdata['피봇']))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)

                        fut_realdata['피봇'] = 선물_피봇

                        DOW_기준_예상시가 = (선물_전일종가 * DOW_현재가) / DOW_전일종가

                        item = QTableWidgetItem("{0:.2f}".format(DOW_기준_예상시가))
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(검정색))
                        item.setForeground(QBrush(대맥점색))
                        self.tableWidget_fut.setItem(0, Futures_column.시가.value, item)

                        선물_등락율 = ((result['예상체결가격'] - 선물_전일종가) / 선물_전일종가) * 100

                        df_futures_graph.at[ovc_x_idx, 'drate'] = 선물_등락율

                        item = QTableWidgetItem("선물\n({0:.2f}%)".format(선물_등락율))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_fut.setItem(1, Futures_column.대비.value, item)

                        item = QTableWidgetItem("DOW\n({0:.2f}%)".format(DOW_등락율))
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_fut.setItem(2, Futures_column.대비.value, item)

                        self.tableWidget_fut.resizeRowsToContents()
                        #self.tableWidget_fut.resizeColumnsToContents()                             
                        
                        str = '[{0:02d}:{1:02d}:{2:02d}] 선물 등락율 = {3:.2f}, DOW 등락율 = {4:.2f}\r'.format(\
                                        int(result['예상체결시간'][0:2]),
                                        int(result['예상체결시간'][2:4]),
                                        int(result['예상체결시간'][4:6]),
                                        선물_등락율, DOW_등락율)
                        self.textBrowser.append(str)                        
                    else:
                        pass

                    global 선물_현재가_버퍼, flag_futures_ohlc_open

                    if receive_real_ovc:

                        df_futures_graph.at[ovc_x_idx, 'price'] = 선물_현재가

                        # 1T OHLC 생성
                        df_futures_graph.at[ovc_x_idx, 'ctime'] = OVC_체결시간

                        if 선물_현재가 > 0:

                            if OVC_SEC == 0:

                                if not flag_futures_ohlc_open:

                                    df_futures_graph.at[ovc_x_idx, 'open'] = 선물_현재가
                                    df_futures_graph.at[ovc_x_idx, 'high'] = 선물_현재가
                                    df_futures_graph.at[ovc_x_idx, 'low'] = 선물_현재가
                                    df_futures_graph.at[ovc_x_idx, 'middle'] = 선물_현재가
                                    df_futures_graph.at[ovc_x_idx, 'close'] = 선물_현재가
                                    df_futures_graph.at[ovc_x_idx, 'price'] = 선물_현재가

                                    del 선물_현재가_버퍼[:]

                                    flag_futures_ohlc_open = True
                                else:
                                    선물_현재가_버퍼.append(선물_현재가)                            
                            else:
                                if df_futures_graph.at[ovc_x_idx, 'open'] != df_futures_graph.at[ovc_x_idx, 'open']:
                                    df_futures_graph.at[ovc_x_idx, 'open'] = df_futures_graph.at[ovc_x_idx - 1, 'close']
                                    del 선물_현재가_버퍼[:]
                                else:
                                    pass

                                선물_현재가_버퍼.append(선물_현재가)

                                if max(선물_현재가_버퍼) > 0:
                                    df_futures_graph.at[ovc_x_idx, 'high'] = max(선물_현재가_버퍼)
                                else:
                                    pass

                                if min(선물_현재가_버퍼) == 0:

                                    if max(선물_현재가_버퍼) > 0:
                                        df_futures_graph.at[ovc_x_idx, 'low'] = max(선물_현재가_버퍼)
                                    else:
                                        pass
                                else:
                                    df_futures_graph.at[ovc_x_idx, 'low'] = min(선물_현재가_버퍼)

                                df_futures_graph.at[ovc_x_idx, 'close'] = 선물_현재가

                                flag_futures_ohlc_open = False
                        else:
                            pass                                 

                        # Bollinger Bands
                        df_futures_graph.at[ovc_x_idx, 'middle'] = (df_futures_graph.at[ovc_x_idx, 'high'] + df_futures_graph.at[ovc_x_idx, 'low']) / 2
                        upper, middle, lower = talib.BBANDS(np.array(df_futures_graph['middle'], dtype=float), timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_TYPE)

                        df_futures_graph['BBUpper'] = upper
                        df_futures_graph['BBMiddle'] = middle
                        df_futures_graph['BBLower'] = lower

                        # MACD
                        # list of values for the Moving Average Type:  
                        # 0: MA_Type.SMA (simple)  
                        # 1: MA_Type.EMA (exponential)  
                        # 2: MA_Type.WMA (weighted)  
                        # 3: MA_Type.DEMA (double exponential)  
                        # 4: MA_Type.TEMA (triple exponential)  
                        # 5: MA_Type.TRIMA (triangular)  
                        # 6: MA_Type.KAMA (Kaufman adaptive)  
                        # 7: MA_Type.MAMA (Mesa adaptive)  
                        # 8: MA_Type.T3 (triple exponential T3)

                        #macd, macdsignal, macdhist = talib.MACDEXT(np.array(df_futures_graph['close'], dtype=float), fastperiod=12, slowperiod=26, signalperiod=9, \
                            #fastmatype=MA_TYPE, slowmatype=MA_TYPE, signalmatype=MA_TYPE)

                        #df_futures_graph['MACD'] = macd
                        #df_futures_graph['MACDSig'] = macdsignal
                        #df_futures_graph['MACDHist'] = macdhist

                        # Parabolic SAR
                        parabolic_sar = talib.SAR(np.array(df_futures_graph['high'], dtype=float), np.array(df_futures_graph['low'], dtype=float), acceleration=0.02, maximum=0.2)

                        # PSARIndicator 함수 오동작하는 듯...
                        #ta_psar = ta.trend.PSARIndicator(df_futures_graph['high'], df_futures_graph['low'], df_futures_graph['close'])

                        df_futures_graph['PSAR'] = parabolic_sar
                        #df_futures_graph['TA_PSAR'] = ta_psar.psar()

                        # MAMA
                        mama, fama = talib.MAMA(np.array(df_futures_graph['close'], dtype=float), fastlimit=0.5, slowlimit=0.05)

                        df_futures_graph['MAMA'] = mama
                        df_futures_graph['FAMA'] = fama

                        if df_futures_graph.at[ovc_x_idx, 'FAMA'] == df_futures_graph.at[ovc_x_idx, 'FAMA'] and df_futures_graph.at[ovc_x_idx, 'BBLower'] == df_futures_graph.at[ovc_x_idx, 'BBLower']:

                            if df_futures_graph.at[ovc_x_idx, 'FAMA'] < df_futures_graph.at[ovc_x_idx, 'BBLower']:
                                df_futures_graph.at[ovc_x_idx, 'A_FAMA'] = df_futures_graph.at[ovc_x_idx, 'BBLower']
                            else:
                                df_futures_graph.at[ovc_x_idx, 'A_FAMA'] = df_futures_graph.at[ovc_x_idx, 'FAMA']
                        else:
                            pass

                        # Ichimoku Indicator
                        #futures_Ichimoku = ta.trend.IchimokuIndicator(df_futures_graph['high'], df_futures_graph['low'], n1=9, n2=26, n3=52, visual=True)
                        futures_Ichimoku = ta.trend.IchimokuIndicator(df_futures_graph['high'], df_futures_graph['low'])

                        df_futures_graph['SPAN_A'] = futures_Ichimoku.ichimoku_a()
                        df_futures_graph['SPAN_B'] = futures_Ichimoku.ichimoku_b()
                        df_futures_graph['OE_BASE'] = futures_Ichimoku.ichimoku_base_line()
                        df_futures_graph['OE_CONV'] = futures_Ichimoku.ichimoku_conversion_line()
                    else:
                        pass
                else:
                    pass

            elif szTrCode == 'S3_':
                
                #현재가 = format(result['현재가'], ',')

                # S3 데이타표시
                if result['단축코드'] == SAMSUNG:
                    '''
                    if result['전일대비구분'] == '5':

                        jisu_str = "SAMSUNG: {0}({1}, {2:0.1f}%)".format(현재가, format(-result['전일대비'], ','), result['등락율'])
                        self.label_samsung.setText(jisu_str)
                        self.label_samsung.setStyleSheet('background-color: blue ; color: white')

                    elif result['전일대비구분'] == '2':

                        jisu_str = "SAMSUNG: {0}({1}, {2:0.1f}%)".format(현재가, format(result['전일대비'], ','), result['등락율'])
                        self.label_samsung.setText(jisu_str)
                        self.label_samsung.setStyleSheet('background-color: red ; color: white')

                    else:
                        jisu_str = "SAMSUNG: {0}({1})".format(현재가, format(result['전일대비'], ','))
                        self.label_samsung.setText(jisu_str)
                        self.label_samsung.setStyleSheet('background-color: yellow ; color: black')
                    '''
                    global samsung_price, samsung_text_color                    

                    if result['현재가'] != samsung_price:

                        if result['현재가'] > samsung_price:

                            temp_str = format(result['현재가'], ',')

                            if result['전일대비구분'] == '5':

                                jisu_str = "SS: {0} ▲ (-{1}, {2:0.1f}%)".format(temp_str, format(result['전일대비'], ','), result['등락율'])
                                self.label_samsung.setText(jisu_str)
                                self.label_samsung.setStyleSheet('background-color: pink ; color: blue')
                                samsung_text_color = 'blue'

                            elif result['전일대비구분'] == '2':

                                jisu_str = "SS: {0} ▲ ({1}, {2:0.1f}%)".format(temp_str, format(result['전일대비'], ','), result['등락율'])
                                self.label_samsung.setText(jisu_str)
                                self.label_samsung.setStyleSheet('background-color: pink ; color: red')
                                samsung_text_color = 'red'
                            else:
                                pass

                        elif result['현재가'] < samsung_price:

                            temp_str = format(result['현재가'], ',')

                            if result['전일대비구분'] == '5':

                                jisu_str = "SS: {0} ▼ (-{1}, {2:0.1f}%)".format(temp_str, format(result['전일대비'], ','), result['등락율'])
                                self.label_samsung.setText(jisu_str)
                                self.label_samsung.setStyleSheet('background-color: lightskyblue ; color: blue')
                                samsung_text_color = 'blue'

                            elif result['전일대비구분'] == '2':

                                jisu_str = "SS: {0} ▼ ({1}, {2:0.1f}%)".format(temp_str, format(result['전일대비'], ','), result['등락율'])
                                self.label_samsung.setText(jisu_str)
                                self.label_samsung.setStyleSheet('background-color: lightskyblue ; color: red')
                                samsung_text_color = 'red'
                            else:
                                pass
                        else:
                            pass

                        samsung_price = result['현재가']
                    else:
                        pass
                    
                else:
                    pass
                
                '''
                elif result['단축코드'] == HYUNDAI:

                    if result['전일대비구분'] == '5':

                        jisu_str = "HD : {0}({1}, {2:0.1f}%)".format(현재가, format(-result['전일대비'], ','), result['등락율'])
                        self.label_2nd.setText(jisu_str)
                        self.label_2nd.setStyleSheet('background-color: blue ; color: white')

                    elif result['전일대비구분'] == '2':

                        jisu_str = "HD : {0}({1}, {2:0.1f}%)".format(현재가, format(result['전일대비'], ','), result['등락율'])
                        self.label_2nd.setText(jisu_str)
                        self.label_2nd.setStyleSheet('background-color: red ; color: white')

                    else:
                        jisu_str = "HD : {0}({1})".format(현재가, format(result['전일대비'], ','))
                        self.label_2nd.setText(jisu_str)
                        self.label_2nd.setStyleSheet('background-color: yellow ; color: black')

                elif result['단축코드'] == Celltrion:                    
                    
                    if result['전일대비구분'] == '5':

                        jisu_str = "CTRO : {0}({1}, {2:0.1f}%)".format(현재가, format(-result['전일대비'], ','), result['등락율'])
                        self.label_3rd.setText(jisu_str)
                        self.label_3rd.setStyleSheet('background-color: blue ; color: white')

                    elif result['전일대비구분'] == '2':

                        jisu_str = "CTRO : {0}({1}, {2:0.1f}%)".format(현재가, format(result['전일대비'], ','), result['등락율'])
                        self.label_3rd.setText(jisu_str)
                        self.label_3rd.setStyleSheet('background-color: red ; color: white')

                    else:
                        jisu_str = "CTRO : {0}({1})".format(현재가, format(result['전일대비'], ','))
                        self.label_3rd.setText(jisu_str)
                        self.label_3rd.setStyleSheet('background-color: yellow ; color: black')                    
                else:
                    pass
                '''

            elif szTrCode == 'IJ_':

                global kospi_price, kospi_text_color   
                global kosdaq_price, kosdaq_text_color 
                global flag_kp200_low, flag_kp200_high
                global flag_kp200_start_set
                global 장시작_중심가 

                # IJ 데이타표시
                if result['업종코드'] == KOSPI200:

                    # kp200 현재가
                    if result['지수'] != self.tableWidget_fut.item(2, Futures_column.현재가.value).text().split('\n')[0]:

                        fut_realdata['KP200'] = float(result['지수'])
                        kp200_realdata['현재가'] = float(result['지수'])
                        df_fut.at[2, '현재가'] = float(result['지수'])
                        
                        df_futures_graph.at[ovc_x_idx, 'kp200'] = float(result['지수'])
                        df_kp200_graph.at[ovc_x_idx, 'price'] = float(result['지수'])

                        if float(result['지수']) < float(self.tableWidget_fut.item(2, Futures_column.현재가.value).text().split('\n')[0]):
                            item = QTableWidgetItem(result['지수'] + '\n' + '▼')
                            item.setBackground(QBrush(lightskyblue))
                        elif float(result['지수']) > float(self.tableWidget_fut.item(2, Futures_column.현재가.value).text().split('\n')[0]):
                            item = QTableWidgetItem(result['지수'] + '\n' + '▲')
                            item.setBackground(QBrush(pink))
                        else:    
                            item = QTableWidgetItem(result['지수'])
                            item.setBackground(QBrush(옅은회색))

                        if float(result['지수']) > kp200_시가:
                            item.setForeground(QBrush(적색))
                        elif float(result['지수']) < kp200_시가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_fut.setItem(2, Futures_column.현재가.value, item)

                        self.tableWidget_fut.resizeRowToContents(2)
                    else:
                        pass

                    if result['시가지수'] != self.tableWidget_fut.item(2, Futures_column.시가.value).text() and not flag_kp200_start_set:

                        flag_kp200_start_set = True

                        kp200_시가 = float(result['시가지수'])
                        kp200_realdata['시가'] = float(result['시가지수'])
                        df_futures_graph.at[ovc_x_idx, 'kp200'] = float(result['시가지수'])
                        df_kp200_graph.at[ovc_x_idx, 'price'] = float(result['시가지수'])

                        item = QTableWidgetItem(result['시가지수'])
                        item.setTextAlignment(Qt.AlignCenter)

                        if kp200_시가 > KP200_전일종가:
                            item.setForeground(QBrush(적색))
                        elif kp200_시가 < KP200_전일종가:
                            item.setForeground(QBrush(청색))
                        else:
                            item.setForeground(QBrush(검정색))

                        self.tableWidget_fut.setItem(2, Futures_column.시가.value, item)

                        item = QTableWidgetItem("{0:.2f}".format(kp200_시가 - KP200_전일종가))
                        item.setTextAlignment(Qt.AlignCenter)

                        if kp200_시가 > KP200_전일종가:
                            item.setBackground(QBrush(콜기준가색))
                            item.setForeground(QBrush(검정색))
                        elif kp200_시가 < KP200_전일종가:
                            item.setBackground(QBrush(풋기준가색))
                            item.setForeground(QBrush(흰색))
                        else:
                            item.setBackground(QBrush(흰색)) 

                        self.tableWidget_fut.setItem(2, Futures_column.시가갭.value, item)

                        str = '[{0:02d}:{1:02d}:{2:02d}] KP200 시작가 {3:.2f}를 수신했습니다.\r'.format(
                            int(result['시간'][0:2]),
                            int(result['시간'][2:4]),
                            int(result['시간'][4:6]),
                            kp200_시가)
                        self.textBrowser.append(str)

                        if KP200_전저 > 0 and KP200_전고 > 0:

                            kp200_피봇 = self.calc_pivot(KP200_전저, KP200_전고, KP200_전일종가, kp200_시가)         

                            item = QTableWidgetItem("{0:.2f}".format(kp200_피봇))
                            item.setTextAlignment(Qt.AlignCenter)
                            self.tableWidget_fut.setItem(2, Futures_column.피봇.value, item)
                        else:
                            pass

                        # 선물 피봇을 다시 계산하여 표시한다.
                        선물_피봇 = self.calc_pivot(선물_전저, 선물_전고, 선물_종가, 선물_시가)

                        item = QTableWidgetItem("{0:.2f}".format(선물_피봇))
                        item.setTextAlignment(Qt.AlignCenter)

                        if NightTime:
                            self.tableWidget_fut.setItem(0, Futures_column.피봇.value, item)
                            df_fut.loc[0, '피봇'] = 선물_피봇
                            cme_realdata['피봇'] = 선물_피봇
                        else:
                            self.tableWidget_fut.setItem(1, Futures_column.피봇.value, item)
                            df_fut.loc[1, '피봇'] = 선물_피봇
                            fut_realdata['피봇'] = 선물_피봇              
                        
                        atm_str = self.get_atm_str(kp200_시가)
                        atm_index = opt_actval.index(atm_str)

                        if atm_str[-1] == '2' or atm_str[-1] == '7':

                            atm_val = float(atm_str) + 0.5
                        else:
                            atm_val = float(atm_str)

                        call_atm_value = df_call.at[atm_index, '현재가']
                        put_atm_value = df_put.at[atm_index, '현재가']

                        if call_atm_value >= put_atm_value:
                            atm_zero_cha = round((call_atm_value - put_atm_value) , 2)
                        else:
                            atm_zero_cha = round((put_atm_value - call_atm_value) , 2)

                        장시작_양합 = call_atm_value + put_atm_value

                        if call_atm_value > put_atm_value:

                            장시작_중심가 = round((put_atm_value + atm_zero_cha / 2), 2)

                        elif put_atm_value > call_atm_value:

                            장시작_중심가 = round((call_atm_value + atm_zero_cha / 2), 2)
                        else:
                            장시작_중심가 = call_atm_value 

                        # kp200 맥점 10개를 리스트로 만듬
                        global KP200_COREVAL

                        # KP200_COREVAL 리스트 기존데이타 삭제(초기화)
                        del KP200_COREVAL[:]

                        for i in range(6):

                            KP200_COREVAL.append(atm_val - 2.5 * i + 1.25) 

                        for i in range(1, 5):

                            KP200_COREVAL.append(atm_val + 2.5 * i + 1.25)

                        KP200_COREVAL.sort()

                        str = '[{0:02d}:{1:02d}:{2:02d}] KP200 맥점리스트 = {3}\r'.format(
                            int(result['시간'][0:2]),
                            int(result['시간'][2:4]),
                            int(result['시간'][4:6]),
                            KP200_COREVAL)
                        self.textBrowser.append(str)                         
                    else:
                        pass

                    if result['저가지수'] != self.tableWidget_fut.item(2, Futures_column.저가.value).text():

                        flag_kp200_low = True

                        kp200_realdata['저가'] = round(float(result['저가지수']), 2)
                        kp200_저가 = round(float(result['저가지수']), 2)

                        item = QTableWidgetItem(result['저가지수'])
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))                     
                        self.tableWidget_fut.setItem(2, Futures_column.저가.value, item)

                        self.kp200_node_color_clear()
                        self.kp200_node_coloring()

                        self.kp200_low_node_coloring()

                        str = '[{0:02d}:{1:02d}:{2:02d}] kp200 저가 {3} Update...\r'.format(
                            int(result['시간'][0:2]),
                            int(result['시간'][2:4]),
                            int(result['시간'][4:6]), kp200_realdata['저가'])
                        self.textBrowser.append(str)
                    else:
                        pass

                    if result['고가지수'] != self.tableWidget_fut.item(2, Futures_column.고가.value).text():

                        flag_kp200_high = True

                        kp200_realdata['고가'] = round(float(result['고가지수']), 2)
                        kp200_고가 = round(float(result['고가지수']), 2)

                        item = QTableWidgetItem(result['고가지수'])
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        self.tableWidget_fut.setItem(2, Futures_column.고가.value, item)

                        self.kp200_node_color_clear()
                        self.kp200_node_coloring()

                        self.kp200_high_node_coloring()

                        str = '[{0:02d}:{1:02d}:{2:02d}] kp200 고가 {3} Update...\r'.format(
                            int(result['시간'][0:2]),
                            int(result['시간'][2:4]),
                            int(result['시간'][4:6]), kp200_realdata['고가'])
                        self.textBrowser.append(str)
                    else:
                        pass

                elif result['업종코드'] == KOSPI:                                     

                    if round(float(result['지수']), 2) != kospi_price:

                        kospi_str = format(round(float(result['지수']), 2), ',')

                        if round(float(result['지수']), 2) > kospi_price:

                            if result['전일대비구분'] == '5':

                                jisu_str = "KOSPI: {0} ▲ (-{1:.2f}, {2:0.1f}%)".format(kospi_str, result['전일비'], result['등락율'])
                                self.label_kospi.setText(jisu_str)
                                self.label_kospi.setStyleSheet('background-color: pink ; color: blue')
                                kospi_text_color = 'blue'

                            elif result['전일대비구분'] == '2':

                                jisu_str = "KOSPI: {0} ▲ ({1:.2f}, {2:0.1f}%)".format(kospi_str, result['전일비'], result['등락율'])
                                self.label_kospi.setText(jisu_str)
                                self.label_kospi.setStyleSheet('background-color: pink ; color: red')
                                kospi_text_color = 'red'
                            else:
                                pass

                        elif round(float(result['지수']), 2) < kospi_price:

                            if result['전일대비구분'] == '5':

                                jisu_str = "KOSPI: {0} ▼ (-{1:.2f}, {2:0.1f}%)".format(kospi_str, result['전일비'], result['등락율'])
                                self.label_kospi.setText(jisu_str)
                                self.label_kospi.setStyleSheet('background-color: lightskyblue ; color: blue')
                                kospi_text_color = 'blue'

                            elif result['전일대비구분'] == '2':

                                jisu_str = "KOSPI: {0} ▼ ({1:.2f}, {2:0.1f}%)".format(kospi_str, result['전일비'], result['등락율'])
                                self.label_kospi.setText(jisu_str)
                                self.label_kospi.setStyleSheet('background-color: lightskyblue ; color: red')
                                kospi_text_color = 'red'
                            else:
                                pass
                        else:
                            pass

                        kospi_price = round(float(result['지수']), 2)
                    else:
                        pass                    

                elif result['업종코드'] == KOSDAQ:                                       

                    if round(float(result['지수']), 2) != kosdaq_price:    
                        
                        kosdaq_str = format(round(float(result['지수']), 2), ',')                    

                        if round(float(result['지수']), 2) > kosdaq_price:

                            if result['전일대비구분'] == '5':

                                jisu_str = "KOSDAQ: {0} ▲ (-{1:.2f}, {2:0.1f}%)".format(kosdaq_str, result['전일비'], result['등락율'])
                                self.label_kosdaq.setText(jisu_str)
                                self.label_kosdaq.setStyleSheet('background-color: pink ; color: blue')
                                kosdaq_text_color = 'blue'

                            elif result['전일대비구분'] == '2':

                                jisu_str = "KOSDAQ: {0} ▲ ({1:.2f}, {2:0.1f}%)".format(kosdaq_str, result['전일비'], result['등락율'])
                                self.label_kosdaq.setText(jisu_str)
                                self.label_kosdaq.setStyleSheet('background-color: pink ; color: red')
                                kosdaq_text_color = 'red'
                            else:
                                pass

                        elif round(float(result['지수']), 2) < kosdaq_price:

                            if result['전일대비구분'] == '5':

                                jisu_str = "KOSDAQ: {0} ▼ (-{1:.2f}, {2:0.1f}%)".format(kosdaq_str, result['전일비'], result['등락율'])
                                self.label_kosdaq.setText(jisu_str)
                                self.label_kosdaq.setStyleSheet('background-color: lightskyblue ; color: blue')
                                kosdaq_text_color = 'blue'

                            elif result['전일대비구분'] == '2':

                                jisu_str = "KOSDAQ: {0} ▼ ({1:.2f}, {2:0.1f}%)".format(kosdaq_str, result['전일비'], result['등락율'])
                                self.label_kosdaq.setText(jisu_str)
                                self.label_kosdaq.setStyleSheet('background-color: lightskyblue ; color: red')
                                kosdaq_text_color = 'red'
                            else:
                                pass
                        else:
                            pass

                        kosdaq_price = round(float(result['지수']), 2)
                    else:
                        pass                    
                else:
                    pass

            elif szTrCode == 'BM_':

                if result['업종코드'] == FUTURES and result['투자자코드'] == FOREIGNER or result['업종코드'] == CME and result['투자자코드'] == FOREIGNER:

                    FUT_FOREIGNER_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_FOREIGNER_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                    FUT_FOREIGNER_직전대비.extend([int(result['거래대금순매수직전대비'])])
                    temp = list(FUT_FOREIGNER_직전대비)

                    순매수 = format(FUT_FOREIGNER_거래대금순매수, ',')

                    if min(temp) > 0:

                        item_str = "{0}\n({1})⬈".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 0).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(적색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 0, item)
                        else:
                            pass

                    elif max(temp) < 0:

                        item_str = "{0}\n({1})⬊".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 0).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(청색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 0, item)
                        else:
                            pass

                    else:

                        item_str = "{0}\n({1})".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 0).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_supply.setItem(0, 0, item)
                        else:
                            pass

                elif result['업종코드'] == FUTURES and result['투자자코드'] == RETAIL or result['업종코드'] == CME and result['투자자코드'] == RETAIL:

                    FUT_RETAIL_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_RETAIL_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                    FUT_RETAIL_직전대비.extend([int(result['거래대금순매수직전대비'])])
                    temp = list(FUT_RETAIL_직전대비)

                    순매수 = format(FUT_RETAIL_거래대금순매수, ',')

                    if min(temp) > 0:

                        item_str = "{0}\n({1})⬈".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 3).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            #item.setBackground(QBrush(적색))
                            #item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 3, item)
                        else:
                            pass

                    elif max(temp) < 0:

                        item_str = "{0}\n({1})⬊".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 3).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            #item.setBackground(QBrush(청색))
                            #item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 3, item)
                        else:
                            pass

                    else:
                        item_str = "{0}\n({1})".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 3).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            #item.setBackground(QBrush(흰색))
                            #item.setForeground(QBrush(검정색))
                            self.tableWidget_supply.setItem(0, 3, item)
                        else:
                            pass

                elif result['업종코드'] == FUTURES and result['투자자코드'] == INSTITUTIONAL or result['업종코드'] == CME and result['투자자코드'] == INSTITUTIONAL:

                    FUT_INSTITUTIONAL_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_INSTITUTIONAL_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                    기관_거래대금순매수 = FUT_INSTITUTIONAL_거래대금순매수 + FUT_STOCK_거래대금순매수 + FUT_BOHEOM_거래대금순매수 + \
                                 FUT_TOOSIN_거래대금순매수 + FUT_BANK_거래대금순매수 + FUT_JONGGEUM_거래대금순매수 + \
                                 FUT_GIGEUM_거래대금순매수 + FUT_GITA_거래대금순매수

                    기관_거래대금순매수_직전대비 = FUT_INSTITUTIONAL_거래대금순매수_직전대비 + FUT_STOCK_거래대금순매수_직전대비 + \
                                      FUT_BOHEOM_거래대금순매수_직전대비 + FUT_TOOSIN_거래대금순매수_직전대비 + FUT_BANK_거래대금순매수_직전대비 + \
                                      FUT_JONGGEUM_거래대금순매수_직전대비 + FUT_GIGEUM_거래대금순매수_직전대비 + FUT_GITA_거래대금순매수_직전대비

                    FUT_INSTITUTIONAL_직전대비.extend([기관_거래대금순매수_직전대비])
                    temp = list(FUT_INSTITUTIONAL_직전대비)

                    순매수 = format(기관_거래대금순매수, ',')

                    if min(temp) > 0:

                        item_str = "{0}\n({1})⬈".format(순매수, 기관_거래대금순매수_직전대비)

                        if item_str != self.tableWidget_supply.item(0, 4).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(적색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 4, item)
                        else:
                            pass

                    elif max(temp) < 0:

                        item_str = "{0}\n({1})⬊".format(순매수, 기관_거래대금순매수_직전대비)

                        if item_str != self.tableWidget_supply.item(0, 4).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(청색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 4, item)
                        else:
                            pass

                    else:
                        item_str = "{0}\n({1})".format(순매수, 기관_거래대금순매수_직전대비)

                        if item_str != self.tableWidget_supply.item(0, 4).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_supply.setItem(0, 4, item)
                        else:
                            pass

                elif result['업종코드'] == FUTURES and result['투자자코드'] == STOCK or result['업종코드'] == CME and result['투자자코드'] == STOCK:

                    FUT_STOCK_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_STOCK_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == FUTURES and result['투자자코드'] == BOHEOM or result['업종코드'] == CME and result['투자자코드'] == BOHEOM:

                    FUT_BOHEOM_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_BOHEOM_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == FUTURES and result['투자자코드'] == TOOSIN or result['업종코드'] == CME and result['투자자코드'] == TOOSIN:

                    FUT_TOOSIN_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_TOOSIN_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == FUTURES and result['투자자코드'] == BANK or result['업종코드'] == CME and result['투자자코드'] == BANK:

                    FUT_BANK_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_BANK_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == FUTURES and result['투자자코드'] == JONGGEUM or result['업종코드'] == CME and result['투자자코드'] == JONGGEUM:

                    FUT_JONGGEUM_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_JONGGEUM_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == FUTURES and result['투자자코드'] == GIGEUM or result['업종코드'] == CME and result['투자자코드'] == GIGEUM:

                    FUT_GIGEUM_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_GIGEUM_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == FUTURES and result['투자자코드'] == GITA or result['업종코드'] == CME and result['투자자코드'] == GITA:

                    FUT_GITA_거래대금순매수 = int(result['거래대금순매수'])
                    FUT_GITA_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == FOREIGNER:

                    KOSPI_FOREIGNER_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_FOREIGNER_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                    KOSPI_FOREIGNER_직전대비.extend([int(result['거래대금순매수직전대비'])])
                    temp = list(KOSPI_FOREIGNER_직전대비)

                    순매수 = format(KOSPI_FOREIGNER_거래대금순매수, ',')

                    if min(temp) > 0:

                        item_str = "{0}\n({1})⬈".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 2).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(적색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 2, item)
                        else:
                            pass

                    elif max(temp) < 0:

                        item_str = "{0}\n({1})⬊".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 2).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(청색))
                            item.setForeground(QBrush(흰색))
                            self.tableWidget_supply.setItem(0, 2, item)
                        else:
                            pass

                    else:
                        item_str = "{0}\n({1})".format(순매수, result['거래대금순매수직전대비'])

                        if item_str != self.tableWidget_supply.item(0, 2).text():
                            item = QTableWidgetItem(item_str)
                            item.setTextAlignment(Qt.AlignCenter)
                            item.setBackground(QBrush(흰색))
                            item.setForeground(QBrush(검정색))
                            self.tableWidget_supply.setItem(0, 2, item)
                        else:
                            pass

                elif result['업종코드'] == KOSPI and result['투자자코드'] == RETAIL:

                    KOSPI_RETAIL_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_RETAIL_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == INSTITUTIONAL:

                    KOSPI_INSTITUTIONAL_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == STOCK:

                    KOSPI_STOCK_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_STOCK_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == BOHEOM:

                    KOSPI_BOHEOM_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_BOHEOM_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == TOOSIN:

                    KOSPI_TOOSIN_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_TOOSIN_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == BANK:

                    KOSPI_BANK_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_BANK_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == JONGGEUM:

                    KOSPI_JONGGEUM_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_JONGGEUM_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == GIGEUM:

                    KOSPI_GIGEUM_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_GIGEUM_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])

                elif result['업종코드'] == KOSPI and result['투자자코드'] == GITA:

                    KOSPI_GITA_거래대금순매수 = int(result['거래대금순매수'])
                    KOSPI_GITA_거래대금순매수_직전대비 = int(result['거래대금순매수직전대비'])
                else:
                    pass

                if NightTime:

                    선물_거래대금순매수 = FUT_FOREIGNER_거래대금순매수 + FUT_RETAIL_거래대금순매수 + \
                                 FUT_INSTITUTIONAL_거래대금순매수 + FUT_STOCK_거래대금순매수 + FUT_BOHEOM_거래대금순매수 + \
                                 FUT_TOOSIN_거래대금순매수 + FUT_BANK_거래대금순매수 + FUT_JONGGEUM_거래대금순매수 + \
                                 FUT_GIGEUM_거래대금순매수 + FUT_GITA_거래대금순매수

                    선물_거래대금순매수_직전대비 = FUT_FOREIGNER_거래대금순매수_직전대비 + FUT_RETAIL_거래대금순매수_직전대비 + \
                                      FUT_INSTITUTIONAL_거래대금순매수_직전대비 + FUT_STOCK_거래대금순매수_직전대비 + \
                                      FUT_BOHEOM_거래대금순매수_직전대비 + FUT_TOOSIN_거래대금순매수_직전대비 + FUT_BANK_거래대금순매수_직전대비 + \
                                      FUT_JONGGEUM_거래대금순매수_직전대비 + FUT_GIGEUM_거래대금순매수_직전대비 + \
                                      FUT_GITA_거래대금순매수_직전대비

                    현물_거래대금순매수 = 0
                    현물_거래대금순매수_직전대비 = 0

                    temp1 = format(선물_거래대금순매수, ',')
                    temp2 = format(현물_거래대금순매수, ',')
                    '''
                    item_str = "{0}({1})/{2}({3})\n({4} : {5})".format(temp1, 선물_거래대금순매수_직전대비, temp2, 현물_거래대금순매수_직전대비, \
                        repr(pre_콜시가갭합), repr(pre_풋시가갭합))
                    '''
                    item_str = "{0}({1})\n{2}({3})".format(temp1, 선물_거래대금순매수_직전대비, temp2, 현물_거래대금순매수_직전대비)

                    if item_str != self.tableWidget_supply.item(0, 5).text():
                        item = QTableWidgetItem(item_str)
                        item.setTextAlignment(Qt.AlignCenter)
                        self.tableWidget_supply.setItem(0, 5, item)
                        '''
                        if ResizeRowsToContents:
                            self.tableWidget_supply.resizeRowsToContents()
                            self.tableWidget_supply.resizeColumnsToContents()
                        else:
                            pass
                        '''                        
                    else:
                        pass
                else:
                    pass

            elif szTrCode == 'PM_':

                프로그램_전체순매수금액 = int(result['전체순매수금액합계'] / 100)
                프로그램_전체순매수금액직전대비 = int(result['전체순매수금액직전대비'] / 100)

                선물_거래대금순매수 = FUT_FOREIGNER_거래대금순매수 + FUT_RETAIL_거래대금순매수 + \
                             FUT_INSTITUTIONAL_거래대금순매수 + FUT_STOCK_거래대금순매수 + FUT_BOHEOM_거래대금순매수 + \
                             FUT_TOOSIN_거래대금순매수 + FUT_BANK_거래대금순매수 + FUT_JONGGEUM_거래대금순매수 + \
                             FUT_GIGEUM_거래대금순매수 + FUT_GITA_거래대금순매수

                선물_거래대금순매수_직전대비 = FUT_FOREIGNER_거래대금순매수_직전대비 + FUT_RETAIL_거래대금순매수_직전대비 + \
                                  FUT_INSTITUTIONAL_거래대금순매수_직전대비 + FUT_STOCK_거래대금순매수_직전대비 + \
                                  FUT_BOHEOM_거래대금순매수_직전대비 + FUT_TOOSIN_거래대금순매수_직전대비 + FUT_BANK_거래대금순매수_직전대비 + \
                                  FUT_JONGGEUM_거래대금순매수_직전대비 + FUT_GIGEUM_거래대금순매수_직전대비 + \
                                  FUT_GITA_거래대금순매수_직전대비

                현물_거래대금순매수 = KOSPI_FOREIGNER_거래대금순매수 + KOSPI_RETAIL_거래대금순매수 + \
                             KOSPI_INSTITUTIONAL_거래대금순매수 + KOSPI_STOCK_거래대금순매수 + KOSPI_BOHEOM_거래대금순매수 + \
                             KOSPI_TOOSIN_거래대금순매수 + KOSPI_BANK_거래대금순매수 + KOSPI_JONGGEUM_거래대금순매수 + \
                             KOSPI_GIGEUM_거래대금순매수 + KOSPI_GITA_거래대금순매수 + 프로그램_전체순매수금액

                현물_거래대금순매수_직전대비 = KOSPI_FOREIGNER_거래대금순매수_직전대비 + KOSPI_RETAIL_거래대금순매수_직전대비 + \
                                  KOSPI_INSTITUTIONAL_거래대금순매수_직전대비 + KOSPI_STOCK_거래대금순매수_직전대비 + \
                                  KOSPI_BOHEOM_거래대금순매수_직전대비 + KOSPI_TOOSIN_거래대금순매수_직전대비 + KOSPI_BANK_거래대금순매수_직전대비 + \
                                  KOSPI_JONGGEUM_거래대금순매수_직전대비 + KOSPI_GIGEUM_거래대금순매수_직전대비 + \
                                  KOSPI_GITA_거래대금순매수_직전대비 + 프로그램_전체순매수금액직전대비

                PROGRAM_직전대비.extend([프로그램_전체순매수금액직전대비])
                temp = list(PROGRAM_직전대비)

                순매수 = format(프로그램_전체순매수금액, ',')

                if min(temp) > 0:

                    item_str = "{0}\n({1})⬈".format(순매수, 프로그램_전체순매수금액직전대비)

                    if item_str != self.tableWidget_supply.item(0, 1).text():
                        item = QTableWidgetItem(item_str)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(적색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_supply.setItem(0, 1, item)
                    else:
                        pass

                elif max(temp) < 0:

                    item_str = "{0}\n({1})⬊".format(순매수, 프로그램_전체순매수금액직전대비)

                    if item_str != self.tableWidget_supply.item(0, 1).text():
                        item = QTableWidgetItem(item_str)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(청색))
                        item.setForeground(QBrush(흰색))
                        self.tableWidget_supply.setItem(0, 1, item)
                    else:
                        pass

                else:
                    item_str = "{0}\n({1})".format(순매수, 프로그램_전체순매수금액직전대비)

                    if item_str != self.tableWidget_supply.item(0, 1).text():
                        item = QTableWidgetItem(item_str)
                        item.setTextAlignment(Qt.AlignCenter)
                        item.setBackground(QBrush(흰색))
                        item.setForeground(QBrush(검정색))
                        self.tableWidget_supply.setItem(0, 1, item)
                    else:
                        pass

                temp1 = format(선물_거래대금순매수, ',')
                temp2 = format(현물_거래대금순매수, ',')
                '''
                item_str = "{0}({1})/{2}({3})\n({4} : {5})".format(temp1, 선물_거래대금순매수_직전대비, temp2, 현물_거래대금순매수_직전대비, \
                        repr(pre_콜시가갭합), repr(pre_풋시가갭합))
                '''
                item_str = "{0}({1})\n{2}({3})".format(temp1, 선물_거래대금순매수_직전대비, temp2, 현물_거래대금순매수_직전대비)

                if item_str != self.tableWidget_supply.item(0, 5).text():
                    item = QTableWidgetItem(item_str)
                    item.setTextAlignment(Qt.AlignCenter)
                    self.tableWidget_supply.setItem(0, 5, item)
                else:
                    pass

            elif szTrCode == 'FC0' or szTrCode == 'NC0':

                if pre_start:
                    pre_start = False
                else:
                    pass

                if szTrCode == 'NC0':    

                    if not market_service:
                        market_service = True
                    else:
                        pass
                else:
                    pass
                
                # 차월물 처리
                if OPT_NEXT_MONTH and result['단축코드'] == cmshcode:
                    pass
                else:
                    pass                

                self.futures_display(result)

            elif szTrCode == 'OC0' or szTrCode == 'EC0':

                if not flag_option_start:
                    flag_option_start = True
                else:
                    pass

                if pre_start:
                    pre_start = False
                else:
                    pass

                if not market_service:
                    market_service = True
                else:
                    pass

                # 차월물 처리
                if OPT_NEXT_MONTH and result['단축코드'][3:5] == NM_OPTCODE:
                    pass
                else:
                    pass

                if result['단축코드'][0:3] == '201':

                    call_result = copy.deepcopy(result)

                    if FLAG_GUEST_CONTROL:                        
                        self.call_display()
                    else:
                        pass

                    #self.call_volume_power_display()                    

                elif result['단축코드'][0:3] == '301':

                    put_result = copy.deepcopy(result)

                    self.put_display()
                    #self.put_volume_power_display()                    
                else:
                    pass

            elif szTrCode == 'OH0' or szTrCode == 'EH0':

                if not receive_quote:
                    receive_quote = True
                else:
                    pass

                if not market_service:
                    market_service = True
                else:
                    pass

                # 차월물 처리
                if OPT_NEXT_MONTH and result['단축코드'][3:5] == NM_OPTCODE:
                    pass
                else:
                    pass

                if result['단축코드'][0:3] == '201':

                    index = call_행사가.index(result['단축코드'][5:8])

                    df_call_hoga.loc[index, '매수건수'] = result['매수호가총건수']
                    df_call_hoga.loc[index, '매도건수'] = result['매도호가총건수']
                    df_call_hoga.loc[index, '매수잔량'] = result['매수호가총수량']
                    df_call_hoga.loc[index, '매도잔량'] = result['매도호가총수량']

                    #opt_call_ho_update_counter += 1

                elif result['단축코드'][0:3] == '301':

                    index = put_행사가.index(result['단축코드'][5:8])

                    df_put_hoga.loc[index, '매수건수'] = result['매수호가총건수']
                    df_put_hoga.loc[index, '매도건수'] = result['매도호가총건수']
                    df_put_hoga.loc[index, '매수잔량'] = result['매수호가총수량']
                    df_put_hoga.loc[index, '매도잔량'] = result['매도호가총수량']

                    #opt_put_ho_update_counter += 1

                else:
                    pass
                        
                # 야간선물이 없어짐에 따른 텔레그램 기동 대응
                if NightTime:

                    global telegram_send_worker_on_time, flag_telegram_send_worker, flag_telegram_listen_worker

                    opt_time = dt.hour * 3600 + dt.minute * 60 + dt.second

                    if TELEGRAM_SERVICE and not flag_telegram_send_worker:
                        
                        self.telegram_send_worker.daemon = True
                        self.telegram_send_worker.start()

                        telegram_send_worker_on_time = opt_time 

                        str = '[{0:02d}:{1:02d}:{2:02d}] telegram send worker({3})가 시작됩니다...\r'.format(dt.hour, dt.minute, dt.second, telegram_send_worker_on_time)
                        self.textBrowser.append(str)
                        print(str) 

                        if TARGET_MONTH_SELECT == 1:

                            str = '[{0:02d}:{1:02d}:{2:02d}] CM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                            ToYourTelegram(str)

                        elif TARGET_MONTH_SELECT == 2:

                            str = '[{0:02d}:{1:02d}:{2:02d}] NM 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                            ToYourTelegram(str)

                        elif TARGET_MONTH_SELECT == 3:

                            str = '[{0:02d}:{1:02d}:{2:02d}] MAN 텔레그램이 시작됩니다.\r'.format(dt.hour, dt.minute, dt.second)
                            ToYourTelegram(str)
                            
                            self.telegram_listen_worker.daemon = True
                            self.telegram_listen_worker.start()

                            # 차차월물은 시작과 동시에 Polling 시작
                            ToYourTelegram("MAN 텔레그램 Polling이 시작됩니다.")

                            self.pushButton_remove.setStyleSheet("background-color: lawngreen")

                            flag_telegram_listen_worker = True
                        else:
                            pass         

                        flag_telegram_send_worker = True             
                    else:
                        pass

                    # Telegram Send Worker 시작 후 TELEGRAM_START_TIME분에 Telegram Listen을 위한 Polling Thread 시작 !!!
                    if not flag_telegram_listen_worker and opt_time > telegram_send_worker_on_time + 60 * TELEGRAM_START_TIME:

                        if TELEGRAM_SERVICE:
                            
                            self.telegram_listen_worker.daemon = True
                            self.telegram_listen_worker.start()

                            if TARGET_MONTH_SELECT == 1:                        

                                if SELFID == 'soojin65':
                                    str = '[{0:02d}:{1:02d}:{2:02d}] ***님 텔레그램 Polling이 시작됩니다.'.format(dt.hour, dt.minute, dt.second)
                                    #ToMyTelegram(str)
                                else:
                                    ToYourTelegram("CM 텔레그램 Polling이 시작됩니다.")

                            elif TARGET_MONTH_SELECT == 2:

                                ToYourTelegram("NM 텔레그램 Polling이 시작됩니다.")
                            else:
                                pass
                            
                            self.pushButton_remove.setStyleSheet("background-color: lawngreen")

                            flag_telegram_listen_worker = True
                        else:
                            pass            
                    else:
                        pass
                else:
                    pass

                self.option_quote_display()

                '''
                if opt_call_ho_update_counter == 1000 or opt_put_ho_update_counter == 1000:

                    opt_call_ho_update_counter = 0
                    opt_put_ho_update_counter = 0
                else:
                    pass
                '''                

            elif szTrCode == 'FH0' or szTrCode == 'NH0':

                global fut_hoga_cr, fut_hoga_rr, fut_cms_hoga_cr, fut_cms_hoga_rr, fut_ccms_hoga_cr, fut_ccms_hoga_rr
                global 선물_호가순매수

                market_service = True

                if result['단축코드'] == gmshcode:

                    # 선물호가 갱신
                    item = QTableWidgetItem("{0}".format(format(result['매수호가총건수'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매도호가총건수'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매수호가총수량'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매도호가총수량'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)

                    if result['매도호가총건수'] > 0:
                        fut_hoga_cr = result['매수호가총건수'] / result['매도호가총건수']
                    else:
                        pass

                    선물_호가순매수 = result['매수호가총수량'] - result['매도호가총수량']

                    df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'] = result['매수호가총수량']
                    df_futures_graph.at[ovc_x_idx, 'c_md_hoga'] = result['매도호가총수량']

                    if result['매도호가총수량'] > 0:

                        fut_hoga_rr = result['매수호가총수량'] / result['매도호가총수량']
                        df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] = fut_hoga_rr                        
                    else:
                        pass

                    self.tableWidget_fut.resizeColumnsToContents()

                # 차월물 처리
                elif result['단축코드'] == cmshcode:

                    # 선물호가 갱신
                    item = QTableWidgetItem("{0}".format(format(result['매수호가총건수'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매도호가총건수'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매수호가총수량'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매도호가총수량'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)

                    if result['매도호가총건수'] > 0:
                        fut_cms_hoga_cr = result['매수호가총건수'] / result['매도호가총건수']
                    else:
                        pass
                    
                    df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'] = result['매수호가총수량']
                    df_futures_graph.at[ovc_x_idx, 'n_md_hoga'] = result['매도호가총수량']

                    if result['매도호가총수량'] > 0:
                        fut_cms_hoga_rr = result['매수호가총수량'] / result['매도호가총수량']
                        df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] = fut_cms_hoga_rr
                    else:
                        pass
                
                elif result['단축코드'] == ccmshcode:

                    # 선물호가 갱신
                    item = QTableWidgetItem("{0}".format(format(result['매수호가총건수'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매수건수.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매수건수.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매도호가총건수'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매도건수.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매도건수.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매수호가총수량'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매수잔량.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매수잔량.value, item)

                    item = QTableWidgetItem("{0}".format(format(result['매도호가총수량'], ',')))
                    item.setTextAlignment(Qt.AlignCenter)

                    if NightTime:
                        self.tableWidget_fut.setItem(0, Futures_column.매도잔량.value, item)
                    else:
                        self.tableWidget_fut.setItem(1, Futures_column.매도잔량.value, item)

                    if result['매도호가총건수'] > 0:
                        fut_ccms_hoga_cr = result['매수호가총건수'] / result['매도호가총건수']
                    else:
                        pass

                    if result['매도호가총수량'] > 0:
                        fut_ccms_hoga_rr = result['매수호가총수량'] / result['매도호가총수량']
                    else:
                        pass
                else:
                    pass
                
                # 건수비 표시
                if TARGET_MONTH_SELECT == 1:

                    item = QTableWidgetItem("{0:.2f}\n({1:.2f})".format(fut_hoga_cr, fut_cms_hoga_cr))

                elif TARGET_MONTH_SELECT == 2:

                    item = QTableWidgetItem("{0:.2f}".format(fut_cms_hoga_cr))
                    
                else:
                    pass

                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.tableWidget_fut.setItem(0, Futures_column.건수비.value, item)
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.건수비.value, item)

                # 잔량비 표시
                if TARGET_MONTH_SELECT == 1:

                    item = QTableWidgetItem("{0:.2f}\n({1:.2f})".format(fut_hoga_rr, fut_cms_hoga_rr))

                elif TARGET_MONTH_SELECT == 2:

                    item = QTableWidgetItem("{0:.2f}".format(fut_cms_hoga_rr))
                    
                else:
                    pass
                
                item.setTextAlignment(Qt.AlignCenter)

                if NightTime:
                    self.tableWidget_fut.setItem(0, Futures_column.잔량비.value, item)
                else:
                    self.tableWidget_fut.setItem(1, Futures_column.잔량비.value, item)

                if not NightTime:

                    if fut_hoga_cr > 1.0 and fut_hoga_rr > 1.0:

                        if fut_hoga_cr > fut_hoga_rr:

                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(적색))
                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(흰색))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(적색))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(흰색))
                        else:
                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(pink))
                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(검정색))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(pink))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(검정색))

                    elif fut_hoga_cr < 1.0 and fut_hoga_rr < 1.0:

                        if fut_hoga_cr < fut_hoga_rr:

                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(청색))
                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(흰색))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(청색))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(흰색))
                        else:
                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(lightskyblue))
                            self.tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(검정색))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(lightskyblue))
                            self.tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(검정색))
                    else:
                        self.tableWidget_fut.item(1, Futures_column.건수비.value).setBackground(QBrush(흰색))
                        self.tableWidget_fut.item(1, Futures_column.건수비.value).setForeground(QBrush(검정색))
                        self.tableWidget_fut.item(1, Futures_column.잔량비.value).setBackground(QBrush(흰색))
                        self.tableWidget_fut.item(1, Futures_column.잔량비.value).setForeground(QBrush(검정색))
                else:
                    pass
                
                if pre_start:

                    if ResizeRowsToContents:
                        self.tableWidget_fut.resizeRowsToContents()
                    else:
                        pass
                    self.tableWidget_fut.resizeColumnsToContents()
                else:
                    pass               
            
            elif szTrCode == 'OVC':

                #global NASDAQ_체결순매수, SP500_체결순매수, DOW_체결순매수, WTI_체결순매수, EUROFX_체결순매수, HANGSENG_체결순매수, GOLD_체결순매수
                                
                if not receive_real_ovc:
                    receive_real_ovc = True
                else:
                    pass

                OVC_체결시간 = result['체결시간_한국']
                OVC_HOUR = int(OVC_체결시간[0:2])
                OVC_MIN = int(OVC_체결시간[2:4])
                OVC_SEC = int(OVC_체결시간[4:6])

                # 과거값 저장
                old_ovc_x_idx = ovc_x_idx                       
                
                # X축 시간좌표 계산
                # 해외선물 시간과 동기를 맞춤
                if NightTime:

                    night_time = OVC_HOUR

                    if 0 <= night_time <= 6:
                        night_time = night_time + 24
                    else:
                        pass

                    ovc_x_idx = (night_time - NightTime_PreStart_Hour) * 60 + OVC_MIN + 1         
                else:                    
                    # 해외선물 개장시간은 국내시장의 2시간 전
                    ovc_x_idx = (OVC_HOUR - DayTime_PreStart_Hour) * 60 + OVC_MIN + 1

                # 갱신된 현재값을 과거값과 비교
                if ovc_x_idx != old_ovc_x_idx:

                    if not NightTime and market_service:
                        df_futures_graph.at[ovc_x_idx, 'high'] = df_futures_graph.at[ovc_x_idx- 1, 'high']
                        df_futures_graph.at[ovc_x_idx, 'low'] = df_futures_graph.at[ovc_x_idx - 1, 'low']
                        df_futures_graph.at[ovc_x_idx, 'middle'] = df_futures_graph.at[ovc_x_idx - 1, 'middle']
                        df_futures_graph.at[ovc_x_idx, 'close'] = df_futures_graph.at[ovc_x_idx - 1, 'close']
                        df_futures_graph.at[ovc_x_idx, 'price'] = df_futures_graph.at[ovc_x_idx - 1, 'close']
                    else:
                        pass

                    df_dow_graph.at[ovc_x_idx, 'high'] = df_dow_graph.at[ovc_x_idx - 1, 'high']
                    df_dow_graph.at[ovc_x_idx, 'low'] = df_dow_graph.at[ovc_x_idx - 1, 'low']
                    df_dow_graph.at[ovc_x_idx, 'middle'] = df_dow_graph.at[ovc_x_idx - 1, 'middle']
                    df_dow_graph.at[ovc_x_idx, 'close'] = df_dow_graph.at[ovc_x_idx - 1, 'close']
                    df_dow_graph.at[ovc_x_idx, 'price'] = df_dow_graph.at[ovc_x_idx - 1, 'close']

                    df_nasdaq_graph.at[ovc_x_idx, 'high'] = df_nasdaq_graph.at[ovc_x_idx - 1, 'high']
                    df_nasdaq_graph.at[ovc_x_idx, 'low'] = df_nasdaq_graph.at[ovc_x_idx - 1, 'low']
                    df_nasdaq_graph.at[ovc_x_idx, 'middle'] = df_nasdaq_graph.at[ovc_x_idx - 1, 'middle']
                    df_nasdaq_graph.at[ovc_x_idx, 'close'] = df_nasdaq_graph.at[ovc_x_idx - 1, 'close']
                    df_nasdaq_graph.at[ovc_x_idx, 'price'] = df_nasdaq_graph.at[ovc_x_idx - 1, 'close']

                    df_sp500_graph.at[ovc_x_idx, 'high'] = df_sp500_graph.at[ovc_x_idx - 1, 'high']
                    df_sp500_graph.at[ovc_x_idx, 'low'] = df_sp500_graph.at[ovc_x_idx - 1, 'low']
                    df_sp500_graph.at[ovc_x_idx, 'middle'] = df_sp500_graph.at[ovc_x_idx - 1, 'middle']
                    df_sp500_graph.at[ovc_x_idx, 'close'] = df_sp500_graph.at[ovc_x_idx - 1, 'close']
                    df_sp500_graph.at[ovc_x_idx, 'price'] = df_sp500_graph.at[ovc_x_idx - 1, 'close']

                    df_wti_graph.at[ovc_x_idx, 'high'] = df_wti_graph.at[ovc_x_idx - 1, 'high']
                    df_wti_graph.at[ovc_x_idx, 'low'] = df_wti_graph.at[ovc_x_idx - 1, 'low']
                    df_wti_graph.at[ovc_x_idx, 'middle'] = df_wti_graph.at[ovc_x_idx - 1, 'middle']
                    df_wti_graph.at[ovc_x_idx, 'close'] = df_wti_graph.at[ovc_x_idx - 1, 'close']
                    df_wti_graph.at[ovc_x_idx, 'price'] = df_wti_graph.at[ovc_x_idx - 1, 'close']

                    str = '[{0:02d}:{1:02d}:{2:02d}] NaN 방어기능 작동 at {3:d}\r'.format(adj_hour, adj_min, adj_sec, ovc_x_idx)
                    #self.textBrowser.append(str)
                    print(str)
                else:
                    pass

                # 체결량정보 제공안됨 !!!
                #매도누적체결수량 = int(result['매도누적체결수량'])
                #매수누적체결수량 = int(result['매수누적체결수량'])
                #체결순매수 = 매수누적체결수량 - 매도누적체결수량

                if result['종목코드'] == DOW:

                    df_dow_graph.at[ovc_x_idx, 'price'] = result['체결가격']

                    DOW_현재가 = int(result['체결가격'])
                    DOW_전일대비 = int(DOW_현재가 - DOW_종가)
                    DOW_등락율 = result['등락율']

                    DOW_저가 =  int(result['저가'])
                    DOW_고가 =  int(result['고가'])
                    DOW_진폭 = int(DOW_고가 - DOW_저가)

                    # 1T OHLC 생성
                    df_dow_graph.at[ovc_x_idx, 'ctime'] = OVC_체결시간

                    if DOW_현재가 > 0:

                        if OVC_SEC == 0:

                            if not flag_dow_ohlc_open:
                            
                                df_dow_graph.at[ovc_x_idx, 'open'] = DOW_현재가
                                df_dow_graph.at[ovc_x_idx, 'high'] = DOW_현재가
                                df_dow_graph.at[ovc_x_idx, 'low'] = DOW_현재가
                                df_dow_graph.at[ovc_x_idx, 'middle'] = DOW_현재가
                                df_dow_graph.at[ovc_x_idx, 'close'] = DOW_현재가
                                df_dow_graph.at[ovc_x_idx, 'price'] = DOW_현재가

                                del DOW_현재가_버퍼[:]

                                flag_dow_ohlc_open = True
                            else:
                                DOW_현재가_버퍼.append(DOW_현재가)                        
                        else:
                            if df_dow_graph.at[ovc_x_idx, 'open'] != df_dow_graph.at[ovc_x_idx, 'open']:
                                df_dow_graph.at[ovc_x_idx, 'open'] = df_dow_graph.at[ovc_x_idx - 1, 'close']
                                del DOW_현재가_버퍼[:]
                            else:
                                pass

                            DOW_현재가_버퍼.append(DOW_현재가)

                            if max(DOW_현재가_버퍼) > 0:
                                df_dow_graph.at[ovc_x_idx, 'high'] = max(DOW_현재가_버퍼)
                            else:
                                pass

                            if min(DOW_현재가_버퍼) == 0:

                                if max(DOW_현재가_버퍼) > 0:
                                    df_dow_graph.at[ovc_x_idx, 'low'] = max(DOW_현재가_버퍼)
                                else:
                                    pass
                            else:
                                df_dow_graph.at[ovc_x_idx, 'low'] = min(DOW_현재가_버퍼)

                            df_dow_graph.at[ovc_x_idx, 'close'] = DOW_현재가

                            flag_dow_ohlc_open = False  
                    else:
                        pass                           

                    # Bollinger Bands
                    df_dow_graph.at[ovc_x_idx, 'middle'] = (df_dow_graph.at[ovc_x_idx, 'high'] + df_dow_graph.at[ovc_x_idx, 'low']) / 2
                    upper, middle, lower = talib.BBANDS(np.array(df_dow_graph['middle'], dtype=float), timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_TYPE)

                    df_dow_graph['BBUpper'] = upper
                    df_dow_graph['BBMiddle'] = middle
                    df_dow_graph['BBLower'] = lower

                    #macd, macdsignal, macdhist = talib.MACDEXT(np.array(df_dow_graph['close'], dtype=float), fastperiod=12, slowperiod=26, signalperiod=9, \
                        #fastmatype=MA_TYPE, slowmatype=MA_TYPE, signalmatype=MA_TYPE)

                    #df_dow_graph['MACD'] = macd
                    #df_dow_graph['MACDSig'] = macdsignal
                    #df_dow_graph['MACDHist'] = macdhist

                    # Parabolic SAR
                    parabolic_sar = talib.SAR(np.array(df_dow_graph['high'], dtype=float), np.array(df_dow_graph['low'], dtype=float), acceleration=0.02, maximum=0.2)

                    # PSARIndicator 함수 오동작하는 듯...
                    #ta_psar = ta.trend.PSARIndicator(df_dow_graph['high'], df_dow_graph['low'], df_dow_graph['close'])

                    df_dow_graph['PSAR'] = parabolic_sar
                    #df_dow_graph['TA_PSAR'] = ta_psar.psar()

                    # MAMA(약 32 샘플후에 출력값이 나옴)
                    mama, fama = talib.MAMA(np.array(df_dow_graph['close'], dtype=float), fastlimit=0.5, slowlimit=0.05)

                    df_dow_graph['MAMA'] = mama
                    df_dow_graph['FAMA'] = fama
                    #df_dow_graph['A_FAMA'] = fama

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA'] and df_dow_graph.at[ovc_x_idx, 'BBLower'] == df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'FAMA'] < df_dow_graph.at[ovc_x_idx, 'BBLower']:
                            df_dow_graph.at[ovc_x_idx, 'A_FAMA'] = df_dow_graph.at[ovc_x_idx, 'BBLower']
                        else:
                            df_dow_graph.at[ovc_x_idx, 'A_FAMA'] = df_dow_graph.at[ovc_x_idx, 'FAMA']
                    else:
                        pass

                    # Ichimoku Indicator
                    #dow_Ichimoku = ta.trend.IchimokuIndicator(df_dow_graph['high'], df_dow_graph['low'], n1=9, n2=26, n3=52, visual=True)
                    dow_Ichimoku = ta.trend.IchimokuIndicator(df_dow_graph['high'], df_dow_graph['low'])

                    df_dow_graph['SPAN_A'] = dow_Ichimoku.ichimoku_a()
                    df_dow_graph['SPAN_B'] = dow_Ichimoku.ichimoku_b()
                    df_dow_graph['OE_BASE'] = dow_Ichimoku.ichimoku_base_line()
                    df_dow_graph['OE_CONV'] = dow_Ichimoku.ichimoku_conversion_line()
                    
                    if DOW_전일종가 > 0:
                        if not NightTime:
                            DOW_등락율 = ((DOW_현재가 - DOW_전일종가) / DOW_전일종가) * 100
                        else:
                            DOW_등락율 = result['등락율']
                    else:
                        DOW_등락율 = result['등락율']

                    df_dow_graph.at[ovc_x_idx, 'drate'] = DOW_등락율                                  

                    if DOW_시가 == 0:

                        if result['전일대비기호'] == '5':

                            DOW_종가 = int(DOW_현재가 + result['전일대비'])
                        else:
                            DOW_종가 = int(DOW_현재가 - result['전일대비'])

                        df_dow_graph.at[0, 'price'] = DOW_종가
                        df_dow_graph.at[1, 'price'] = result['시가']

                        DOW_시가 = int(result['시가'])
                    else:
                        DOW_진폭비 = DOW_진폭 / DOW_시가                         

                    if DOW_피봇 == 0:

                        if DOW_전저 > 0 and DOW_전고 > 0:
                            DOW_피봇 = self.calc_pivot(DOW_전저, DOW_전고, DOW_종가, DOW_시가)
                        else:
                            pass
                    else:
                        pass          

                    if DOW_현재가 != DOW_과거가:
                    
                        old_dow_delta = dow_delta
                        dow_delta = DOW_현재가
                        dow_직전대비.extend([dow_delta - old_dow_delta])
                        대비리스트 = list(dow_직전대비)                       

                        if DOW_현재가 > DOW_과거가:

                            if DOW_등락율 < 0:                                                             

                                if min(대비리스트) > 0:
                                    jisu_str = "DOW: {0} ({1}, {2:.2f}%, {3})⬈". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))                                    
                                else:
                                    jisu_str = "DOW: {0} ▲ ({1}, {2:.2f}%, {3})". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                                self.label_2nd.setText(jisu_str)
                                self.label_2nd.setStyleSheet('background-color: pink ; color: blue')
                                dow_text_color = 'blue'

                            elif DOW_등락율 > 0:       

                                if min(대비리스트) > 0:
                                    jisu_str = "DOW: {0} ({1}, {2:.2f}%, {3})⬈". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))                                    
                                else:
                                    jisu_str = "DOW: {0} ▲ ({1}, {2:.2f}%, {3})". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                                self.label_2nd.setText(jisu_str)
                                self.label_2nd.setStyleSheet('background-color: pink ; color: red')
                                dow_text_color = 'red'
                            else:
                                pass

                        elif DOW_현재가 < DOW_과거가:

                            if DOW_등락율 < 0:        

                                if max(대비리스트) < 0:
                                    jisu_str = "DOW: {0} ({1}, {2:.2f}%, {3})⬊". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))                                    
                                else:
                                    jisu_str = "DOW: {0} ▼ ({1}, {2:.2f}%, {3})". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                                self.label_2nd.setText(jisu_str)
                                self.label_2nd.setStyleSheet('background-color: lightskyblue ; color: blue')
                                dow_text_color = 'blue'

                            elif DOW_등락율 > 0:      

                                if max(대비리스트) < 0:
                                    jisu_str = "DOW: {0} ({1}, {2:.2f}%, {3})⬊". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))                                    
                                else:
                                    jisu_str = "DOW: {0} ▼ ({1}, {2:.2f}%, {3})". \
                                    format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                                self.label_2nd.setText(jisu_str)
                                self.label_2nd.setStyleSheet('background-color: lightskyblue ; color: red')
                                dow_text_color = 'red'
                            else:
                                pass
                        else:
                            pass

                        DOW_과거가 = DOW_현재가                        
                    else:
                        pass

                elif result['종목코드'] == NASDAQ:

                    df_nasdaq_graph.at[ovc_x_idx, 'price'] = result['체결가격']

                    NASDAQ_현재가 = result['체결가격']
                    NASDAQ_전일대비 = NASDAQ_현재가 - NASDAQ_종가 
                    NASDAQ_등락율 = result['등락율']                 

                    NASDAQ_저가 =  result['저가']
                    NASDAQ_고가 =  result['고가']                    
                    NASDAQ_진폭 = NASDAQ_고가 - NASDAQ_저가
                    
                    # 1T OHLC 생성
                    df_nasdaq_graph.at[ovc_x_idx, 'ctime'] = OVC_체결시간

                    if NASDAQ_현재가 > 0:

                        if OVC_SEC == 0:

                            if not flag_nasdaq_ohlc_open:
                            
                                df_nasdaq_graph.at[ovc_x_idx, 'open'] = NASDAQ_현재가
                                df_nasdaq_graph.at[ovc_x_idx, 'high'] = NASDAQ_현재가
                                df_nasdaq_graph.at[ovc_x_idx, 'low'] = NASDAQ_현재가
                                df_nasdaq_graph.at[ovc_x_idx, 'middle'] = NASDAQ_현재가
                                df_nasdaq_graph.at[ovc_x_idx, 'close'] = NASDAQ_현재가
                                df_nasdaq_graph.at[ovc_x_idx, 'price'] = NASDAQ_현재가

                                del NASDAQ_현재가_버퍼[:]

                                flag_nasdaq_ohlc_open = True
                            else:
                                NASDAQ_현재가_버퍼.append(NASDAQ_현재가)                       
                        else:
                            if df_nasdaq_graph.at[ovc_x_idx, 'open'] != df_nasdaq_graph.at[ovc_x_idx, 'open']:
                                df_nasdaq_graph.at[ovc_x_idx, 'open'] = df_nasdaq_graph.at[ovc_x_idx - 1, 'close']
                                del NASDAQ_현재가_버퍼[:]
                            else:
                                pass

                            NASDAQ_현재가_버퍼.append(NASDAQ_현재가)

                            if max(NASDAQ_현재가_버퍼) > 0:
                                df_nasdaq_graph.at[ovc_x_idx, 'high'] = max(NASDAQ_현재가_버퍼)
                            else:
                                pass

                            if min(NASDAQ_현재가_버퍼) == 0:

                                if max(NASDAQ_현재가_버퍼) > 0:
                                    df_nasdaq_graph.at[ovc_x_idx, 'low'] = max(NASDAQ_현재가_버퍼)
                                else:
                                    pass
                            else:
                                df_nasdaq_graph.at[ovc_x_idx, 'low'] = min(NASDAQ_현재가_버퍼)

                            df_nasdaq_graph.at[ovc_x_idx, 'close'] = NASDAQ_현재가

                            flag_nasdaq_ohlc_open = False
                    else:
                        pass                          

                    # Bollinger Bands
                    df_nasdaq_graph.at[ovc_x_idx, 'middle'] = (df_nasdaq_graph.at[ovc_x_idx, 'high'] + df_nasdaq_graph.at[ovc_x_idx, 'low']) / 2
                    upper, middle, lower = talib.BBANDS(np.array(df_nasdaq_graph['middle'], dtype=float), timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_TYPE)

                    df_nasdaq_graph['BBUpper'] = upper
                    df_nasdaq_graph['BBMiddle'] = middle
                    df_nasdaq_graph['BBLower'] = lower

                    #macd, macdsignal, macdhist = talib.MACDEXT(np.array(df_nasdaq_graph['close'], dtype=float), fastperiod=12, slowperiod=26, signalperiod=9, \
                        #fastmatype=MA_TYPE, slowmatype=MA_TYPE, signalmatype=MA_TYPE)

                    #df_nasdaq_graph['MACD'] = macd
                    #df_nasdaq_graph['MACDSig'] = macdsignal
                    #df_nasdaq_graph['MACDHist'] = macdhist

                    # Parabolic SAR
                    parabolic_sar = talib.SAR(np.array(df_nasdaq_graph['high'], dtype=float), np.array(df_nasdaq_graph['low'], dtype=float), acceleration=0.02, maximum=0.2)

                    # PSARIndicator 함수 오동작하는 듯...
                    #ta_psar = ta.trend.PSARIndicator(df_nasdaq_graph['high'], df_nasdaq_graph['low'], df_nasdaq_graph['close'])

                    df_nasdaq_graph['PSAR'] = parabolic_sar
                    #df_nasdaq_graph['TA_PSAR'] = ta_psar.psar()

                    # MAMA(약 32샘플후에 출력값이 나옴)
                    mama, fama = talib.MAMA(np.array(df_nasdaq_graph['close'], dtype=float), fastlimit=0.5, slowlimit=0.05)

                    df_nasdaq_graph['MAMA'] = mama
                    df_nasdaq_graph['FAMA'] = fama

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'BBLower'] == df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:
                            df_nasdaq_graph.at[ovc_x_idx, 'A_FAMA'] = df_nasdaq_graph.at[ovc_x_idx, 'BBLower']
                        else:
                            df_nasdaq_graph.at[ovc_x_idx, 'A_FAMA'] = df_nasdaq_graph.at[ovc_x_idx, 'FAMA']
                    else:
                        pass

                    # Ichimoku Indicator
                    #nasdaq_Ichimoku = ta.trend.IchimokuIndicator(df_nasdaq_graph['high'], df_nasdaq_graph['low'], n1=9, n2=26, n3=52, visual=True)
                    nasdaq_Ichimoku = ta.trend.IchimokuIndicator(df_nasdaq_graph['high'], df_nasdaq_graph['low'])

                    df_nasdaq_graph['SPAN_A'] = nasdaq_Ichimoku.ichimoku_a()
                    df_nasdaq_graph['SPAN_B'] = nasdaq_Ichimoku.ichimoku_b()
                    df_nasdaq_graph['OE_BASE'] = nasdaq_Ichimoku.ichimoku_base_line()
                    df_nasdaq_graph['OE_CONV'] = nasdaq_Ichimoku.ichimoku_conversion_line()
                    
                    if NASDAQ_전일종가 > 0:
                        if not NightTime:
                            NASDAQ_등락율 = ((NASDAQ_현재가 - NASDAQ_전일종가) / NASDAQ_전일종가) * 100
                        else:
                            NASDAQ_등락율 = result['등락율']
                    else:
                        NASDAQ_등락율 = result['등락율']

                    if NASDAQ_시가 == 0:

                        if result['전일대비기호'] == '5':

                            NASDAQ_종가 = NASDAQ_현재가 + result['전일대비']
                        else:
                            NASDAQ_종가 = NASDAQ_현재가 - result['전일대비']

                        df_nasdaq_graph.at[0, 'price'] = NASDAQ_종가
                        df_nasdaq_graph.at[1, 'price'] = result['시가']

                        NASDAQ_시가 = result['시가']
                    else:
                        pass
                    
                    if NASDAQ_피봇 == 0:

                        if NASDAQ_전저 > 0 and NASDAQ_전고 > 0:
                            NASDAQ_피봇 = self.calc_pivot(NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_시가)
                        else:
                            pass
                    else:
                        pass                                             

                    if NASDAQ_현재가 != NASDAQ_과거가:
                    
                        old_nasdaq_delta = nasdaq_delta
                        nasdaq_delta = NASDAQ_현재가
                        nasdaq_직전대비.extend([nasdaq_delta - old_nasdaq_delta])
                        대비리스트 = list(nasdaq_직전대비)

                        if NASDAQ_현재가 > NASDAQ_과거가:

                            if NASDAQ_등락율 < 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "NASDAQ: {0} ({1:.2f}, {2:.2f}%)⬈".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)                                    
                                else:
                                    jisu_str = "NASDAQ: {0} ▲ ({1:.2f}, {2:.2f}%)".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: pink ; color: blue')
                                nasdaq_text_color = 'blue'

                            elif NASDAQ_등락율 > 0:                            

                                if min(대비리스트) > 0:
                                    jisu_str = "NASDAQ: {0} ({1:.2f}, {2:.2f}%)⬈".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)                                    
                                else:
                                    jisu_str = "NASDAQ: {0} ▲ ({1:.2f}, {2:.2f}%)".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: pink ; color: red')
                                nasdaq_text_color = 'red'
                            else:
                                pass

                        elif NASDAQ_현재가 < NASDAQ_과거가:

                            if NASDAQ_등락율 < 0:     

                                if max(대비리스트) < 0:
                                    jisu_str = "NASDAQ: {0} ({1:.2f}, {2:.2f}%)⬊".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)                                    
                                else:
                                    jisu_str = "NASDAQ: {0} ▼ ({1:.2f}, {2:.2f}%)".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: lightskyblue ; color: blue')
                                nasdaq_text_color = 'blue'

                            elif NASDAQ_등락율 > 0:     

                                if max(대비리스트) < 0:
                                    jisu_str = "NASDAQ: {0} ({1:.2f}, {2:.2f}%)⬊".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)                                    
                                else:
                                    jisu_str = "NASDAQ: {0} ▼ ({1:.2f}, {2:.2f}%)".format(format(NASDAQ_현재가, ','), NASDAQ_전일대비, NASDAQ_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: lightskyblue ; color: red')
                                nasdaq_text_color = 'red'
                            else:
                                pass
                        else:
                            pass
                        
                        NASDAQ_과거가 = NASDAQ_현재가
                    else:
                        pass

                elif result['종목코드'] == SP500:

                    df_sp500_graph.at[ovc_x_idx, 'price'] = result['체결가격']

                    SP500_현재가 = result['체결가격']
                    SP500_전일대비 = round((SP500_현재가 - SP500_종가), 2)
                    SP500_등락율 = result['등락율']

                    SP500_저가 =  result['저가']
                    SP500_고가 =  result['고가']
                    SP500_진폭 = SP500_고가 - SP500_저가

                    체결가격 = locale.format('%.2f', SP500_현재가, 1)

                    # 1T OHLC 생성
                    df_sp500_graph.at[ovc_x_idx, 'ctime'] = OVC_체결시간

                    if SP500_현재가 > 0:

                        if OVC_SEC == 0:

                            if not flag_sp500_ohlc_open:
                            
                                df_sp500_graph.at[ovc_x_idx, 'open'] = SP500_현재가
                                df_sp500_graph.at[ovc_x_idx, 'high'] = SP500_현재가
                                df_sp500_graph.at[ovc_x_idx, 'low'] = SP500_현재가
                                df_sp500_graph.at[ovc_x_idx, 'middle'] = SP500_현재가
                                df_sp500_graph.at[ovc_x_idx, 'close'] = SP500_현재가
                                df_sp500_graph.at[ovc_x_idx, 'price'] = SP500_현재가

                                del SP500_현재가_버퍼[:]

                                flag_sp500_ohlc_open = True
                            else:
                                SP500_현재가_버퍼.append(SP500_현재가)                        
                        else:
                            if df_sp500_graph.at[ovc_x_idx, 'open'] != df_sp500_graph.at[ovc_x_idx, 'open']:
                                df_sp500_graph.at[ovc_x_idx, 'open'] = df_sp500_graph.at[ovc_x_idx - 1, 'close']
                                del SP500_현재가_버퍼[:]
                            else:
                                pass

                            SP500_현재가_버퍼.append(SP500_현재가)

                            if max(SP500_현재가_버퍼) > 0:
                                df_sp500_graph.at[ovc_x_idx, 'high'] = max(SP500_현재가_버퍼)
                            else:
                                pass

                            if min(SP500_현재가_버퍼) == 0:

                                if max(SP500_현재가_버퍼) > 0:
                                    df_sp500_graph.at[ovc_x_idx, 'low'] = max(SP500_현재가_버퍼)
                                else:
                                    pass
                            else:
                                df_sp500_graph.at[ovc_x_idx, 'low'] = min(SP500_현재가_버퍼)

                            df_sp500_graph.at[ovc_x_idx, 'close'] = SP500_현재가

                            flag_sp500_ohlc_open = False  
                    else:
                        pass                         

                    # Bollinger Bands
                    df_sp500_graph.at[ovc_x_idx, 'middle'] = (df_sp500_graph.at[ovc_x_idx, 'high'] + df_sp500_graph.at[ovc_x_idx, 'low']) / 2
                    upper, middle, lower = talib.BBANDS(np.array(df_sp500_graph['middle'], dtype=float), timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_TYPE)

                    df_sp500_graph['BBUpper'] = upper
                    df_sp500_graph['BBMiddle'] = middle
                    df_sp500_graph['BBLower'] = lower

                    #macd, macdsignal, macdhist = talib.MACDEXT(np.array(df_sp500_graph['close'], dtype=float), fastperiod=12, slowperiod=26, signalperiod=9, \
                        #fastmatype=MA_TYPE, slowmatype=MA_TYPE, signalmatype=MA_TYPE)

                    #df_sp500_graph['MACD'] = macd
                    #df_sp500_graph['MACDSig'] = macdsignal
                    #df_sp500_graph['MACDHist'] = macdhist                

                    # Parabolic SAR
                    parabolic_sar = talib.SAR(np.array(df_sp500_graph['high'], dtype=float), np.array(df_sp500_graph['low'], dtype=float), acceleration=0.02, maximum=0.2)

                    # PSARIndicator 함수 오동작하는 듯...
                    #ta_psar = ta.trend.PSARIndicator(df_sp500_graph['high'], df_sp500_graph['low'], df_sp500_graph['close'])

                    df_sp500_graph['PSAR'] = parabolic_sar
                    #df_sp500_graph['TA_PSAR'] = ta_psar.psar()

                    # MAMA(약 32샘플후에 출력값이 나옴)
                    mama, fama = talib.MAMA(np.array(df_sp500_graph['close'], dtype=float), fastlimit=0.5, slowlimit=0.05)

                    df_sp500_graph['MAMA'] = mama
                    df_sp500_graph['FAMA'] = fama

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA'] and df_sp500_graph.at[ovc_x_idx, 'BBLower'] == df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'FAMA'] < df_sp500_graph.at[ovc_x_idx, 'BBLower']:
                            df_sp500_graph.at[ovc_x_idx, 'A_FAMA'] = df_sp500_graph.at[ovc_x_idx, 'BBLower']
                        else:
                            df_sp500_graph.at[ovc_x_idx, 'A_FAMA'] = df_sp500_graph.at[ovc_x_idx, 'FAMA']
                    else:
                        pass

                    # Ichimoku Indicator
                    #sp500_Ichimoku = ta.trend.IchimokuIndicator(df_sp500_graph['high'], df_sp500_graph['low'], n1=9, n2=26, n3=52, visual=True)
                    sp500_Ichimoku = ta.trend.IchimokuIndicator(df_sp500_graph['high'], df_sp500_graph['low'])

                    df_sp500_graph['SPAN_A'] = sp500_Ichimoku.ichimoku_a()
                    df_sp500_graph['SPAN_B'] = sp500_Ichimoku.ichimoku_b()
                    df_sp500_graph['OE_BASE'] = sp500_Ichimoku.ichimoku_base_line()
                    df_sp500_graph['OE_CONV'] = sp500_Ichimoku.ichimoku_conversion_line()

                    if SP500_전일종가 > 0:
                        if not NightTime:
                            SP500_등락율 = ((SP500_현재가 - SP500_전일종가) / SP500_전일종가) * 100
                        else:
                            SP500_등락율 = result['등락율']
                    else:
                        SP500_등락율 = result['등락율']                   

                    if SP500_시가 == 0:

                        if result['전일대비기호'] == '5':

                            SP500_종가 = SP500_현재가 + result['전일대비']
                        else:
                            SP500_종가 = SP500_현재가 - result['전일대비']

                        df_sp500_graph.at[0, 'price'] = SP500_종가
                        df_sp500_graph.at[1, 'price'] = result['시가']

                        SP500_시가 = result['시가']
                    else:
                        pass                                                 

                    if SP500_피봇 == 0:

                        if SP500_전저 > 0 and SP500_전고 > 0:
                            SP500_피봇 = self.calc_pivot(SP500_전저, SP500_전고, SP500_종가, SP500_시가)
                        else:
                            pass
                    else:
                        pass

                    if SP500_현재가 != SP500_과거가:
                    
                        old_sp500_delta = sp500_delta
                        sp500_delta = SP500_현재가
                        sp500_직전대비.extend([sp500_delta - old_sp500_delta])
                        대비리스트 = list(sp500_직전대비)

                        if SP500_현재가 > SP500_과거가:

                            if SP500_등락율 < 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "SP500: {0} ({1:.2f}, {2:.2f}%)⬈".format(체결가격, SP500_전일대비, SP500_등락율)                                    
                                else:
                                    jisu_str = "SP500: {0} ▲ ({1:.2f}, {2:.2f}%)".format(체결가격, SP500_전일대비, SP500_등락율)

                                if NightTime:
                                    self.label_samsung.setText(jisu_str)
                                    self.label_samsung.setStyleSheet('background-color: pink; color: blue')
                                else:
                                    self.label_3rd.setText(jisu_str)
                                    self.label_3rd.setStyleSheet('background-color: pink; color: blue')

                                sp500_text_color = 'blue'                           

                            elif SP500_등락율 > 0:  

                                if min(대비리스트) > 0:
                                    jisu_str = "SP500: {0} ▲ ({1:.2f}, {2:.2f}%)⬈".format(체결가격, SP500_전일대비, SP500_등락율)                                    
                                else:
                                    jisu_str = "SP500: {0} ▲ ({1:.2f}, {2:.2f}%)".format(체결가격, SP500_전일대비, SP500_등락율)

                                if NightTime:
                                    self.label_samsung.setText(jisu_str)
                                    self.label_samsung.setStyleSheet('background-color: pink; color: red')
                                else:
                                    self.label_3rd.setText(jisu_str)
                                    self.label_3rd.setStyleSheet('background-color: pink; color: red')

                                sp500_text_color = 'red'
                            else:
                                pass

                        elif SP500_현재가 < SP500_과거가:

                            if SP500_등락율 < 0: 

                                if max(대비리스트) < 0:
                                    jisu_str = "SP500: {0} ({1:.2f}, {2:.2f}%)⬊".format(체결가격, SP500_전일대비, SP500_등락율)                                    
                                else:
                                    jisu_str = "SP500: {0} ▼ ({1:.2f}, {2:.2f}%)".format(체결가격, SP500_전일대비, SP500_등락율)

                                if NightTime:
                                    self.label_samsung.setText(jisu_str)
                                    self.label_samsung.setStyleSheet('background-color: lightskyblue; color: blue')
                                else:
                                    self.label_3rd.setText(jisu_str)
                                    self.label_3rd.setStyleSheet('background-color: lightskyblue; color: blue')

                                sp500_text_color = 'blue'                                

                            elif SP500_등락율 > 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "SP500: {0} ({1:.2f}, {2:.2f}%)⬊".format(체결가격, SP500_전일대비, SP500_등락율)                                    
                                else:
                                    jisu_str = "SP500: {0} ▼ ({1:.2f}, {2:.2f}%)".format(체결가격, SP500_전일대비, SP500_등락율)

                                if NightTime:
                                    self.label_samsung.setText(jisu_str)
                                    self.label_samsung.setStyleSheet('background-color: lightskyblue; color: red')
                                else:
                                    self.label_3rd.setText(jisu_str)
                                    self.label_3rd.setStyleSheet('background-color: lightskyblue; color: red')

                                sp500_text_color = 'red'                                
                            else:
                                pass
                        else:
                            pass

                        SP500_과거가 = SP500_현재가
                    else:
                        pass

                elif result['종목코드'] == WTI:
                    
                    df_wti_graph.at[ovc_x_idx, 'price'] = result['체결가격']

                    WTI_현재가 = result['체결가격']
                    WTI_전일대비 = round((WTI_현재가 - WTI_종가), 2)
                    WTI_등락율 = result['등락율']

                    WTI_저가 =  result['저가']
                    WTI_고가 =  result['고가']
                    WTI_진폭 = round((result['고가'] - result['저가']), 2)
                    
                    체결가격 = locale.format('%.2f', WTI_현재가, 1)

                    # 1T OHLC 생성
                    df_wti_graph.at[ovc_x_idx, 'ctime'] = OVC_체결시간

                    if WTI_현재가 > 0:

                        if OVC_SEC == 0:

                            if not flag_wti_ohlc_open:
                            
                                df_wti_graph.at[ovc_x_idx, 'open'] = WTI_현재가
                                df_wti_graph.at[ovc_x_idx, 'high'] = WTI_현재가
                                df_wti_graph.at[ovc_x_idx, 'low'] = WTI_현재가
                                df_wti_graph.at[ovc_x_idx, 'middle'] = WTI_현재가
                                df_wti_graph.at[ovc_x_idx, 'close'] = WTI_현재가
                                df_wti_graph.at[ovc_x_idx, 'price'] = WTI_현재가

                                del WTI_현재가_버퍼[:]

                                flag_wti_ohlc_open = True
                            else:
                                WTI_현재가_버퍼.append(WTI_현재가)                        
                        else:
                            if df_wti_graph.at[ovc_x_idx, 'open'] != df_wti_graph.at[ovc_x_idx, 'open']:
                                df_wti_graph.at[ovc_x_idx, 'open'] = df_wti_graph.at[ovc_x_idx - 1, 'close']
                                del WTI_현재가_버퍼[:]
                            else:
                                pass

                            WTI_현재가_버퍼.append(WTI_현재가)

                            if max(WTI_현재가_버퍼) > 0:
                                df_wti_graph.at[ovc_x_idx, 'high'] = max(WTI_현재가_버퍼)
                            else:
                                pass

                            if min(WTI_현재가_버퍼) == 0:

                                if max(WTI_현재가_버퍼) > 0:
                                    df_wti_graph.at[ovc_x_idx, 'low'] = max(WTI_현재가_버퍼)
                                else:
                                    pass
                            else:
                                df_wti_graph.at[ovc_x_idx, 'low'] = min(WTI_현재가_버퍼)

                            df_wti_graph.at[ovc_x_idx, 'close'] = WTI_현재가

                            flag_wti_ohlc_open = False
                    else:
                        pass                              

                    # Bollinger Bands
                    df_wti_graph.at[ovc_x_idx, 'middle'] = (df_wti_graph.at[ovc_x_idx, 'high'] + df_wti_graph.at[ovc_x_idx, 'low']) / 2
                    upper, middle, lower = talib.BBANDS(np.array(df_wti_graph['middle'], dtype=float), timeperiod=20, nbdevup=2, nbdevdn=2, matype=MA_TYPE)

                    df_wti_graph['BBUpper'] = upper
                    df_wti_graph['BBMiddle'] = middle
                    df_wti_graph['BBLower'] = lower

                    #macd, macdsignal, macdhist = talib.MACDEXT(np.array(df_wti_graph['close'], dtype=float), fastperiod=12, slowperiod=26, signalperiod=9, \
                        #fastmatype=MA_TYPE, slowmatype=MA_TYPE, signalmatype=MA_TYPE)

                    #df_wti_graph['MACD'] = macd
                    #df_wti_graph['MACDSig'] = macdsignal
                    #df_wti_graph['MACDHist'] = macdhist                

                    # Parabolic SAR
                    parabolic_sar = talib.SAR(np.array(df_wti_graph['high'], dtype=float), np.array(df_wti_graph['low'], dtype=float), acceleration=0.02, maximum=0.2)

                    # PSARIndicator 함수 오동작하는 듯...
                    #ta_psar = ta.trend.PSARIndicator(df_wti_graph['high'], df_wti_graph['low'], df_wti_graph['close'])

                    df_wti_graph['PSAR'] = parabolic_sar
                    #df_wti_graph['TA_PSAR'] = ta_psar.psar()

                    # MAMA(약 32샘플후에 출력값이 나옴)
                    mama, fama = talib.MAMA(np.array(df_wti_graph['close'], dtype=float), fastlimit=0.5, slowlimit=0.05)

                    df_wti_graph['MAMA'] = mama
                    df_wti_graph['FAMA'] = fama

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA'] and df_wti_graph.at[ovc_x_idx, 'BBLower'] == df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'FAMA'] < df_wti_graph.at[ovc_x_idx, 'BBLower']:
                            df_wti_graph.at[ovc_x_idx, 'A_FAMA'] = df_wti_graph.at[ovc_x_idx, 'BBLower']
                        else:
                            df_wti_graph.at[ovc_x_idx, 'A_FAMA'] = df_wti_graph.at[ovc_x_idx, 'FAMA']
                    else:
                        pass

                    # Ichimoku Indicator
                    #wti_Ichimoku = ta.trend.IchimokuIndicator(df_wti_graph['high'], df_wti_graph['low'], n1=9, n2=26, n3=52, visual=True)
                    wti_Ichimoku = ta.trend.IchimokuIndicator(df_wti_graph['high'], df_wti_graph['low'])

                    df_wti_graph['SPAN_A'] = wti_Ichimoku.ichimoku_a()
                    df_wti_graph['SPAN_B'] = wti_Ichimoku.ichimoku_b()
                    df_wti_graph['OE_BASE'] = wti_Ichimoku.ichimoku_base_line()
                    df_wti_graph['OE_CONV'] = wti_Ichimoku.ichimoku_conversion_line()

                    if WTI_전일종가 > 0:
                        if not NightTime:
                            WTI_등락율 = ((WTI_현재가 - WTI_전일종가) / WTI_전일종가) * 100
                        else:
                            WTI_등락율 = result['등락율']
                    else:
                        WTI_등락율 = result['등락율']                    

                    if WTI_시가 == 0:

                        if result['전일대비기호'] == '5':

                            WTI_종가 = round((WTI_현재가 + result['전일대비']), 2)
                        else:
                            WTI_종가 = round((WTI_현재가 - result['전일대비']), 2)

                        df_wti_graph.at[0, 'price'] = WTI_종가
                        df_wti_graph.at[1, 'price'] = result['시가']

                        WTI_시가 = result['시가']
                    else:
                        pass                    

                    if WTI_피봇 == 0:

                        if WTI_전저 > 0 and WTI_전고 > 0:
                            WTI_피봇 = self.calc_pivot(WTI_전저, WTI_전고, WTI_종가, WTI_시가)
                        else:
                            pass
                    else:
                        pass

                    if WTI_현재가 != WTI_과거가:
                    
                        old_wti_delta = wti_delta
                        wti_delta = WTI_현재가
                        wti_직전대비.extend([wti_delta - old_wti_delta])
                        대비리스트 = list(wti_직전대비)

                        if WTI_현재가 > WTI_과거가:

                            if WTI_등락율 < 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "WTI: {0} ({1:.2f}, {2:.2f}%)⬈".format(체결가격, WTI_전일대비, WTI_등락율)                                    
                                else:
                                    jisu_str = "WTI: {0} ▲ ({1:.2f}, {2:.2f}%)".format(체결가격, WTI_전일대비, WTI_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: pink; color: blue')
                                wti_text_color = 'blue'  

                            elif WTI_등락율 > 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "WTI: {0} ▲ ({1:.2f}, {2:.2f}%)⬈".format(체결가격, WTI_전일대비, WTI_등락율)                                    
                                else:
                                    jisu_str = "WTI: {0} ▲ ({1:.2f}, {2:.2f}%)".format(체결가격, WTI_전일대비, WTI_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: pink; color: red')
                                wti_text_color = 'red'                                    
                            else:
                                pass
                            
                        elif WTI_현재가 < WTI_과거가:

                            if WTI_등락율 < 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "WTI: {0} ({1:.2f}, {2:.2f}%)⬊".format(체결가격, WTI_전일대비, WTI_등락율)                                    
                                else:
                                    jisu_str = "WTI: {0} ▼ ({1:.2f}, {2:.2f}%)".format(체결가격, WTI_전일대비, WTI_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: lightskyblue; color: blue')
                                wti_text_color = 'blue'                                    

                            elif WTI_등락율 > 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "WTI: {0} ({1:.2f}, {2:.2f}%)⬊".format(체결가격, WTI_전일대비, WTI_등락율)                                    
                                else:
                                    jisu_str = "WTI: {0} ▼ ({1:.2f}, {2:.2f}%)".format(체결가격, WTI_전일대비, WTI_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: lightskyblue; color: red')
                                wti_text_color = 'red' 
                            else:
                                pass                            
                        else:
                            pass

                        WTI_과거가 = WTI_현재가
                    else:
                        pass

                elif result['종목코드'] == HANGSENG:

                    df_hangseng_graph.at[ovc_x_idx, 'price'] = result['체결가격']
                    
                    HANGSENG_현재가 = int(result['체결가격'])
                    HANGSENG_전일대비 = int(result['체결가격'] - HANGSENG_종가)                    
                    NASDAQ_등락율 = result['등락율']

                    HANGSENG_저가 =  int(result['저가'])
                    HANGSENG_고가 =  int(result['고가'])                    
                    HANGSENG_진폭 = int(result['고가'] - result['저가'])

                    체결가격 = locale.format('%d', result['체결가격'], 1)

                    if HANGSENG_전일종가 > 0:
                        if not NightTime:
                            HANGSENG_등락율 = ((result['체결가격'] - HANGSENG_전일종가) / HANGSENG_전일종가) * 100
                        else:
                            HANGSENG_등락율 = result['등락율']
                    else:
                        HANGSENG_등락율 = result['등락율']

                    if HANGSENG_시가 == 0:

                        if result['전일대비기호'] == '5':

                            HANGSENG_종가 = int(result['체결가격'] + result['전일대비'])
                        else:
                            HANGSENG_종가 = int(result['체결가격'] - result['전일대비'])

                        df_hangseng_graph.at[0, 'price'] = HANGSENG_종가
                        df_hangseng_graph.at[1, 'price'] = result['시가']

                        HANGSENG_시가 = int(result['시가'])
                    else:
                        pass                    
                    
                    if HANGSENG_피봇 == 0:

                        if HANGSENG_전저 > 0 and HANGSENG_전고 > 0:
                            HANGSENG_피봇 = self.calc_pivot(HANGSENG_전저, HANGSENG_전고, HANGSENG_종가, HANGSENG_시가)
                        else:
                            pass
                    else:
                        pass
                    
                    if result['체결가격'] != HANGSENG_과거가:
                    
                        old_hangseng_delta = hangseng_delta
                        hangseng_delta = result['체결가격']
                        hangseng_직전대비.extend([hangseng_delta - old_hangseng_delta])
                        대비리스트 = list(hangseng_직전대비)

                        if result['체결가격'] > HANGSENG_과거가:

                            if HANGSENG_등락율 < 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "HANGSENG: {0} ({1}, {2:.2f}%)⬈".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)                                    
                                else:
                                    jisu_str = "HANGSENG: {0} ▲ ({1}, {2:.2f}%)".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: pink; color: blue')
                                hangseng_text_color = 'blue'                                           

                            elif HANGSENG_등락율 > 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "HANGSENG: {0} ▲ ({1}, {2:.2f}%)⬈".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)                                    
                                else:
                                    jisu_str = "HANGSENG: {0} ▲ ({1}, {2:.2f}%)".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: pink; color: red')
                                hangseng_text_color = 'red'                                                                             
                            else:
                                pass

                        elif result['체결가격'] < HANGSENG_과거가:

                            if HANGSENG_등락율 < 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "HANGSENG: {0} ({1}, {2:.2f}%)⬊".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)                                    
                                else:
                                    jisu_str = "HANGSENG: {0} ▼ ({1}, {2:.2f}%)".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: lightskyblue; color: blue')
                                hangseng_text_color = 'blue'

                            elif HANGSENG_등락율 > 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "HANGSENG: {0} ({1}, {2:.2f}%)⬊".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)                                    
                                else:
                                    jisu_str = "HANGSENG: {0} ▼ ({1}, {2:.2f}%)".format(체결가격, HANGSENG_전일대비, HANGSENG_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: lightskyblue; color: red')
                                hangseng_text_color = 'red'
                            else:
                                pass                            
                        else:
                            pass

                        HANGSENG_과거가 = int(result['체결가격'])
                    else:
                        pass
                    
                elif result['종목코드'] == EUROFX and pre_start:

                    df_eurofx_graph.at[ovc_x_idx, 'price'] = result['체결가격']                    
                    
                    EUROFX_현재가 = result['체결가격']
                    EUROFX_전일대비 = round((result['체결가격'] - EUROFX_종가), 5)
                    EUROFX_등락율 = result['등락율']
                    
                    EUROFX_저가 =  result['저가']
                    EUROFX_고가 =  result['고가']                    
                    EUROFX_진폭 = round((result['고가'] - result['저가']), 2)

                    체결가격 = result['체결가격']

                    if EUROFX_전일종가 > 0:
                        if not NightTime:
                            EUROFX_등락율 = ((result['체결가격'] - EUROFX_전일종가) / EUROFX_전일종가) * 100
                        else:
                            EUROFX_등락율 = result['등락율']
                    else:
                        EUROFX_등락율 = result['등락율']

                    if EUROFX_시가 == 0:

                        if result['전일대비기호'] == '5':

                            EUROFX_종가 = round((result['체결가격'] + result['전일대비']), 5)
                        else:
                            EUROFX_종가 = round((result['체결가격'] - result['전일대비']), 5)

                        df_eurofx_graph.at[0, 'price'] = EUROFX_종가
                        df_eurofx_graph.at[1, 'price'] = result['시가']

                        EUROFX_시가 = result['시가']
                    else:
                        pass                    
                    
                    if EUROFX_피봇 == 0:

                        if EUROFX_전저 > 0 and EUROFX_전고 > 0:
                            EUROFX_피봇 = self.calc_pivot(EUROFX_전저, EUROFX_전고, EUROFX_종가, EUROFX_시가)
                        else:
                            pass
                    else:
                        pass
                    
                    if result['체결가격'] != EUROFX_과거가:
                    
                        old_eurofx_delta = eurofx_delta
                        eurofx_delta = result['체결가격']
                        eurofx_직전대비.extend([eurofx_delta - old_eurofx_delta])
                        대비리스트 = list(eurofx_직전대비)                         

                        if result['체결가격'] > EUROFX_과거가:

                            if EUROFX_등락율 < 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "EUROFX: {0:0.5f} ({1:0.5f}, {2:.2f}%)⬈".format(체결가격, EUROFX_전일대비, EUROFX_등락율)                                    
                                else:
                                    jisu_str = "EUROFX: {0:0.5f} ▲ ({1:0.5f}, {2:.2f}%)".format(체결가격, EUROFX_전일대비, EUROFX_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: pink; color: blue')
                                eurofx_text_color = 'blue'                                           

                            elif EUROFX_등락율 > 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "EUROFX: {0:0.5f} ▲ ({1:0.5f}, {2:.2f}%)⬈".format(체결가격, EUROFX_전일대비, EUROFX_등락율)                                    
                                else:
                                    jisu_str = "EUROFX: {0:0.5f} ▲ ({1:0.5f}, {2:.2f}%)".format(체결가격, EUROFX_전일대비, EUROFX_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: pink; color: red')
                                eurofx_text_color = 'red'                                                                             
                            else:
                                pass
                            
                        elif result['체결가격'] < EUROFX_과거가:

                            if EUROFX_등락율 < 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "EUROFX: {0:0.5f} ({1:0.5f}, {2:.2f}%)⬊".format(체결가격, EUROFX_전일대비, EUROFX_등락율)                                    
                                else:
                                    jisu_str = "EUROFX: {0:0.5f} ▼ ({1:0.5f}, {2:.2f}%)".format(체결가격, EUROFX_전일대비, EUROFX_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: lightskyblue; color: blue')
                                eurofx_text_color = 'blue'

                            elif EUROFX_등락율 > 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "EUROFX: {0:0.5f} ({1:0.5f}, {2:.2f}%)⬊".format(체결가격, EUROFX_전일대비, EUROFX_등락율)                                    
                                else:
                                    jisu_str = "EUROFX: {0:0.5f} ▼ ({1:0.5f}, {2:.2f}%)".format(체결가격, EUROFX_전일대비, EUROFX_등락율)

                                self.label_1st.setText(jisu_str)
                                self.label_1st.setStyleSheet('background-color: lightskyblue; color: red')
                                eurofx_text_color = 'red'
                            else:
                                pass                            
                        else:
                            pass

                        EUROFX_과거가 = result['체결가격']
                    else:
                        pass
                
                elif result['종목코드'] == GOLD and pre_start:

                    df_gold_graph.at[ovc_x_idx, 'price'] = result['체결가격']

                    GOLD_현재가 = result['체결가격']
                    GOLD_전일대비 = result['체결가격'] - GOLD_종가
                    GOLD_등락율 = result['등락율']

                    GOLD_저가 =  result['저가']
                    GOLD_고가 =  result['고가']                    
                    GOLD_진폭 = result['고가'] - result['저가']
                    
                    체결가격 = locale.format('%.2f', result['체결가격'], 1)                   

                    if GOLD_전일종가 > 0:
                        if not NightTime:
                            GOLD_등락율 = ((result['체결가격'] - GOLD_전일종가) / GOLD_전일종가) * 100
                        else:
                            GOLD_등락율 = result['등락율']
                    else:
                        GOLD_등락율 = result['등락율']

                    if GOLD_시가 == 0:

                        if result['전일대비기호'] == '5':

                            GOLD_종가 = result['체결가격'] + result['전일대비']
                        else:
                            GOLD_종가 = result['체결가격'] - result['전일대비']

                        df_gold_graph.at[0, 'price'] = GOLD_종가
                        df_gold_graph.at[1, 'price'] = result['시가']

                        GOLD_시가 = result['시가']
                    else:
                        pass                    
                    
                    if GOLD_피봇 == 0:

                        if GOLD_전저 > 0 and GOLD_전고 > 0:
                            GOLD_피봇 = self.calc_pivot(GOLD_전저, GOLD_전고, GOLD_종가, GOLD_시가)
                        else:
                            pass
                    else:
                        pass
                    
                    if result['체결가격'] != GOLD_과거가:
                    
                        old_gold_delta = gold_delta
                        gold_delta = result['체결가격']
                        gold_직전대비.extend([gold_delta - old_gold_delta])
                        대비리스트 = list(gold_직전대비)

                        if result['체결가격'] > GOLD_과거가:

                            if GOLD_등락율 < 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "GOLD: {0} ({1:.2f}, {2:.2f}%)⬈".format(체결가격, GOLD_전일대비, GOLD_등락율)                                    
                                else:
                                    jisu_str = "GOLD: {0} ▲ ({1:.2f}, {2:.2f}%)".format(체결가격, GOLD_전일대비, GOLD_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: pink; color: blue')
                                gold_text_color = 'blue'                                           

                            elif GOLD_등락율 > 0:

                                if min(대비리스트) > 0:
                                    jisu_str = "GOLD: {0} ▲ ({1:.2f}, {2:.2f}%)⬈".format(체결가격, GOLD_전일대비, GOLD_등락율)                                    
                                else:
                                    jisu_str = "GOLD: {0} ▲ ({1:.2f}, {2:.2f}%)".format(체결가격, GOLD_전일대비, GOLD_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: pink; color: red')
                                gold_text_color = 'red'                                                                             
                            else:
                                pass

                        elif result['체결가격'] < GOLD_과거가:

                            if GOLD_등락율 < 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "GOLD: {0} ({1:.2f}, {2:.2f}%)⬊".format(체결가격, GOLD_전일대비, GOLD_등락율)                                    
                                else:
                                    jisu_str = "GOLD: {0} ▼ ({1:.2f}, {2:.2f}%)".format(체결가격, GOLD_전일대비, GOLD_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: lightskyblue; color: blue')
                                gold_text_color = 'blue'

                            elif GOLD_등락율 > 0:

                                if max(대비리스트) < 0:
                                    jisu_str = "GOLD: {0} ({1:.2f}, {2:.2f}%)⬊".format(체결가격, GOLD_전일대비, GOLD_등락율)                                    
                                else:
                                    jisu_str = "GOLD: {0} ▼ ({1:.2f}, {2:.2f}%)".format(체결가격, GOLD_전일대비, GOLD_등락율)

                                self.label_3rd.setText(jisu_str)
                                self.label_3rd.setStyleSheet('background-color: lightskyblue; color: red')
                                gold_text_color = 'red'
                            else:
                                pass                            
                        else:
                            pass

                        GOLD_과거가 = result['체결가격']
                    else:
                        pass
                else:
                    pass
                
            elif szTrCode == 'OVH':

                global NASDAQ_호가순매수, SP500_호가순매수, DOW_호가순매수, WTI_호가순매수, EUROFX_호가순매수, HANGSENG_호가순매수, GOLD_호가순매수

                매도호가총건수 = int(result['매도호가총건수'])
                매수호가총건수 = int(result['매수호가총건수'])
                매도호가총수량 = int(result['매도호가총수량'])
                매수호가총수량 = int(result['매수호가총수량'])

                호가순매수 = 매수호가총수량 - 매도호가총수량

                if result['종목코드'] == NASDAQ:

                    NASDAQ_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        NASDAQ_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_nasdaq_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = NASDAQ_호가순매수
                    else:
                        pass

                elif result['종목코드'] == SP500:

                    SP500_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        SP500_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_sp500_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = SP500_호가순매수
                    else:
                        pass

                elif result['종목코드'] == DOW:

                    DOW_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        DOW_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_dow_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = DOW_호가순매수
                    else:
                        pass

                elif result['종목코드'] == WTI:

                    WTI_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        WTI_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_wti_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = WTI_호가순매수
                    else:
                        pass

                elif result['종목코드'] == EUROFX:

                    EUROFX_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        EUROFX_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_eurofx_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = EUROFX_호가순매수
                    else:
                        pass

                elif result['종목코드'] == HANGSENG:

                    HANGSENG_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        HANGSENG_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_hangseng_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = HANGSENG_호가순매수
                    else:
                        pass

                elif result['종목코드'] == GOLD:

                    GOLD_호가순매수 = 호가순매수

                    if 매도호가총수량 > 0:
                        GOLD_잔량비 = 매수호가총수량 / 매도호가총수량
                        df_gold_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = GOLD_호가순매수
                    else:
                        pass
                else:
                    pass
                

            elif szTrCode == 'MK2': # 분주기 데이타 제공하지 않음

                #global NASDAQ_호가순매수, SP500_호가순매수, DOW_호가순매수, WTI_호가순매수, EUROFX_호가순매수, HANGSENG_호가순매수, GOLD_호가순매수

                print('MK2 =', result)
                
                매수잔량 = result['매수잔량']
                매도잔량 = result['매도잔량']

                호가순매수 = 매수잔량 - 매도잔량

                if result['심볼'] == KRWUSD:
                    
                    print('KRWUSD 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))

                    str = '환율: {0} at {1}\r'.format(result['현재가'], result['한국시간'])
                    print(str)

                    if not NightTime:
                        self.label_kosdaq.setText(str)
                        self.label_kosdaq.setStyleSheet('background-color: black ; color: yellow')
                    else:
                        pass

                elif result['심볼'] == EURUSD:

                    #EUROFX_호가순매수 = 호가순매수
                    print('EURUSD 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_eurofx_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = EUROFX_호가순매수

                elif result['심볼'] == DOW_SND:

                    #DOW_호가순매수 = 호가순매수
                    print('DOW_SND 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_dow_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = DOW_호가순매수

                elif result['심볼'] == SP500_SND:

                    #SP500_호가순매수 = 호가순매수
                    print('SP500_SND 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_sp500_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = SP500_호가순매수

                elif result['심볼'] == NASDAQ_SND:

                    #NASDAQ_호가순매수 = 호가순매수
                    print('NASDAQ_SND 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_nasdaq_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = NASDAQ_호가순매수

                elif result['심볼'] == WTI_SND:

                    #WTI_호가순매수 = 호가순매수
                    print('WTI_SND 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_wti_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = WTI_호가순매수

                elif result['심볼'] == HANGSENG_SND:

                    #HANGSENG_호가순매수 = 호가순매수
                    print('HANGSENG_SND 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_hangseng_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = HANGSENG_호가순매수

                elif result['심볼'] == GOLD_SND:

                    #GOLD_호가순매수 = 호가순매수
                    print('GOLD_SND 매수잔량 = {0}, 매도잔량 = {1}\r'.format(매수잔량, 매도잔량))
                    #df_gold_graph.at[ovc_x_idx, 'hoga_remainder_ratio'] = GOLD_호가순매수
                else:
                    pass
            else:
                pass                               

        except Exception as e:
            pass
    #####################################################################################################################################################################

    def closeEvent(self,event):

        print('서버연결 해지...')
        self.parent.connection.disconnect()

        if self.telegram_send_worker.isRunning():
            self.telegram_send_worker.terminate()
        else:
            pass

        if self.telegram_listen_worker.isRunning():
            self.telegram_listen_worker.terminate()
        else:
            pass

        if self.real_data_worker.isRunning():            
            self.real_data_worker.terminate()
            print('real_data_worker is terminated...')
        else:
            pass

        if self.screen_update_worker.isRunning():            
            self.screen_update_worker.terminate()
        else:
            pass
    '''
    @classmethod
    def test_classmethod(cls):

        print('sky...')
    '''

#####################################################################################################################################################################
# Big Chart Update Thread
#####################################################################################################################################################################
class bigchart_update_worker(QThread):

    finished = pyqtSignal(str)

    def run(self):

        while True:

            str = 'Big Chart Update...'                

            self.finished.emit(str)
            #self.msleep(BIGCHART_UPDATE_INTERVAL)
            QTest.qWait(BIGCHART_UPDATE_INTERVAL)
########################################################################################################################
# Big Chart UI Class
########################################################################################################################
Ui_BigChart, QtBaseClass_BigChart = uic.loadUiType(UI_DIR+"BigChart.ui")
class 화면_BigChart(QDialog, Ui_BigChart):

    bigchart = False   
    
    def __init__(self, parent=None):

        super(화면_BigChart, self).__init__(parent, flags = Qt.WindowTitleHint | Qt.WindowMinMaxButtonsHint | Qt.WindowCloseButtonHint)     
        self.setAttribute(Qt.WA_DeleteOnClose)
        self.setupUi(self)

        self.parent = parent
        화면_BigChart.bigchart = True

        self.bigchart_update_worker = bigchart_update_worker()
        self.bigchart_update_worker.finished.connect(self.update_bigchart)

        self.comboBox1.setStyleSheet("background-color: white")
        self.comboBox2.setStyleSheet("background-color: white")
        self.comboBox3.setStyleSheet("background-color: white")
        self.comboBox4.setStyleSheet("background-color: white")
        self.comboBox5.setStyleSheet("background-color: white")
        self.comboBox6.setStyleSheet("background-color: white")

        self.checkBox_plot1_bband.stateChanged.connect(self.checkBox_plot1_bband_checkState)
        self.checkBox_plot2_bband.stateChanged.connect(self.checkBox_plot2_bband_checkState)
        self.checkBox_plot3_bband.stateChanged.connect(self.checkBox_plot3_bband_checkState)
        self.checkBox_plot4_bband.stateChanged.connect(self.checkBox_plot4_bband_checkState)
        self.checkBox_plot5_bband.stateChanged.connect(self.checkBox_plot5_bband_checkState)
        self.checkBox_plot6_bband.stateChanged.connect(self.checkBox_plot6_bband_checkState)

        self.checkBox_plot1_mama.stateChanged.connect(self.checkBox_plot1_mama_checkState)
        self.checkBox_plot2_mama.stateChanged.connect(self.checkBox_plot2_mama_checkState)
        self.checkBox_plot3_mama.stateChanged.connect(self.checkBox_plot3_mama_checkState)
        self.checkBox_plot4_mama.stateChanged.connect(self.checkBox_plot4_mama_checkState)
        self.checkBox_plot5_mama.stateChanged.connect(self.checkBox_plot5_mama_checkState)
        self.checkBox_plot6_mama.stateChanged.connect(self.checkBox_plot6_mama_checkState)

        self.checkBox_plot1_oe.stateChanged.connect(self.checkBox_plot1_oe_checkState)
        self.checkBox_plot2_oe.stateChanged.connect(self.checkBox_plot2_oe_checkState)
        self.checkBox_plot3_oe.stateChanged.connect(self.checkBox_plot3_oe_checkState)
        self.checkBox_plot4_oe.stateChanged.connect(self.checkBox_plot4_oe_checkState)
        self.checkBox_plot5_oe.stateChanged.connect(self.checkBox_plot5_oe_checkState)
        self.checkBox_plot6_oe.stateChanged.connect(self.checkBox_plot6_oe_checkState)
        
        if not NightTime:

            if TARGET_MONTH_SELECT == 1:

                widget_title = repr(current_month) + '월 만기 주간 Big Chart'

            elif TARGET_MONTH_SELECT == 2:

                widget_title = repr(next_month) + '월 만기 주간 Big Chart'
            else:
                widget_title = repr(month_after_next) + '월 만기 주간 Big Chart'
        else:
            if MANGI_YAGAN:

                if TARGET_MONTH_SELECT == 1:

                    widget_title = repr(next_month) + '월 만기 야간 Big Chart'

                elif TARGET_MONTH_SELECT == 2:

                    widget_title = repr(month_after_next) + '월 만기 야간 Big Chart'
                else:
                    pass
            else:
                if TARGET_MONTH_SELECT == 1:

                    widget_title = repr(current_month) + '월 만기 야간 Big Chart'

                elif TARGET_MONTH_SELECT == 2:

                    widget_title = repr(next_month) + '월 만기 야간 Big Chart'

                else:
                    widget_title = repr(month_after_next) + '월 만기 야간 Big Chart'

        self.setWindowTitle(widget_title)

        # 시간표시
        self.label_time.setStyleSheet('background-color: lawngreen; color: blue')
        self.label_time.setFont(QFont("Consolas", 9, QFont.Bold))
        self.label_time.setText("🕘")

        # Plot1 가격표시
        self.label_p1_1.setText(" 좌표 ")
        self.label_p1_1.setStyleSheet('background-color: lime ; color: black')
        self.label_p1_1.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p1_2.setText(" BB Middle\n PSAR ")
        self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')
        self.label_p1_2.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p1_3.setText(" OneEye ")
        self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')
        self.label_p1_3.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p1_4.setText(" MAMA ")
        self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')
        self.label_p1_4.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_11.setText(" 전저 ")
        self.label_11.setStyleSheet('background-color: goldenrod ; color: black')
        self.label_11.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_12.setText(" 전고 ")
        self.label_12.setStyleSheet('background-color: gold ; color: black')
        self.label_12.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_13.setText(" 종가 ")
        self.label_13.setStyleSheet('background-color: lime ; color: black')
        self.label_13.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_14.setText(" 피봇 ")
        self.label_14.setStyleSheet('background-color: magenta ; color: black')
        self.label_14.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_15.setText(" 시가 ")
        self.label_15.setStyleSheet('background-color: red ; color: white')
        self.label_15.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_16.setText(" 저가 ")
        self.label_16.setStyleSheet('background-color: skyblue ; color: black')
        self.label_16.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_17.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        self.label_17.setStyleSheet('background-color: black ; color: yellow')
        self.label_17.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_18.setText(" 고가 ")
        self.label_18.setStyleSheet('background-color: pink ; color: black')
        self.label_18.setFont(QFont("Consolas", 9, QFont.Bold))

        # Plot2 가격표시
        self.label_p2_1.setText(" 좌표 ")
        self.label_p2_1.setStyleSheet('background-color: lime ; color: black')
        self.label_p2_1.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p2_2.setText(" BB Middle\n PSAR ")
        self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')
        self.label_p2_2.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p2_3.setText(" OneEye ")
        self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')
        self.label_p2_3.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p2_4.setText(" MAMA ")
        self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')
        self.label_p2_4.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_21.setText(" 전저 ")
        self.label_21.setStyleSheet('background-color: goldenrod ; color: black')
        self.label_21.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_22.setText(" 전고 ")
        self.label_22.setStyleSheet('background-color: gold ; color: black')
        self.label_22.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_23.setText(" 종가 ")
        self.label_23.setStyleSheet('background-color: lime ; color: black')
        self.label_23.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_24.setText(" 피봇 ")
        self.label_24.setStyleSheet('background-color: magenta ; color: black')
        self.label_24.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_25.setText(" 시가 ")
        self.label_25.setStyleSheet('background-color: red ; color: white')
        self.label_25.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_26.setText(" 저가 ")
        self.label_26.setStyleSheet('background-color: skyblue ; color: black')
        self.label_26.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_27.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        self.label_27.setStyleSheet('background-color: black ; color: yellow')
        self.label_27.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_28.setText(" 고가 ")
        self.label_28.setStyleSheet('background-color: pink ; color: black')
        self.label_28.setFont(QFont("Consolas", 9, QFont.Bold))

        # Plot3 가격표시
        self.label_p3_1.setText(" 좌표 ")
        self.label_p3_1.setStyleSheet('background-color: lime ; color: black')
        self.label_p3_1.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p3_2.setText(" BB Middle\n PSAR ")
        self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')
        self.label_p3_2.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p3_3.setText(" OneEye ")
        self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')
        self.label_p3_3.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p3_4.setText(" MAMA ")
        self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')
        self.label_p3_4.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_31.setText(" 전저 ")
        self.label_31.setStyleSheet('background-color: goldenrod ; color: black')
        self.label_31.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_32.setText(" 전고 ")
        self.label_32.setStyleSheet('background-color: gold ; color: black')
        self.label_32.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_33.setText(" 종가 ")
        self.label_33.setStyleSheet('background-color: lime ; color: black')
        self.label_33.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_34.setText(" 피봇 ")
        self.label_34.setStyleSheet('background-color: magenta ; color: black')
        self.label_34.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_35.setText(" 시가 ")
        self.label_35.setStyleSheet('background-color: red ; color: white')
        self.label_35.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_36.setText(" 저가 ")
        self.label_36.setStyleSheet('background-color: skyblue ; color: black')
        self.label_36.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_37.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        self.label_37.setStyleSheet('background-color: black ; color: yellow')
        self.label_37.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_38.setText(" 고가 ")
        self.label_38.setStyleSheet('background-color: pink ; color: black')
        self.label_38.setFont(QFont("Consolas", 9, QFont.Bold))

        # Plot4 가격표시
        self.label_p4_1.setText(" 좌표 ")
        self.label_p4_1.setStyleSheet('background-color: lime ; color: black')
        self.label_p4_1.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p4_2.setText(" BB Middle\n PSAR ")
        self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')
        self.label_p4_2.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p4_3.setText(" OneEye ")
        self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')
        self.label_p4_3.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p4_4.setText(" MAMA ")
        self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')
        self.label_p4_4.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_41.setText(" 전저 ")
        self.label_41.setStyleSheet('background-color: goldenrod ; color: black')
        self.label_41.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_42.setText(" 전고 ")
        self.label_42.setStyleSheet('background-color: gold ; color: black')
        self.label_42.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_43.setText(" 종가 ")
        self.label_43.setStyleSheet('background-color: lime ; color: black')
        self.label_43.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_44.setText(" 피봇 ")
        self.label_44.setStyleSheet('background-color: magenta ; color: black')
        self.label_44.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_45.setText(" 시가 ")
        self.label_45.setStyleSheet('background-color: red ; color: white')
        self.label_45.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_46.setText(" 저가 ")
        self.label_46.setStyleSheet('background-color: skyblue ; color: black')
        self.label_46.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_47.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        self.label_47.setStyleSheet('background-color: black ; color: yellow')
        self.label_47.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_48.setText(" 고가 ")
        self.label_48.setStyleSheet('background-color: pink ; color: black')
        self.label_48.setFont(QFont("Consolas", 9, QFont.Bold))

        # Plot5 가격표시
        self.label_p5_1.setText(" 좌표 ")
        self.label_p5_1.setStyleSheet('background-color: lime ; color: black')
        self.label_p5_1.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p5_2.setText(" BB Middle\n PSAR ")
        self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')
        self.label_p5_2.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p5_3.setText(" OneEye ")
        self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')
        self.label_p5_3.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p5_4.setText(" MAMA ")
        self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')
        self.label_p5_4.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_51.setText(" 전저 ")
        self.label_51.setStyleSheet('background-color: goldenrod ; color: black')
        self.label_51.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_52.setText(" 전고 ")
        self.label_52.setStyleSheet('background-color: gold ; color: black')
        self.label_52.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_53.setText(" 종가 ")
        self.label_53.setStyleSheet('background-color: lime ; color: black')
        self.label_53.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_54.setText(" 피봇 ")
        self.label_54.setStyleSheet('background-color: magenta ; color: black')
        self.label_54.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_55.setText(" 시가 ")
        self.label_55.setStyleSheet('background-color: red ; color: white')
        self.label_55.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_56.setText(" 저가 ")
        self.label_56.setStyleSheet('background-color: skyblue ; color: black')
        self.label_56.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_57.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        self.label_57.setStyleSheet('background-color: black ; color: yellow')
        self.label_57.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_58.setText(" 고가 ")
        self.label_58.setStyleSheet('background-color: pink ; color: black')
        self.label_58.setFont(QFont("Consolas", 9, QFont.Bold))

        # Plot6 가격표시
        self.label_p6_1.setText(" 좌표 ")
        self.label_p6_1.setStyleSheet('background-color: lime ; color: black')
        self.label_p6_1.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p6_2.setText(" BB Middle\n PSAR ")
        self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')
        self.label_p6_2.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p6_3.setText(" OneEye ")
        self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')
        self.label_p6_3.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_p6_4.setText(" MAMA ")
        self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')
        self.label_p6_4.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_61.setText(" 전저 ")
        self.label_61.setStyleSheet('background-color: goldenrod ; color: black')
        self.label_61.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_62.setText(" 전고 ")
        self.label_62.setStyleSheet('background-color: gold ; color: black')
        self.label_62.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_63.setText(" 종가 ")
        self.label_63.setStyleSheet('background-color: lime ; color: black')
        self.label_63.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_64.setText(" 피봇 ")
        self.label_64.setStyleSheet('background-color: magenta ; color: black')
        self.label_64.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_65.setText(" 시가 ")
        self.label_65.setStyleSheet('background-color: red ; color: white')
        self.label_65.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_66.setText(" 저가 ")
        self.label_66.setStyleSheet('background-color: skyblue ; color: black')
        self.label_66.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_67.setText(" 0.0 (전일대비, 등락율, 진폭) ")
        self.label_67.setStyleSheet('background-color: black ; color: yellow')
        self.label_67.setFont(QFont("Consolas", 9, QFont.Bold))

        self.label_68.setText(" 고가 ")
        self.label_68.setStyleSheet('background-color: pink ; color: black')
        self.label_68.setFont(QFont("Consolas", 9, QFont.Bold))

        self.comboBox1.addItems(['선물체결', '선물잔량비', '옵션체결', '옵션잔량비', '등락율비', '옵션미결', '선물가격', 'SP500', 'DOW', 'NASDAQ', 'WTI Oil', 'EUROFX', '항셍', 'GOLD', \
            'Reserved'])
        self.comboBox1.insertSeparator(7)
        self.comboBox1.insertSeparator(15)
        self.comboBox1.currentIndexChanged.connect(self.cb1_selectionChanged)

        self.comboBox2.addItems(['옵션체결', '옵션잔량비', '선물체결', '선물잔량비', '등락율비', '옵션미결', '옵션가격', 'SP500', 'DOW', 'NASDAQ', 'WTI Oil', 'EUROFX', '항셍', 'GOLD', \
            'Reserved'])
        self.comboBox2.insertSeparator(7)
        self.comboBox2.insertSeparator(15)
        self.comboBox2.currentIndexChanged.connect(self.cb2_selectionChanged)

        self.comboBox3.addItems(['옵션체결', '옵션잔량비', '선물체결', '선물잔량비', '등락율비', '옵션미결', '옵션가격', 'SP500', 'DOW', 'NASDAQ', 'WTI Oil', 'EUROFX', '항셍', 'GOLD', \
            'Reserved'])
        self.comboBox3.insertSeparator(7)
        self.comboBox3.insertSeparator(15)
        self.comboBox3.currentIndexChanged.connect(self.cb3_selectionChanged)

        self.comboBox4.addItems(['선물체결', '선물잔량비', '옵션체결', '옵션잔량비', '등락율비', '옵션미결', '선물가격', 'SP500', 'DOW', 'NASDAQ', 'WTI Oil', 'EUROFX', '항셍', 'GOLD', \
            'Reserved'])
        self.comboBox4.insertSeparator(7)
        self.comboBox4.insertSeparator(15)
        self.comboBox4.currentIndexChanged.connect(self.cb4_selectionChanged)

        self.comboBox5.addItems(['옵션체결', '옵션잔량비', '선물체결', '선물잔량비', '등락율비', '옵션미결', '옵션가격', 'SP500', 'DOW', 'NASDAQ', 'WTI Oil', 'EUROFX', '항셍', 'GOLD', \
            'Reserved'])
        self.comboBox5.insertSeparator(7)
        self.comboBox5.insertSeparator(15)
        self.comboBox5.currentIndexChanged.connect(self.cb5_selectionChanged)

        self.comboBox6.addItems(['옵션체결', '옵션잔량비', '선물체결', '선물잔량비', '등락율비', '옵션미결', '옵션가격', 'SP500', 'DOW', 'NASDAQ', 'WTI Oil', 'EUROFX', '항셍', 'GOLD', \
            'Reserved'])
        self.comboBox6.insertSeparator(7)
        self.comboBox6.insertSeparator(15)
        self.comboBox6.currentIndexChanged.connect(self.cb6_selectionChanged)             

        # Plot1
        global plot1_time_line_jugan_start, plot1_time_line_yagan_start, plot1_time_line, plot1_fut_price_curve, plot1_kp200_curve
        global plot1_fut_jl_line, plot1_fut_jh_line, plot1_fut_close_line, plot1_fut_open_line, plot1_fut_pivot_line, plot1_fut_low_line, plot1_fut_high_line    
        global plot1_ovc_jl_line, plot1_ovc_jh_line, plot1_ovc_close_line, plot1_ovc_open_line, plot1_ovc_pivot_line, plot1_ovc_low_line, plot1_ovc_high_line    
        global plot1_fut_hoga_line
        global plot1_fut_volume_curve, plot1_fut_volume_plus_curve, plot1_fut_volume_minus_curve
        global plot1_call_hoga_curve, plot1_put_hoga_curve
        global plot1_call_volume_curve, plot1_put_volume_curve
        global plot1_fut_choga_rr_curve, plot1_fut_nhoga_rr_curve, plot1_fut_drate_curve, plot1_dow_drate_curve
        global plot1_call_drate_curve, plot1_put_drate_curve
        global plot1_call_oi_curve, plot1_put_oi_curve        
        global plot1_sp500_curve, plot1_dow_curve, plot1_nasdaq_curve, plot1_wti_curve        
        global plot1_vLine, plot1_hLine
        global plot1_kp200_line, plot1_kp200_2_line, plot1_kp200_3_line, plot1_kp200_4_line, plot1_kp200_5_line, plot1_kp200_6_line, plot1_kp200_7_line
        global plot1_bollinger_upper_curve, plot1_bollinger_middle_curve, plot1_bollinger_lower_curve, plot1_sar_curve
        global plot1_macd_curve, plot1_macdsig_curve, plot1_macdhist_curve, plot1_mama_curve, plot1_fama_curve, plot1_oe_conv_curve, plot1_oe_base_curve           

        # Plot2
        global plot2_fut_volume_curve, plot2_fut_volume_plus_curve, plot2_fut_volume_minus_curve        
        global plot2_call_hoga_curve, plot2_put_hoga_curve        
        global plot2_call_volume_curve, plot2_put_volume_curve
        global plot2_fut_choga_rr_curve, plot2_fut_nhoga_rr_curve, plot2_fut_drate_curve, plot2_dow_drate_curve
        global plot2_call_drate_curve, plot2_put_drate_curve
        global plot2_call_oi_curve, plot2_put_oi_curve
        global plot2_sp500_curve, plot2_dow_curve, plot2_nasdaq_curve, plot2_wti_curve        
        global plot2_time_line_jugan_start, plot2_time_line_yagan_start, plot2_time_line
        global plot2_fut_hoga_line
        global plot2_ovc_jl_line, plot2_ovc_jh_line, plot2_ovc_close_line, plot2_ovc_open_line, plot2_ovc_pivot_line, plot2_ovc_low_line, plot2_ovc_high_line
        global plot2_mv_line, plot2_call_curve, plot2_put_curve
        global plot2_center_val_curve
        global plot2_center_val_line, plot2_center_val_upper_line, plot2_center_val_lower_line
        global plot2_vLine, plot2_hLine
        global plot2_bollinger_upper_curve, plot2_bollinger_middle_curve, plot2_bollinger_lower_curve, plot2_sar_curve
        global plot2_macd_curve, plot2_macdsig_curve, plot2_macdhist_curve, plot2_mama_curve, plot2_fama_curve, plot2_oe_conv_curve, plot2_oe_base_curve

        # Plot3
        global plot3_fut_volume_curve, plot3_fut_volume_plus_curve, plot3_fut_volume_minus_curve        
        global plot3_call_hoga_curve, plot3_put_hoga_curve        
        global plot3_call_volume_curve, plot3_put_volume_curve
        global plot3_fut_choga_rr_curve, plot3_fut_nhoga_rr_curve, plot3_fut_drate_curve, plot3_dow_drate_curve
        global plot3_call_drate_curve, plot3_put_drate_curve
        global plot3_call_oi_curve, plot3_put_oi_curve
        global plot3_sp500_curve, plot3_dow_curve, plot3_nasdaq_curve, plot3_wti_curve        
        global plot3_time_line_jugan_start, plot3_time_line_yagan_start, plot3_time_line
        global plot3_ovc_jl_line, plot3_ovc_jh_line, plot3_ovc_close_line, plot3_ovc_open_line, plot3_ovc_pivot_line, plot3_ovc_low_line, plot3_ovc_high_line
        global plot3_fut_hoga_line
        global plot3_mv_line, plot3_call_curve, plot3_put_curve
        global plot3_center_val_curve
        global plot3_center_val_line, plot3_center_val_upper_line, plot3_center_val_lower_line
        global plot3_vLine, plot3_hLine
        global plot3_bollinger_upper_curve, plot3_bollinger_middle_curve, plot3_bollinger_lower_curve, plot3_sar_curve
        global plot3_macd_curve, plot3_macdsig_curve, plot3_macdhist_curve, plot3_mama_curve, plot3_fama_curve, plot3_oe_conv_curve, plot3_oe_base_curve

        # Plot4
        global plot4_time_line_jugan_start, plot4_time_line_yagan_start, plot4_time_line, plot4_fut_price_curve, plot4_kp200_curve
        global plot4_fut_jl_line, plot4_fut_jh_line, plot4_fut_close_line, plot4_fut_open_line, plot4_fut_pivot_line, plot4_fut_low_line, plot4_fut_high_line    
        global plot4_ovc_jl_line, plot4_ovc_jh_line, plot4_ovc_close_line, plot4_ovc_open_line, plot4_ovc_pivot_line, plot4_ovc_low_line, plot4_ovc_high_line    
        global plot4_fut_hoga_line
        global plot4_fut_volume_curve, plot4_fut_volume_plus_curve, plot4_fut_volume_minus_curve
        global plot4_call_hoga_curve, plot4_put_hoga_curve
        global plot4_call_volume_curve, plot4_put_volume_curve
        global plot4_fut_choga_rr_curve, plot4_fut_nhoga_rr_curve, plot4_fut_drate_curve, plot4_dow_drate_curve
        global plot4_call_drate_curve, plot4_put_drate_curve
        global plot4_call_oi_curve, plot4_put_oi_curve        
        global plot4_sp500_curve, plot4_dow_curve, plot4_nasdaq_curve, plot4_wti_curve        
        global plot4_vLine, plot4_hLine
        global plot4_kp200_line, plot4_kp200_2_line, plot4_kp200_3_line, plot4_kp200_4_line, plot4_kp200_5_line, plot4_kp200_6_line, plot4_kp200_7_line
        global plot4_bollinger_upper_curve, plot4_bollinger_middle_curve, plot4_bollinger_lower_curve, plot4_sar_curve
        global plot4_macd_curve, plot4_macdsig_curve, plot4_macdhist_curve, plot4_mama_curve, plot4_fama_curve, plot4_oe_conv_curve, plot4_oe_base_curve          

        # Plot5
        global plot5_fut_volume_curve, plot5_fut_volume_plus_curve, plot5_fut_volume_minus_curve        
        global plot5_call_hoga_curve, plot5_put_hoga_curve        
        global plot5_call_volume_curve, plot5_put_volume_curve
        global plot5_fut_choga_rr_curve, plot5_fut_nhoga_rr_curve, plot5_fut_drate_curve, plot5_dow_drate_curve
        global plot5_call_drate_curve, plot5_put_drate_curve
        global plot5_call_oi_curve, plot5_put_oi_curve
        global plot5_sp500_curve, plot5_dow_curve, plot5_nasdaq_curve, plot5_wti_curve        
        global plot5_time_line_jugan_start, plot5_time_line_yagan_start, plot5_time_line
        global plot5_fut_hoga_line
        global plot5_ovc_jl_line, plot5_ovc_jh_line, plot5_ovc_close_line, plot5_ovc_open_line, plot5_ovc_pivot_line, plot5_ovc_low_line, plot5_ovc_high_line
        global plot5_mv_line, plot5_call_curve, plot5_put_curve
        global plot5_center_val_curve
        global plot5_center_val_line, plot5_center_val_upper_line, plot5_center_val_lower_line
        global plot5_vLine, plot5_hLine
        global plot5_bollinger_upper_curve, plot5_bollinger_middle_curve, plot5_bollinger_lower_curve, plot5_sar_curve
        global plot5_macd_curve, plot5_macdsig_curve, plot5_macdhist_curve, plot5_mama_curve, plot5_fama_curve, plot5_oe_conv_curve, plot5_oe_base_curve

        # Plot6
        global plot6_fut_volume_curve, plot6_fut_volume_plus_curve, plot6_fut_volume_minus_curve        
        global plot6_call_hoga_curve, plot6_put_hoga_curve        
        global plot6_call_volume_curve, plot6_put_volume_curve
        global plot6_fut_choga_rr_curve, plot6_fut_nhoga_rr_curve, plot6_fut_drate_curve, plot6_dow_drate_curve
        global plot6_call_drate_curve, plot6_put_drate_curve
        global plot6_call_oi_curve, plot6_put_oi_curve
        global plot6_sp500_curve, plot6_dow_curve, plot6_nasdaq_curve, plot6_wti_curve        
        global plot6_time_line_jugan_start, plot6_time_line_yagan_start, plot6_time_line
        global plot6_fut_hoga_line
        global plot6_ovc_jl_line, plot6_ovc_jh_line, plot6_ovc_close_line, plot6_ovc_open_line, plot6_ovc_pivot_line, plot6_ovc_low_line, plot6_ovc_high_line
        global plot6_mv_line, plot6_call_curve, plot6_put_curve
        global plot6_center_val_curve
        global plot6_center_val_line, plot6_center_val_upper_line, plot6_center_val_lower_line
        global plot6_vLine, plot6_hLine
        global plot6_bollinger_upper_curve, plot6_bollinger_middle_curve, plot6_bollinger_lower_curve, plot6_sar_curve
        global plot6_macd_curve, plot6_macdsig_curve, plot6_macdhist_curve, plot6_mama_curve, plot6_fama_curve, plot6_oe_conv_curve, plot6_oe_base_curve  

        # Enable antialiasing for prettier plots
        pg.setConfigOptions(antialias=True)

        self.plot1.enableAutoRange('y', True)
        self.plot1.plotItem.showGrid(True, True, 0.5)
        #self.plot1.setRange(xRange=[0, jugan_timespan], padding=0)  

        self.plot2.enableAutoRange('y', True)
        self.plot2.plotItem.showGrid(True, True, 0.5)
        #self.plot2.setRange(xRange=[0, jugan_timespan], padding=0)
        self.plot2.setXLink(self.plot1)

        self.plot3.enableAutoRange('y', True)
        self.plot3.plotItem.showGrid(True, True, 0.5)
        #self.plot3.setRange(xRange=[0, jugan_timespan], padding=0) 
        self.plot3.setXLink(self.plot1)

        self.plot4.enableAutoRange('y', True)
        self.plot4.plotItem.showGrid(True, True, 0.5)
        #self.plot4.setRange(xRange=[0, jugan_timespan], padding=0)         

        self.plot5.enableAutoRange('y', True)
        self.plot5.plotItem.showGrid(True, True, 0.5)
        #self.plot5.setRange(xRange=[0, jugan_timespan], padding=0)

        if SECOND_PLOT_SYNC: 
            self.plot5.setXLink(self.plot4)
        else:
            pass

        self.plot6.enableAutoRange('y', True)
        self.plot6.plotItem.showGrid(True, True, 0.5)
        #self.plot6.setRange(xRange=[0, jugan_timespan], padding=0)

        if SECOND_PLOT_SYNC: 
            self.plot6.setXLink(self.plot4)
        else:
            pass

        # Line & Curve of the Plot1 
        plot1_time_line_jugan_start = self.plot1.addLine(x=0, y=None, pen=jugan_x_start_pen)
        plot1_time_line_yagan_start = self.plot1.addLine(x=0, y=None, pen=yagan_x_start_pen)
        plot1_time_line = self.plot1.addLine(x=0, y=None, pen=moving_x_pen)

        plot1_fut_hoga_line = self.plot1.addLine(x=None, pen=ypen1)
        
        plot1_fut_jl_line = self.plot1.addLine(x=None, pen=goldenrod_pen)
        plot1_fut_jh_line = self.plot1.addLine(x=None, pen=gold_pen)  
        plot1_fut_open_line = self.plot1.addLine(x=None, pen=red_pen)
        plot1_fut_close_line = self.plot1.addLine(x=None, pen=lime_pen)
        plot1_fut_pivot_line = self.plot1.addLine(x=None, pen=fut_pvt_pen)
        plot1_fut_low_line = self.plot1.addLine(x=None, pen=skyblue_pen)
        plot1_fut_high_line = self.plot1.addLine(x=None, pen=pink_pen)
        
        for i in range(10):
            plot1_kp200_line.append(self.plot1.addLine(x=None, pen=kp200_pen))
        
        plot1_ovc_jl_line = self.plot1.addLine(x=None, pen=goldenrod_pen)
        plot1_ovc_jh_line = self.plot1.addLine(x=None, pen=gold_pen)  
        plot1_ovc_close_line = self.plot1.addLine(x=None, pen=lime_pen)
        plot1_ovc_open_line = self.plot1.addLine(x=None, pen=red_pen)
        plot1_ovc_pivot_line = self.plot1.addLine(x=None, pen=fut_pvt_pen)
        plot1_ovc_low_line = self.plot1.addLine(x=None, pen=skyblue_pen)
        plot1_ovc_high_line = self.plot1.addLine(x=None, pen=pink_pen) 

        plot1_fut_choga_rr_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_fut_nhoga_rr_curve = self.plot1.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot1_fut_drate_curve = self.plot1.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot1_dow_drate_curve = self.plot1.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot1_call_drate_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_put_drate_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot1_call_oi_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_put_oi_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3) 

        plot1_fut_volume_curve = self.plot1.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3)
        plot1_fut_volume_plus_curve = self.plot1.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3)
        plot1_fut_volume_minus_curve = self.plot1.plot(pen=aqua_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3)

        plot1_call_volume_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_put_volume_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot1_call_hoga_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_put_hoga_curve = self.plot1.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot1_fut_price_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_kp200_curve = self.plot1.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot1_sp500_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_dow_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot1_nasdaq_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3) 
        plot1_wti_curve = self.plot1.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        plot1_bollinger_upper_curve = self.plot1.plot(pen=bb_upper_pen)
        plot1_bollinger_middle_curve = self.plot1.plot(pen=bb_middle_pen)
        plot1_bollinger_lower_curve = self.plot1.plot(pen=bb_lower_pen)

        plot1_mama_curve = self.plot1.plot(pen=mama_pen)
        plot1_fama_curve = self.plot1.plot(pen=fama_pen)

        plot1_oe_conv_curve = self.plot1.plot(pen=mama_pen)
        plot1_oe_base_curve = self.plot1.plot(pen=fama_pen)
        
        #cross hair
        if CROSS_HAIR_LINE:
            plot1_vLine = pg.InfiniteLine(angle=90, movable=False)
            plot1_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot1.addItem(plot1_vLine, ignoreBounds=True)
            self.plot1.addItem(plot1_hLine, ignoreBounds=True)
            self.plot1.setMouseTracking(True)
            self.plot1.scene().sigMouseMoved.connect(self.plot1_mouseMoved)
            #self.plot1.scene().sigMouseClicked.connect(self.plot1_mouseClicked)
        else:
            pass  

        # Line & Curve of the Plot2
        plot2_time_line_jugan_start = self.plot2.addLine(x=0, y=None, pen=jugan_x_start_pen)
        plot2_time_line_yagan_start = self.plot2.addLine(x=0, y=None, pen=yagan_x_start_pen)
        plot2_time_line = self.plot2.addLine(x=0, y=None, pen=moving_x_pen)

        plot2_fut_hoga_line = self.plot2.addLine(x=None, pen=ypen1)
        
        plot2_ovc_jl_line = self.plot2.addLine(x=None, pen=goldenrod_pen)
        plot2_ovc_jh_line = self.plot2.addLine(x=None, pen=gold_pen)  
        plot2_ovc_close_line = self.plot2.addLine(x=None, pen=lime_pen)
        plot2_ovc_open_line = self.plot2.addLine(x=None, pen=red_pen)
        plot2_ovc_pivot_line = self.plot2.addLine(x=None, pen=fut_pvt_pen)
        plot2_ovc_low_line = self.plot2.addLine(x=None, pen=skyblue_pen)
        plot2_ovc_high_line = self.plot2.addLine(x=None, pen=pink_pen)
        
        for i in range(9):
            plot2_mv_line.append(self.plot2.addLine(x=None, pen=mvpen))

        plot2_fut_choga_rr_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_fut_nhoga_rr_curve = self.plot2.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot2_fut_drate_curve = self.plot2.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot2_dow_drate_curve = self.plot2.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot2_call_drate_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_put_drate_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot2_call_oi_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_put_oi_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3) 

        plot2_call_hoga_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_put_hoga_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot2_call_volume_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_put_volume_curve = self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot2_fut_volume_curve = self.plot2.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot2_fut_volume_plus_curve = self.plot2.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot2_fut_volume_minus_curve = self.plot2.plot(pen=aqua_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        
        for i in range(ActvalCount):
            plot2_call_curve.append(self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            plot2_put_curve.append(self.plot2.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))
        
        plot2_center_val_curve = self.plot2.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3)

        plot2_center_val_lower_line = self.plot2.addLine(x=None, pen=skyblue_pen)
        plot2_center_val_line = self.plot2.addLine(x=None, pen=gold_pen)
        plot2_center_val_upper_line = self.plot2.addLine(x=None, pen=pink_pen)
        
        plot2_sp500_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_dow_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_nasdaq_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot2_wti_curve = self.plot2.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        plot2_bollinger_upper_curve = self.plot2.plot(pen=bb_upper_pen)
        plot2_bollinger_middle_curve = self.plot2.plot(pen=bb_middle_pen)
        plot2_bollinger_lower_curve = self.plot2.plot(pen=bb_lower_pen)

        plot2_mama_curve = self.plot2.plot(pen=mama_pen)
        plot2_fama_curve = self.plot2.plot(pen=fama_pen)

        plot2_oe_conv_curve = self.plot2.plot(pen=mama_pen)
        plot2_oe_base_curve = self.plot2.plot(pen=fama_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            plot2_vLine = pg.InfiniteLine(angle=90, movable=False)
            plot2_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot2.addItem(plot2_vLine, ignoreBounds=True)
            self.plot2.addItem(plot2_hLine, ignoreBounds=True)
            self.plot2.setMouseTracking(True)
            self.plot2.scene().sigMouseMoved.connect(self.plot2_mouseMoved)
            #self.plot2.scene().sigMouseClicked.connect(self.plot2_mouseClicked)
        else:
            pass 

        # Line & Curve of the Plot3
        plot3_time_line_jugan_start = self.plot3.addLine(x=0, y=None, pen=jugan_x_start_pen)
        plot3_time_line_yagan_start = self.plot3.addLine(x=0, y=None, pen=yagan_x_start_pen)
        plot3_time_line = self.plot3.addLine(x=0, y=None, pen=moving_x_pen)

        plot3_fut_hoga_line = self.plot3.addLine(x=None, pen=ypen1)
        
        plot3_ovc_jl_line = self.plot3.addLine(x=None, pen=goldenrod_pen)
        plot3_ovc_jh_line = self.plot3.addLine(x=None, pen=gold_pen)  
        plot3_ovc_close_line = self.plot3.addLine(x=None, pen=lime_pen)
        plot3_ovc_open_line = self.plot3.addLine(x=None, pen=red_pen)
        plot3_ovc_pivot_line = self.plot3.addLine(x=None, pen=fut_pvt_pen)
        plot3_ovc_low_line = self.plot3.addLine(x=None, pen=skyblue_pen)
        plot3_ovc_high_line = self.plot3.addLine(x=None, pen=pink_pen)
        
        for i in range(9):
            plot3_mv_line.append(self.plot3.addLine(x=None, pen=mvpen))

        plot3_fut_choga_rr_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_fut_nhoga_rr_curve = self.plot3.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot3_fut_drate_curve = self.plot3.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot3_dow_drate_curve = self.plot3.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot3_call_drate_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_put_drate_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3) 

        plot3_call_oi_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_put_oi_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot3_call_hoga_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_put_hoga_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot3_call_volume_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_put_volume_curve = self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot3_fut_volume_curve = self.plot3.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot3_fut_volume_plus_curve = self.plot3.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot3_fut_volume_minus_curve = self.plot3.plot(pen=aqua_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        
        for i in range(ActvalCount):
            plot3_call_curve.append(self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            plot3_put_curve.append(self.plot3.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))
        
        plot3_center_val_curve = self.plot3.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot3_center_val_lower_line = self.plot3.addLine(x=None, pen=skyblue_pen)
        plot3_center_val_line = self.plot3.addLine(x=None, pen=gold_pen)
        plot3_center_val_upper_line = self.plot3.addLine(x=None, pen=pink_pen)
        
        plot3_sp500_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_dow_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_nasdaq_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot3_wti_curve = self.plot3.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        plot3_bollinger_upper_curve = self.plot3.plot(pen=bb_upper_pen)
        plot3_bollinger_middle_curve = self.plot3.plot(pen=bb_middle_pen)
        plot3_bollinger_lower_curve = self.plot3.plot(pen=bb_lower_pen)

        plot3_mama_curve = self.plot3.plot(pen=mama_pen)
        plot3_fama_curve = self.plot3.plot(pen=fama_pen)

        plot3_oe_conv_curve = self.plot3.plot(pen=mama_pen)
        plot3_oe_base_curve = self.plot3.plot(pen=fama_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            plot3_vLine = pg.InfiniteLine(angle=90, movable=False)
            plot3_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot3.addItem(plot3_vLine, ignoreBounds=True)
            self.plot3.addItem(plot3_hLine, ignoreBounds=True)
            self.plot3.setMouseTracking(True)
            self.plot3.scene().sigMouseMoved.connect(self.plot3_mouseMoved)
            #self.plot3.scene().sigMouseClicked.connect(self.plot3_mouseClicked)
        else:
            pass

        # Line & Curve of the Plot4 
        plot4_time_line_jugan_start = self.plot4.addLine(x=0, y=None, pen=jugan_x_start_pen)
        plot4_time_line_yagan_start = self.plot4.addLine(x=0, y=None, pen=yagan_x_start_pen)
        plot4_time_line = self.plot4.addLine(x=0, y=None, pen=moving_x_pen)

        plot4_fut_hoga_line = self.plot4.addLine(x=None, pen=ypen1)
        
        plot4_fut_jl_line = self.plot4.addLine(x=None, pen=goldenrod_pen)
        plot4_fut_jh_line = self.plot4.addLine(x=None, pen=gold_pen)  
        plot4_fut_open_line = self.plot4.addLine(x=None, pen=red_pen)
        plot4_fut_close_line = self.plot4.addLine(x=None, pen=lime_pen)
        plot4_fut_pivot_line = self.plot4.addLine(x=None, pen=fut_pvt_pen)
        plot4_fut_low_line = self.plot4.addLine(x=None, pen=skyblue_pen)
        plot4_fut_high_line = self.plot4.addLine(x=None, pen=pink_pen)
        
        for i in range(10):
            plot4_kp200_line.append(self.plot4.addLine(x=None, pen=kp200_pen))
        
        plot4_ovc_jl_line = self.plot4.addLine(x=None, pen=goldenrod_pen)
        plot4_ovc_jh_line = self.plot4.addLine(x=None, pen=gold_pen)  
        plot4_ovc_close_line = self.plot4.addLine(x=None, pen=lime_pen)
        plot4_ovc_open_line = self.plot4.addLine(x=None, pen=red_pen)
        plot4_ovc_pivot_line = self.plot4.addLine(x=None, pen=fut_pvt_pen)
        plot4_ovc_low_line = self.plot4.addLine(x=None, pen=skyblue_pen)
        plot4_ovc_high_line = self.plot4.addLine(x=None, pen=pink_pen) 

        plot4_fut_choga_rr_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_fut_nhoga_rr_curve = self.plot4.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot4_fut_drate_curve = self.plot4.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot4_dow_drate_curve = self.plot4.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot4_call_drate_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_put_drate_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3) 

        plot4_call_oi_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_put_oi_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot4_fut_volume_curve = self.plot4.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3)
        plot4_fut_volume_plus_curve = self.plot4.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3)
        plot4_fut_volume_minus_curve = self.plot4.plot(pen=aqua_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3)

        plot4_call_volume_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_put_volume_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot4_call_hoga_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_put_hoga_curve = self.plot4.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot4_fut_price_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_kp200_curve = self.plot4.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot4_sp500_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_dow_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot4_nasdaq_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3) 
        plot4_wti_curve = self.plot4.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        plot4_bollinger_upper_curve = self.plot4.plot(pen=bb_upper_pen)
        plot4_bollinger_middle_curve = self.plot4.plot(pen=bb_middle_pen)
        plot4_bollinger_lower_curve = self.plot4.plot(pen=bb_lower_pen)

        plot4_mama_curve = self.plot4.plot(pen=mama_pen)
        plot4_fama_curve = self.plot4.plot(pen=fama_pen)

        plot4_oe_conv_curve = self.plot4.plot(pen=mama_pen)
        plot4_oe_base_curve = self.plot4.plot(pen=fama_pen)
        
        #cross hair
        if CROSS_HAIR_LINE:
            plot4_vLine = pg.InfiniteLine(angle=90, movable=False)
            plot4_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot4.addItem(plot4_vLine, ignoreBounds=True)
            self.plot4.addItem(plot4_hLine, ignoreBounds=True)
            self.plot4.setMouseTracking(True)
            self.plot4.scene().sigMouseMoved.connect(self.plot4_mouseMoved)
            #self.plot4.scene().sigMouseClicked.connect(self.plot4_mouseClicked)
        else:
            pass  

        # Line & Curve of the Plot5
        plot5_time_line_jugan_start = self.plot5.addLine(x=0, y=None, pen=jugan_x_start_pen)
        plot5_time_line_yagan_start = self.plot5.addLine(x=0, y=None, pen=yagan_x_start_pen)
        plot5_time_line = self.plot5.addLine(x=0, y=None, pen=moving_x_pen)

        plot5_fut_hoga_line = self.plot5.addLine(x=None, pen=ypen1)
        
        plot5_ovc_jl_line = self.plot5.addLine(x=None, pen=goldenrod_pen)
        plot5_ovc_jh_line = self.plot5.addLine(x=None, pen=gold_pen)  
        plot5_ovc_close_line = self.plot5.addLine(x=None, pen=lime_pen)
        plot5_ovc_open_line = self.plot5.addLine(x=None, pen=red_pen)
        plot5_ovc_pivot_line = self.plot5.addLine(x=None, pen=fut_pvt_pen)
        plot5_ovc_low_line = self.plot5.addLine(x=None, pen=skyblue_pen)
        plot5_ovc_high_line = self.plot5.addLine(x=None, pen=pink_pen)
        
        for i in range(9):
            plot5_mv_line.append(self.plot5.addLine(x=None, pen=mvpen))

        plot5_fut_choga_rr_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_fut_nhoga_rr_curve = self.plot5.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot5_fut_drate_curve = self.plot5.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot5_dow_drate_curve = self.plot5.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot5_call_drate_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_put_drate_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3) 

        plot5_call_oi_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_put_oi_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot5_call_hoga_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_put_hoga_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot5_call_volume_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_put_volume_curve = self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot5_fut_volume_curve = self.plot5.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot5_fut_volume_plus_curve = self.plot5.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot5_fut_volume_minus_curve = self.plot5.plot(pen=aqua_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        
        for i in range(ActvalCount):
            plot5_call_curve.append(self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            plot5_put_curve.append(self.plot5.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))
        
        plot5_center_val_curve = self.plot5.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3)

        plot5_center_val_lower_line = self.plot5.addLine(x=None, pen=skyblue_pen)
        plot5_center_val_line = self.plot5.addLine(x=None, pen=gold_pen)
        plot5_center_val_upper_line = self.plot5.addLine(x=None, pen=pink_pen)
        
        plot5_sp500_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_dow_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_nasdaq_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot5_wti_curve = self.plot5.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        plot5_bollinger_upper_curve = self.plot5.plot(pen=bb_upper_pen)
        plot5_bollinger_middle_curve = self.plot5.plot(pen=bb_middle_pen)
        plot5_bollinger_lower_curve = self.plot5.plot(pen=bb_lower_pen)

        plot5_mama_curve = self.plot5.plot(pen=mama_pen)
        plot5_fama_curve = self.plot5.plot(pen=fama_pen)

        plot5_oe_conv_curve = self.plot5.plot(pen=mama_pen)
        plot5_oe_base_curve = self.plot5.plot(pen=fama_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            plot5_vLine = pg.InfiniteLine(angle=90, movable=False)
            plot5_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot5.addItem(plot5_vLine, ignoreBounds=True)
            self.plot5.addItem(plot5_hLine, ignoreBounds=True)
            self.plot5.setMouseTracking(True)
            self.plot5.scene().sigMouseMoved.connect(self.plot5_mouseMoved)
            #self.plot5.scene().sigMouseClicked.connect(self.plot5_mouseClicked)
        else:
            pass 

        # Line & Curve of the Plot6
        plot6_time_line_jugan_start = self.plot6.addLine(x=0, y=None, pen=jugan_x_start_pen)
        plot6_time_line_yagan_start = self.plot6.addLine(x=0, y=None, pen=yagan_x_start_pen)
        plot6_time_line = self.plot6.addLine(x=0, y=None, pen=moving_x_pen)

        plot6_fut_hoga_line = self.plot6.addLine(x=None, pen=ypen1)
        
        plot6_ovc_jl_line = self.plot6.addLine(x=None, pen=goldenrod_pen)
        plot6_ovc_jh_line = self.plot6.addLine(x=None, pen=gold_pen)  
        plot6_ovc_close_line = self.plot6.addLine(x=None, pen=lime_pen)
        plot6_ovc_open_line = self.plot6.addLine(x=None, pen=red_pen)
        plot6_ovc_pivot_line = self.plot6.addLine(x=None, pen=fut_pvt_pen)
        plot6_ovc_low_line = self.plot6.addLine(x=None, pen=skyblue_pen)
        plot6_ovc_high_line = self.plot6.addLine(x=None, pen=pink_pen)
        
        for i in range(9):
            plot6_mv_line.append(self.plot6.addLine(x=None, pen=mvpen))

        plot6_fut_choga_rr_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_fut_nhoga_rr_curve = self.plot6.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot6_fut_drate_curve = self.plot6.plot(pen=ypen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3)
        plot6_dow_drate_curve = self.plot6.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot6_call_drate_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_put_drate_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot6_call_oi_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_put_oi_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3) 

        plot6_call_hoga_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_put_hoga_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot6_call_volume_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_put_volume_curve = self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='h', symbolSize=3)

        plot6_fut_volume_curve = self.plot6.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot6_fut_volume_plus_curve = self.plot6.plot(pen=magenta_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        plot6_fut_volume_minus_curve = self.plot6.plot(pen=aqua_pen1, symbolBrush='g', symbolPen='w', symbol='o', symbolSize=3) 
        
        for i in range(ActvalCount):
            plot6_call_curve.append(self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3))
            plot6_put_curve.append(self.plot6.plot(pen=bpen, symbolBrush=cyan, symbolPen='w', symbol='o', symbolSize=3))
        
        plot6_center_val_curve = self.plot6.plot(pen=gpen, symbolBrush='y', symbolPen='w', symbol='h', symbolSize=3) 

        plot6_center_val_lower_line = self.plot6.addLine(x=None, pen=skyblue_pen)
        plot6_center_val_line = self.plot6.addLine(x=None, pen=gold_pen)
        plot6_center_val_upper_line = self.plot6.addLine(x=None, pen=pink_pen)
        
        plot6_sp500_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_dow_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_nasdaq_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)
        plot6_wti_curve = self.plot6.plot(pen=rpen, symbolBrush=magenta, symbolPen='w', symbol='o', symbolSize=3)

        plot6_bollinger_upper_curve = self.plot6.plot(pen=bb_upper_pen)
        plot6_bollinger_middle_curve = self.plot6.plot(pen=bb_middle_pen)
        plot6_bollinger_lower_curve = self.plot6.plot(pen=bb_lower_pen)

        plot6_mama_curve = self.plot6.plot(pen=mama_pen)
        plot6_fama_curve = self.plot6.plot(pen=fama_pen)

        plot6_oe_conv_curve = self.plot6.plot(pen=mama_pen)
        plot6_oe_base_curve = self.plot6.plot(pen=fama_pen)

        #cross hair
        if CROSS_HAIR_LINE:
            plot6_vLine = pg.InfiniteLine(angle=90, movable=False)
            plot6_hLine = pg.InfiniteLine(angle=0, movable=False)
            self.plot6.addItem(plot6_vLine, ignoreBounds=True)
            self.plot6.addItem(plot6_hLine, ignoreBounds=True)
            self.plot6.setMouseTracking(True)
            self.plot6.scene().sigMouseMoved.connect(self.plot6_mouseMoved)
            #self.plot6.scene().sigMouseClicked.connect(self.plot6_mouseClicked)
        else:
            pass

        if NightTime:
            timespan = yagan_timespan
        else:
            timespan = jugan_timespan

        self.plot1.setRange(xRange=[0, timespan], padding=0)
        plot1_time_line.setValue(timespan - 1)

        self.plot2.setRange(xRange=[0, timespan], padding=0)
        plot2_time_line.setValue(timespan - 1)

        self.plot3.setRange(xRange=[0, timespan], padding=0)
        plot3_time_line.setValue(timespan - 1)

        self.plot4.setRange(xRange=[0, timespan], padding=0)
        plot4_time_line.setValue(timespan - 1)

        self.plot5.setRange(xRange=[0, timespan], padding=0)
        plot5_time_line.setValue(timespan - 1)

        self.plot6.setRange(xRange=[0, timespan], padding=0)
        plot6_time_line.setValue(timespan - 1)          

        if NightTime:
            # 야간옵션은 4시, 야간선물은 5시 장마감됨, 시작시간 X축 표시(index 0는 종가, index 1은 시가)
            plot1_time_line_jugan_start.setValue(GuardTime + 1)
            plot2_time_line_jugan_start.setValue(GuardTime + 1)
            plot3_time_line_jugan_start.setValue(GuardTime + 1)
            plot4_time_line_jugan_start.setValue(GuardTime + 1)
            plot5_time_line_jugan_start.setValue(GuardTime + 1)
            plot6_time_line_jugan_start.setValue(GuardTime + 1)

            plot1_time_line_yagan_start.setValue(GuardTime + 4 * 60 + 30)
            plot2_time_line_yagan_start.setValue(GuardTime + 4 * 60 + 30)
            plot3_time_line_yagan_start.setValue(GuardTime + 4 * 60 + 30)
            plot4_time_line_yagan_start.setValue(GuardTime + 4 * 60 + 30)
            plot5_time_line_yagan_start.setValue(GuardTime + 4 * 60 + 30)
            plot6_time_line_yagan_start.setValue(GuardTime + 4 * 60 + 30)
        else:
            # 시작시간 X축 표시(index 60은 시가)
            plot1_time_line_jugan_start.setValue(GuardTime)
            plot2_time_line_jugan_start.setValue(GuardTime)
            plot3_time_line_jugan_start.setValue(GuardTime)

            plot4_time_line_jugan_start.setValue(GuardTime)
            plot5_time_line_jugan_start.setValue(GuardTime)
            plot6_time_line_jugan_start.setValue(GuardTime)

        # 쓰레드 시작...        
        self.bigchart_update_worker.daemon = True
        self.bigchart_update_worker.start()

    #cross hair
    def plot1_mouseMoved(self, evt):

        global plot1_x, plot1_y

        pos = evt

        if self.plot1.sceneBoundingRect().contains(pos):

            mousePoint = self.plot1.plotItem.vb.mapSceneToView(pos)

            plot1_vLine.setPos(mousePoint.x())
            plot1_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()          

            str = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p1_1.setText(str) 

            if comboindex1 == 6:

                if df_futures_graph.at[plot_x, 'price'] == df_futures_graph.at[plot_x, 'price']:                    
                
                    Open = df_futures_graph.at[plot_x, 'open']                    
                    High = df_futures_graph.at[plot_x, 'high']
                    Low = df_futures_graph.at[plot_x, 'low']
                    Close = df_futures_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(str)
                else:
                    pass

            elif comboindex1 == 8:

                if df_sp500_graph.at[plot_x, 'price'] == df_sp500_graph.at[plot_x, 'price']:
                    
                    Open = df_sp500_graph.at[plot_x, 'open']                    
                    High = df_sp500_graph.at[plot_x, 'high']
                    Low = df_sp500_graph.at[plot_x, 'low']
                    Close = df_sp500_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(str)
                else:
                    pass

            elif comboindex1 == 9:

                if df_dow_graph.at[plot_x, 'price'] == df_dow_graph.at[plot_x, 'price']:
                    
                    Open = df_dow_graph.at[plot_x, 'open']                    
                    High = df_dow_graph.at[plot_x, 'high']
                    Low = df_dow_graph.at[plot_x, 'low']
                    Close = df_dow_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(str)
                else:
                    pass

            elif comboindex1 == 10:

                if df_nasdaq_graph.at[plot_x, 'price'] == df_nasdaq_graph.at[plot_x, 'price']:
                    
                    Open = df_nasdaq_graph.at[plot_x, 'open']                    
                    High = df_nasdaq_graph.at[plot_x, 'high']
                    Low = df_nasdaq_graph.at[plot_x, 'low']
                    Close = df_nasdaq_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(str)
                else:
                    pass

            elif comboindex1 == 11:

                if df_wti_graph.at[plot_x, 'price'] == df_wti_graph.at[plot_x, 'price']:
                    
                    Open = df_wti_graph.at[plot_x, 'open']                    
                    High = df_wti_graph.at[plot_x, 'high']
                    Low = df_wti_graph.at[plot_x, 'low']
                    Close = df_wti_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p1_1.setText(str)
                else:
                    pass
            else:
                pass           
        else:
            pass

    def plot2_mouseMoved(self, evt):

        global plot2_x, plot2_y

        pos = evt

        if self.plot2.sceneBoundingRect().contains(pos):

            mousePoint = self.plot2.plotItem.vb.mapSceneToView(pos)            

            plot2_vLine.setPos(mousePoint.x())
            plot2_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            str = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p2_1.setText(str)

            if comboindex2 == 8:

                if df_sp500_graph.at[plot_x, 'price'] == df_sp500_graph.at[plot_x, 'price']:
                    
                    Open = df_sp500_graph.at[plot_x, 'open']                    
                    High = df_sp500_graph.at[plot_x, 'high']
                    Low = df_sp500_graph.at[plot_x, 'low']
                    Close = df_sp500_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(str)
                else:
                    pass

            elif comboindex2 == 9:

                if df_dow_graph.at[plot_x, 'price'] == df_dow_graph.at[plot_x, 'price']:
                    
                    Open = df_dow_graph.at[plot_x, 'open']                    
                    High = df_dow_graph.at[plot_x, 'high']
                    Low = df_dow_graph.at[plot_x, 'low']
                    Close = df_dow_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(str)
                else:
                    pass

            elif comboindex2 == 10:

                if df_nasdaq_graph.at[plot_x, 'price'] == df_nasdaq_graph.at[plot_x, 'price']:
                    
                    Open = df_nasdaq_graph.at[plot_x, 'open']                    
                    High = df_nasdaq_graph.at[plot_x, 'high']
                    Low = df_nasdaq_graph.at[plot_x, 'low']
                    Close = df_nasdaq_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(str)
                else:
                    pass

            elif comboindex2 == 11:

                if df_wti_graph.at[plot_x, 'price'] == df_wti_graph.at[plot_x, 'price']:
                    
                    Open = df_wti_graph.at[plot_x, 'open']                    
                    High = df_wti_graph.at[plot_x, 'high']
                    Low = df_wti_graph.at[plot_x, 'low']
                    Close = df_wti_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p2_1.setText(str)
                else:
                    pass
            else:
                pass                
        else:
            pass

    def plot3_mouseMoved(self, evt):

        global plot3_x, plot3_y

        pos = evt

        if self.plot3.sceneBoundingRect().contains(pos):

            mousePoint = self.plot3.plotItem.vb.mapSceneToView(pos)            

            plot3_vLine.setPos(mousePoint.x())
            plot3_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            str = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p3_1.setText(str)

            if comboindex3 == 8:

                if df_sp500_graph.at[plot_x, 'price'] == df_sp500_graph.at[plot_x, 'price']:
                    
                    Open = df_sp500_graph.at[plot_x, 'open']                    
                    High = df_sp500_graph.at[plot_x, 'high']
                    Low = df_sp500_graph.at[plot_x, 'low']
                    Close = df_sp500_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(str)
                else:
                    pass

            elif comboindex3 == 9:

                if df_dow_graph.at[plot_x, 'price'] == df_dow_graph.at[plot_x, 'price']:
                    
                    Open = df_dow_graph.at[plot_x, 'open']                    
                    High = df_dow_graph.at[plot_x, 'high']
                    Low = df_dow_graph.at[plot_x, 'low']
                    Close = df_dow_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(str)
                else:
                    pass

            elif comboindex3 == 10:

                if df_nasdaq_graph.at[plot_x, 'price'] == df_nasdaq_graph.at[plot_x, 'price']:
                    
                    Open = df_nasdaq_graph.at[plot_x, 'open']                    
                    High = df_nasdaq_graph.at[plot_x, 'high']
                    Low = df_nasdaq_graph.at[plot_x, 'low']
                    Close = df_nasdaq_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(str)
                else:
                    pass

            elif comboindex3 == 11:

                if df_wti_graph.at[plot_x, 'price'] == df_wti_graph.at[plot_x, 'price']:
                    
                    Open = df_wti_graph.at[plot_x, 'open']                    
                    High = df_wti_graph.at[plot_x, 'high']
                    Low = df_wti_graph.at[plot_x, 'low']
                    Close = df_wti_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p3_1.setText(str)
                else:
                    pass
            else:
                pass                
        else:
            pass

    def plot4_mouseMoved(self, evt):
        
        global plot4_x, plot4_y

        pos = evt

        if self.plot4.sceneBoundingRect().contains(pos):

            mousePoint = self.plot4.plotItem.vb.mapSceneToView(pos)

            plot4_vLine.setPos(mousePoint.x())
            plot4_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()          

            str = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p4_1.setText(str) 

            if comboindex4 == 6:

                if df_futures_graph.at[plot_x, 'price'] == df_futures_graph.at[plot_x, 'price']:
                    
                    Open = df_futures_graph.at[plot_x, 'open']                    
                    High = df_futures_graph.at[plot_x, 'high']
                    Low = df_futures_graph.at[plot_x, 'low']
                    Close = df_futures_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(str)
                else:
                    pass

            elif comboindex4 == 8:

                if df_sp500_graph.at[plot_x, 'price'] == df_sp500_graph.at[plot_x, 'price']:
                    
                    Open = df_sp500_graph.at[plot_x, 'open']                    
                    High = df_sp500_graph.at[plot_x, 'high']
                    Low = df_sp500_graph.at[plot_x, 'low']
                    Close = df_sp500_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(str)
                else:
                    pass

            elif comboindex4 == 9:

                if df_dow_graph.at[plot_x, 'price'] == df_dow_graph.at[plot_x, 'price']:
                    
                    Open = df_dow_graph.at[plot_x, 'open']                    
                    High = df_dow_graph.at[plot_x, 'high']
                    Low = df_dow_graph.at[plot_x, 'low']
                    Close = df_dow_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(str)
                else:
                    pass

            elif comboindex4 == 10:

                if df_nasdaq_graph.at[plot_x, 'price'] == df_nasdaq_graph.at[plot_x, 'price']:
                    
                    Open = df_nasdaq_graph.at[plot_x, 'open']                    
                    High = df_nasdaq_graph.at[plot_x, 'high']
                    Low = df_nasdaq_graph.at[plot_x, 'low']
                    Close = df_nasdaq_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(str)
                else:
                    pass

            elif comboindex4 == 11:

                if df_wti_graph.at[plot_x, 'price'] == df_wti_graph.at[plot_x, 'price']:
                    
                    Open = df_wti_graph.at[plot_x, 'open']                    
                    High = df_wti_graph.at[plot_x, 'high']
                    Low = df_wti_graph.at[plot_x, 'low']
                    Close = df_wti_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p4_1.setText(str)
                else:
                    pass
            else:
                pass                    

    def plot5_mouseMoved(self, evt):

        global plot5_x, plot5_y

        pos = evt

        if self.plot5.sceneBoundingRect().contains(pos):

            mousePoint = self.plot5.plotItem.vb.mapSceneToView(pos)            

            plot5_vLine.setPos(mousePoint.x())
            plot5_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            str = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p5_1.setText(str)

            if comboindex5 == 8:

                if df_sp500_graph.at[plot_x, 'price'] == df_sp500_graph.at[plot_x, 'price']:
                    
                    Open = df_sp500_graph.at[plot_x, 'open']                    
                    High = df_sp500_graph.at[plot_x, 'high']
                    Low = df_sp500_graph.at[plot_x, 'low']
                    Close = df_sp500_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(str)
                else:
                    pass

            elif comboindex5 == 9:

                if df_dow_graph.at[plot_x, 'price'] == df_dow_graph.at[plot_x, 'price']:
                    
                    Open = df_dow_graph.at[plot_x, 'open']                    
                    High = df_dow_graph.at[plot_x, 'high']
                    Low = df_dow_graph.at[plot_x, 'low']
                    Close = df_dow_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(str)
                else:
                    pass

            elif comboindex5 == 10:

                if df_nasdaq_graph.at[plot_x, 'price'] == df_nasdaq_graph.at[plot_x, 'price']:
                    
                    Open = df_nasdaq_graph.at[plot_x, 'open']                    
                    High = df_nasdaq_graph.at[plot_x, 'high']
                    Low = df_nasdaq_graph.at[plot_x, 'low']
                    Close = df_nasdaq_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(str)
                else:
                    pass

            elif comboindex5 == 11:

                if df_wti_graph.at[plot_x, 'price'] == df_wti_graph.at[plot_x, 'price']:
                    
                    Open = df_wti_graph.at[plot_x, 'open']                    
                    High = df_wti_graph.at[plot_x, 'high']
                    Low = df_wti_graph.at[plot_x, 'low']
                    Close = df_wti_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p5_1.setText(str)
                else:
                    pass
            else:
                pass                       
        else:
            pass

    def plot6_mouseMoved(self, evt):

        global plot6_x, plot6_y

        pos = evt

        if self.plot6.sceneBoundingRect().contains(pos):

            mousePoint = self.plot6.plotItem.vb.mapSceneToView(pos)            

            plot6_vLine.setPos(mousePoint.x())
            plot6_hLine.setPos(mousePoint.y())
            plot_x = int(mousePoint.x())
            plot_y = mousePoint.y()

            str = " X: {0:d}\n Y: {1:.2f} ".format(plot_x, plot_y)            
            self.label_p6_1.setText(str)

            if comboindex6 == 8:

                if df_sp500_graph.at[plot_x, 'price'] == df_sp500_graph.at[plot_x, 'price']:
                    
                    Open = df_sp500_graph.at[plot_x, 'open']                    
                    High = df_sp500_graph.at[plot_x, 'high']
                    Low = df_sp500_graph.at[plot_x, 'low']
                    Close = df_sp500_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(str)
                else:
                    pass

            elif comboindex6 == 9:

                if df_dow_graph.at[plot_x, 'price'] == df_dow_graph.at[plot_x, 'price']:
                    
                    Open = df_dow_graph.at[plot_x, 'open']                    
                    High = df_dow_graph.at[plot_x, 'high']
                    Low = df_dow_graph.at[plot_x, 'low']
                    Close = df_dow_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.0f}\n H: {2:.0f}\n L: {3:.0f}\n C: {4:.0f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(str)
                else:
                    pass

            elif comboindex6 == 10:

                if df_nasdaq_graph.at[plot_x, 'price'] == df_nasdaq_graph.at[plot_x, 'price']:
                    
                    Open = df_nasdaq_graph.at[plot_x, 'open']                    
                    High = df_nasdaq_graph.at[plot_x, 'high']
                    Low = df_nasdaq_graph.at[plot_x, 'low']
                    Close = df_nasdaq_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(str)
                else:
                    pass

            elif comboindex6 == 11:

                if df_wti_graph.at[plot_x, 'price'] == df_wti_graph.at[plot_x, 'price']:
                    
                    Open = df_wti_graph.at[plot_x, 'open']                    
                    High = df_wti_graph.at[plot_x, 'high']
                    Low = df_wti_graph.at[plot_x, 'low']
                    Close = df_wti_graph.at[plot_x, 'close']

                    str = " X: {0:d}\n O: {1:.2f}\n H: {2:.2f}\n L: {3:.2f}\n C: {4:.2f} ".format(plot_x, Open, High, Low, Close)            
                    self.label_p6_1.setText(str)
                else:
                    pass
            else:
                pass                
        else:
            pass

    def plot1_mouseClicked(self, evt):
        
        self.label_p1_2.setStyleSheet('background-color: yellow ; color: red')
        self.label_p1_2.setFont(QFont("Consolas", 9, QFont.Bold))
        self.label_p1_2.setText("X = %d, Y = %0.2f" % (plot1_x, plot1_y))

    def plot2_mouseClicked(self, evt):
        
        self.label_p2_2.setStyleSheet('background-color: yellow ; color: red')
        self.label_p2_2.setFont(QFont("Consolas", 9, QFont.Bold))
        self.label_p2_2.setText("X = %d, Y = %0.2f" % (plot2_x, plot2_y))

    def plot3_mouseClicked(self, evt):

        self.label_p3_2.setStyleSheet('background-color: yellow ; color: red')
        self.label_p3_2.setFont(QFont("Consolas", 9, QFont.Bold))
        self.label_p3_2.setText("X = %d, Y = %0.2f" % (plot3_x, plot3_y))

    def plot4_mouseClicked(self, evt):
        pass

    def plot5_mouseClicked(self, evt):
        pass

    def plot6_mouseClicked(self, evt):
        pass

    def checkBox_plot1_bband_checkState(self):

        global flag_checkBox_plot1_bband

        if self.checkBox_plot1_bband.isChecked() == True:
            flag_checkBox_plot1_bband = True
        else:
            flag_checkBox_plot1_bband = False

    def checkBox_plot2_bband_checkState(self):

        global flag_checkBox_plot2_bband

        if self.checkBox_plot2_bband.isChecked() == True:
            flag_checkBox_plot2_bband = True
        else:
            flag_checkBox_plot2_bband = False 

    def checkBox_plot3_bband_checkState(self):

        global flag_checkBox_plot3_bband

        if self.checkBox_plot3_bband.isChecked() == True:
            flag_checkBox_plot3_bband = True
        else:
            flag_checkBox_plot3_bband = False

    def checkBox_plot4_bband_checkState(self):

        global flag_checkBox_plot4_bband

        if self.checkBox_plot4_bband.isChecked() == True:
            flag_checkBox_plot4_bband = True
        else:
            flag_checkBox_plot4_bband = False 

    def checkBox_plot5_bband_checkState(self):

        global flag_checkBox_plot5_bband

        if self.checkBox_plot5_bband.isChecked() == True:
            flag_checkBox_plot5_bband = True
        else:
            flag_checkBox_plot5_bband = False

    def checkBox_plot6_bband_checkState(self):

        global flag_checkBox_plot6_bband

        if self.checkBox_plot6_bband.isChecked() == True:
            flag_checkBox_plot6_bband = True
        else:
            flag_checkBox_plot6_bband = False

    def checkBox_plot1_mama_checkState(self):

        global flag_checkBox_plot1_mama

        if self.checkBox_plot1_mama.isChecked() == True:
            flag_checkBox_plot1_mama = True
        else:
            flag_checkBox_plot1_mama = False

    def checkBox_plot2_mama_checkState(self):

        global flag_checkBox_plot2_mama

        if self.checkBox_plot2_mama.isChecked() == True:
            flag_checkBox_plot2_mama = True
        else:
            flag_checkBox_plot2_mama = False

    def checkBox_plot3_mama_checkState(self):

        global flag_checkBox_plot3_mama

        if self.checkBox_plot3_mama.isChecked() == True:
            flag_checkBox_plot3_mama = True
        else:
            flag_checkBox_plot3_mama = False

    def checkBox_plot4_mama_checkState(self):

        global flag_checkBox_plot4_mama

        if self.checkBox_plot4_mama.isChecked() == True:
            flag_checkBox_plot4_mama = True
        else:
            flag_checkBox_plot4_mama = False

    def checkBox_plot5_mama_checkState(self):

        global flag_checkBox_plot5_mama

        if self.checkBox_plot5_mama.isChecked() == True:
            flag_checkBox_plot5_mama = True
        else:
            flag_checkBox_plot5_mama = False

    def checkBox_plot6_mama_checkState(self):

        global flag_checkBox_plot6_mama

        if self.checkBox_plot6_mama.isChecked() == True:
            flag_checkBox_plot6_mama = True
        else:
            flag_checkBox_plot6_mama = False

    def checkBox_plot1_oe_checkState(self):

        global flag_checkBox_plot1_oe

        if self.checkBox_plot1_oe.isChecked() == True:
            flag_checkBox_plot1_oe = True
        else:
            flag_checkBox_plot1_oe = False

    def checkBox_plot2_oe_checkState(self):

        global flag_checkBox_plot2_oe

        if self.checkBox_plot2_oe.isChecked() == True:
            flag_checkBox_plot2_oe = True
        else:
            flag_checkBox_plot2_oe = False

    def checkBox_plot3_oe_checkState(self):

        global flag_checkBox_plot3_oe

        if self.checkBox_plot3_oe.isChecked() == True:
            flag_checkBox_plot3_oe = True
        else:
            flag_checkBox_plot3_oe = False

    def checkBox_plot4_oe_checkState(self):

        global flag_checkBox_plot4_oe

        if self.checkBox_plot4_oe.isChecked() == True:
            flag_checkBox_plot4_oe = True
        else:
            flag_checkBox_plot4_oe = False

    def checkBox_plot5_oe_checkState(self):

        global flag_checkBox_plot5_oe

        if self.checkBox_plot5_oe.isChecked() == True:
            flag_checkBox_plot5_oe = True
        else:
            flag_checkBox_plot5_oe = False

    def checkBox_plot6_oe_checkState(self):

        global flag_checkBox_plot6_oe

        if self.checkBox_plot6_oe.isChecked() == True:
            flag_checkBox_plot6_oe = True
        else:
            flag_checkBox_plot6_oe = False

    
    def cb1_selectionChanged(self):

        global comboindex1
        
        global 선물_전저, 선물_전고, 선물_종가, 선물_피봇, 선물_시가, 선물_저가, 선물_고가
        global SP500_전저, SP500_전고, SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가
        global DOW_전저, DOW_전고, DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가
        global NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가
        global WTI_전저, WTI_전고, WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가

        txt = self.comboBox1.currentText()
        comboindex1 = self.comboBox1.currentIndex()

        plot1_bollinger_upper_curve.clear()
        plot1_bollinger_middle_curve.clear()
        plot1_bollinger_lower_curve.clear()

        plot1_mama_curve.clear()
        plot1_fama_curve.clear()

        plot1_oe_conv_curve.clear()
        plot1_oe_base_curve.clear()  

        # 선물체결
        if comboindex1 == 0:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")
            self.label_16.setText(" - ")
            self.label_17.setText(" 체결량 ")
            self.label_18.setText(" - ")
            
            self.label_p1_2.setText(" BB Middle\n PSAR ")
            self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_3.setText(" OneEye ")
            self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_4.setText(" MAMA ")
            self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()           
            
            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(0)
            
            plot1_fut_jl_line.setValue(0)
            plot1_fut_jh_line.setValue(0)
            plot1_fut_close_line.setValue(0)
            plot1_fut_pivot_line.setValue(0)
            plot1_fut_open_line.setValue(0)
            plot1_fut_low_line.setValue(0)
            plot1_fut_high_line.setValue(0)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(0)
            
            plot1_ovc_close_line.setValue(0)
            plot1_ovc_open_line.setValue(0)
            plot1_ovc_jl_line.setValue(0)
            plot1_ovc_jh_line.setValue(0)
            plot1_ovc_pivot_line.setValue(0)
            plot1_ovc_low_line.setValue(0)
            plot1_ovc_high_line.setValue(0)

        # 선물잔량비
        elif comboindex1 == 1:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")
            self.label_16.setText(" - ")
            self.label_17.setText(" 본월물: 0.00, 차월물: 0.00, 차차월물: 0.00 ")
            self.label_18.setText(" - ")
            
            self.label_p1_2.setText(" BB Middle\n PSAR ")
            self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_3.setText(" OneEye ")
            self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_4.setText(" MAMA ")
            self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()           
            
            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()
            
            plot1_fut_jl_line.setValue(0)
            plot1_fut_jh_line.setValue(0)
            plot1_fut_close_line.setValue(0)
            plot1_fut_pivot_line.setValue(0)
            plot1_fut_open_line.setValue(0)
            plot1_fut_low_line.setValue(0)
            plot1_fut_high_line.setValue(0)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(0)
            
            plot1_ovc_close_line.setValue(0)
            plot1_ovc_open_line.setValue(0)
            plot1_ovc_jl_line.setValue(0)
            plot1_ovc_jh_line.setValue(0)
            plot1_ovc_pivot_line.setValue(0)
            plot1_ovc_low_line.setValue(0)
            plot1_ovc_high_line.setValue(0)
            
            plot1_fut_hoga_line.setValue(1.0)

        # 옵션체결
        elif comboindex1 == 2:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")
            self.label_16.setText(" 풋체결량 ")
            self.label_17.setText(" - ")
            self.label_18.setText(" 콜체결량 ")
            
            self.label_p1_2.setText(" BB Middle\n PSAR ")
            self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_3.setText(" OneEye ")
            self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_4.setText(" MAMA ")
            self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear() 

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()  

            plot1_fut_hoga_line.setValue(0)   
            
            plot1_fut_jl_line.setValue(0)
            plot1_fut_jh_line.setValue(0)
            plot1_fut_close_line.setValue(0)
            plot1_fut_pivot_line.setValue(0)
            plot1_fut_open_line.setValue(0)
            plot1_fut_low_line.setValue(0)
            plot1_fut_high_line.setValue(0)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(0)
            
            plot1_ovc_close_line.setValue(0)
            plot1_ovc_open_line.setValue(0)
            plot1_ovc_jl_line.setValue(0)
            plot1_ovc_jh_line.setValue(0)
            plot1_ovc_pivot_line.setValue(0)
            plot1_ovc_low_line.setValue(0)
            plot1_ovc_high_line.setValue(0)

        # 옵션잔량비
        elif comboindex1 == 3:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")
            self.label_16.setText(" 풋잔량비 ")
            self.label_17.setText(" - ")
            self.label_18.setText(" 콜잔량비 ")
            
            self.label_p1_2.setText(" BB Middle\n PSAR ")
            self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_3.setText(" OneEye ")
            self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_4.setText(" MAMA ")
            self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(0)   
            
            plot1_fut_jl_line.setValue(0)
            plot1_fut_jh_line.setValue(0)
            plot1_fut_close_line.setValue(0)
            plot1_fut_pivot_line.setValue(0)
            plot1_fut_open_line.setValue(0)
            plot1_fut_low_line.setValue(0)
            plot1_fut_high_line.setValue(0)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(0)
            
            plot1_ovc_close_line.setValue(0)
            plot1_ovc_open_line.setValue(0)
            plot1_ovc_jl_line.setValue(0)
            plot1_ovc_jh_line.setValue(0)
            plot1_ovc_pivot_line.setValue(0)
            plot1_ovc_low_line.setValue(0)
            plot1_ovc_high_line.setValue(0) 
        
        # 등락율비
        elif comboindex1 == 4:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" 선물등락율 ")
            self.label_16.setText(" DOW등락율 ")
            self.label_17.setText(" 풋등락율 ")
            self.label_18.setText(" 콜등락율 ")
            
            self.label_p1_2.setText(" BB Middle\n PSAR ")
            self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_3.setText(" OneEye ")
            self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_4.setText(" MAMA ")
            self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')

            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear() 
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(0)
            
            plot1_fut_jl_line.setValue(0)
            plot1_fut_jh_line.setValue(0)
            plot1_fut_close_line.setValue(0)
            plot1_fut_pivot_line.setValue(0)
            plot1_fut_open_line.setValue(0)
            plot1_fut_low_line.setValue(0)
            plot1_fut_high_line.setValue(0)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(0)
            
            plot1_ovc_close_line.setValue(0)
            plot1_ovc_open_line.setValue(0)
            plot1_ovc_jl_line.setValue(0)
            plot1_ovc_jh_line.setValue(0)
            plot1_ovc_pivot_line.setValue(0)
            plot1_ovc_low_line.setValue(0)
            plot1_ovc_high_line.setValue(0)

        # 옵션미결
        elif comboindex1 == 5:

            self.label_11.setText(" - ")
            self.label_12.setText(" - ")
            self.label_13.setText(" - ")
            self.label_14.setText(" - ")
            self.label_15.setText(" - ")
            self.label_16.setText(" 풋미결 ")
            self.label_17.setText(" - ")
            self.label_18.setText(" 콜미결 ")
            
            self.label_p1_2.setText(" BB Middle\n PSAR ")
            self.label_p1_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_3.setText(" OneEye ")
            self.label_p1_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p1_4.setText(" MAMA ")
            self.label_p1_4.setStyleSheet('background-color: yellow ; color: black')

            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear() 
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(0)
            
            plot1_fut_jl_line.setValue(0)
            plot1_fut_jh_line.setValue(0)
            plot1_fut_close_line.setValue(0)
            plot1_fut_pivot_line.setValue(0)
            plot1_fut_open_line.setValue(0)
            plot1_fut_low_line.setValue(0)
            plot1_fut_high_line.setValue(0)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(0)
            
            plot1_ovc_close_line.setValue(0)
            plot1_ovc_open_line.setValue(0)
            plot1_ovc_jl_line.setValue(0)
            plot1_ovc_jh_line.setValue(0)
            plot1_ovc_pivot_line.setValue(0)
            plot1_ovc_low_line.setValue(0)
            plot1_ovc_high_line.setValue(0)         

        # 선물가격
        elif comboindex1 == 6:
                        
            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()
            
            plot1_kp200_line[0].setValue(KP200_COREVAL[3])
            plot1_kp200_line[1].setValue(KP200_COREVAL[3])
            plot1_kp200_line[2].setValue(KP200_COREVAL[3])
            plot1_kp200_line[3].setValue(KP200_COREVAL[3])
            plot1_kp200_line[4].setValue(KP200_COREVAL[4])
            plot1_kp200_line[5].setValue(KP200_COREVAL[5])
            plot1_kp200_line[6].setValue(KP200_COREVAL[6])
            plot1_kp200_line[7].setValue(KP200_COREVAL[6])
            plot1_kp200_line[8].setValue(KP200_COREVAL[6])
            plot1_kp200_line[9].setValue(KP200_COREVAL[6])
                        
            if 선물_전저 == 0:
                선물_전저 = CME_종가
            else:
                pass

            if 선물_전고 == 0:
                선물_전고 = CME_종가
            else:
                pass

            if 선물_종가 == 0:
                선물_종가 = CME_종가
            else:
                pass

            if 선물_피봇 == 0:
                선물_피봇 = CME_종가
            else:
                pass

            if 선물_시가 == 0:
                선물_시가 = CME_종가
            else:
                pass

            if 선물_저가 == 0:
                선물_저가 = CME_종가
            else:
                pass

            if 선물_고가 == 0:
                선물_고가 = CME_종가
            else:
                pass
            
            # 종가선 컬러를 살리기위한 임시방편            
            plot1_fut_hoga_line.setValue(선물_고가)

            plot1_ovc_open_line.setValue(선물_고가)
            plot1_ovc_jl_line.setValue(선물_고가)
            plot1_ovc_jh_line.setValue(선물_고가)
            plot1_ovc_pivot_line.setValue(선물_고가)
            plot1_ovc_low_line.setValue(선물_고가)
            plot1_ovc_high_line.setValue(선물_고가)
            plot1_ovc_close_line.setValue(선물_고가)

            str = ' {0} '.format(선물_전저)
            self.label_11.setText(str) 
            plot1_fut_jl_line.setValue(선물_전저)
            
            str = ' {0} '.format(선물_전고)
            self.label_12.setText(str)
            plot1_fut_jh_line.setValue(선물_전고) 
            
            str = ' {0} '.format(선물_피봇)
            self.label_14.setText(str)
            plot1_fut_pivot_line.setValue(선물_피봇)

            str = ' {0} '.format(선물_시가)
            self.label_15.setText(str)
            plot1_fut_open_line.setValue(선물_시가)

            str = ' {0} '.format(선물_저가)
            self.label_16.setText(str)
            plot1_fut_low_line.setValue(선물_저가)
            
            self.label_17.setText(" 000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(선물_고가)
            self.label_18.setText(str)
            plot1_fut_high_line.setValue(선물_고가)
            
            str = ' {0} '.format(선물_종가)
            self.label_13.setText(str)
            plot1_fut_close_line.setValue(선물_종가)

        # 분리선
        elif comboindex1 == 7:

            pass

        # SP500
        elif comboindex1 == 8:

            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()  
            
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(SP500_종가)
            
            for i in range(10):
                plot1_kp200_line[i].setValue(SP500_종가)
            
            plot1_fut_jl_line.setValue(SP500_종가)
            plot1_fut_jh_line.setValue(SP500_종가)
            plot1_fut_close_line.setValue(SP500_종가)
            plot1_fut_pivot_line.setValue(SP500_종가)
            plot1_fut_open_line.setValue(SP500_종가)
            plot1_fut_low_line.setValue(SP500_종가)
            plot1_fut_high_line.setValue(SP500_종가)
            
            if SP500_전저 == 0:
                SP500_전저 = SP500_종가
            else:
                pass

            if SP500_전고 == 0:
                SP500_전고 = SP500_종가
            else:
                pass

            if SP500_종가 == 0:
                pass
            else:
                pass

            if SP500_피봇 == 0:
                SP500_피봇 = SP500_종가
            else:
                pass

            if SP500_시가 == 0:
                SP500_시가 = SP500_종가
            else:
                pass

            if SP500_저가 == 0:
                SP500_저가 = SP500_종가
            else:
                pass

            if SP500_고가 == 0:
                SP500_고가 = SP500_종가
            else:
                pass
                
            str = ' {0} '.format(format(SP500_전저, ','))
            self.label_11.setText(str)
            plot1_ovc_jl_line.setValue(SP500_전저)

            str = ' {0} '.format(format(SP500_전고, ','))
            self.label_12.setText(str)
            plot1_ovc_jh_line.setValue(SP500_전고)
            
            str = ' {0} '.format(format(SP500_종가, ','))
            self.label_13.setText(str)
            plot1_ovc_close_line.setValue(SP500_종가)

            str = ' {0} '.format(format(SP500_피봇, ','))
            self.label_14.setText(str)
            plot1_ovc_pivot_line.setValue(SP500_피봇)
            
            str = ' {0} '.format(format(SP500_시가, ','))
            self.label_15.setText(str)
            plot1_ovc_open_line.setValue(SP500_시가)

            str = ' {0} '.format(format(SP500_저가, ','))
            self.label_16.setText(str)
            plot1_ovc_low_line.setValue(SP500_저가)

            self.label_17.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(SP500_고가, ','))
            self.label_18.setText(str)
            plot1_ovc_high_line.setValue(SP500_고가)

        # DOW   
        elif comboindex1 == 9:

            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_nasdaq_curve.clear()
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(DOW_종가) 
            
            for i in range(10):
                plot1_kp200_line[i].setValue(DOW_종가)
            
            plot1_fut_jl_line.setValue(DOW_종가)
            plot1_fut_jh_line.setValue(DOW_종가)
            plot1_fut_close_line.setValue(DOW_종가)
            plot1_fut_pivot_line.setValue(DOW_종가)
            plot1_fut_open_line.setValue(DOW_종가)
            plot1_fut_low_line.setValue(DOW_종가)
            plot1_fut_high_line.setValue(DOW_종가)
            
            if DOW_전저 == 0:
                DOW_전저 = DOW_종가
            else:
                pass

            if DOW_전고 == 0:
                DOW_전고 = DOW_종가
            else:
                pass

            if DOW_종가 == 0:
                pass
            else:
                pass

            if DOW_피봇 == 0:
                DOW_피봇 = DOW_종가
            else:
                pass

            if DOW_시가 == 0:
                DOW_시가 = DOW_종가
            else:
                pass

            if DOW_저가 == 0:
                DOW_저가 = DOW_종가
            else:
                pass

            if DOW_고가 == 0:
                DOW_고가 = DOW_종가
            else:
                pass
                
            str = ' {0} '.format(format(DOW_전저, ','))
            self.label_11.setText(str)
            plot1_ovc_jl_line.setValue(DOW_전저)

            str = ' {0} '.format(format(DOW_전고, ','))
            self.label_12.setText(str)
            plot1_ovc_jh_line.setValue(DOW_전고)
            
            str = ' {0} '.format(format(DOW_종가, ','))
            self.label_13.setText(str)
            plot1_ovc_close_line.setValue(DOW_종가)

            str = ' {0} '.format(format(DOW_피봇, ','))
            self.label_14.setText(str)
            plot1_ovc_pivot_line.setValue(DOW_피봇)
            
            str = ' {0} '.format(format(DOW_시가, ','))
            self.label_15.setText(str)
            plot1_ovc_open_line.setValue(DOW_시가)

            str = ' {0} '.format(format(DOW_저가, ','))
            self.label_16.setText(str)
            plot1_ovc_low_line.setValue(DOW_저가)

            self.label_17.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(DOW_고가, ','))
            self.label_18.setText(str)
            plot1_ovc_high_line.setValue(DOW_고가)

        # NASDAQ
        elif comboindex1 == 10:

            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear() 
            plot1_wti_curve.clear()

            plot1_fut_hoga_line.setValue(NASDAQ_종가) 
            
            for i in range(10):
                plot1_kp200_line[i].setValue(NASDAQ_종가)
            
            plot1_fut_jl_line.setValue(NASDAQ_종가)
            plot1_fut_jh_line.setValue(NASDAQ_종가)
            plot1_fut_close_line.setValue(NASDAQ_종가)
            plot1_fut_pivot_line.setValue(NASDAQ_종가)
            plot1_fut_open_line.setValue(NASDAQ_종가)
            plot1_fut_low_line.setValue(NASDAQ_종가)
            plot1_fut_high_line.setValue(NASDAQ_종가)
            
            if NASDAQ_전저 == 0:
                NASDAQ_전저 = NASDAQ_종가
            else:
                pass

            if NASDAQ_전고 == 0:
                NASDAQ_전고 = NASDAQ_종가
            else:
                pass

            if NASDAQ_종가 == 0:
                pass
            else:
                pass

            if NASDAQ_피봇 == 0:
                NASDAQ_피봇 = NASDAQ_종가
            else:
                pass

            if NASDAQ_시가 == 0:
                NASDAQ_시가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_저가 == 0:
                NASDAQ_저가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_고가 == 0:
                NASDAQ_고가 = NASDAQ_종가
            else:
                pass
                
            str = ' {0} '.format(format(NASDAQ_전저, ','))
            self.label_11.setText(str)
            plot1_ovc_jl_line.setValue(NASDAQ_전저)

            str = ' {0} '.format(format(NASDAQ_전고, ','))
            self.label_12.setText(str)
            plot1_ovc_jh_line.setValue(NASDAQ_전고)
            
            str = ' {0} '.format(format(NASDAQ_종가, ','))
            self.label_13.setText(str)
            plot1_ovc_close_line.setValue(NASDAQ_종가)

            str = ' {0} '.format(format(NASDAQ_피봇, ','))
            self.label_14.setText(str)
            plot1_ovc_pivot_line.setValue(NASDAQ_피봇)
            
            str = ' {0} '.format(format(NASDAQ_시가, ','))
            self.label_15.setText(str)
            plot1_ovc_open_line.setValue(NASDAQ_시가)

            str = ' {0} '.format(format(NASDAQ_저가, ','))
            self.label_16.setText(str)
            plot1_ovc_low_line.setValue(NASDAQ_저가)

            self.label_17.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(NASDAQ_고가, ','))
            self.label_18.setText(str)
            plot1_ovc_high_line.setValue(NASDAQ_고가)            

        # WTI   
        elif comboindex1 == 11:

            plot1_fut_volume_plus_curve.clear()
            plot1_fut_volume_minus_curve.clear()

            plot1_call_hoga_curve.clear()
            plot1_put_hoga_curve.clear()

            plot1_call_volume_curve.clear()
            plot1_put_volume_curve.clear()

            plot1_fut_choga_rr_curve.clear()
            plot1_fut_nhoga_rr_curve.clear()
            plot1_fut_drate_curve.clear()
            plot1_dow_drate_curve.clear()
            plot1_call_drate_curve.clear()
            plot1_put_drate_curve.clear()

            plot1_call_oi_curve.clear()
            plot1_put_oi_curve.clear()

            plot1_kp200_curve.clear()
            plot1_fut_price_curve.clear()
            
            plot1_sp500_curve.clear()
            plot1_dow_curve.clear()
            plot1_nasdaq_curve.clear()

            plot1_fut_hoga_line.setValue(WTI_종가) 
            
            for i in range(10):
                plot1_kp200_line[i].setValue(WTI_종가)
            
            plot1_fut_jl_line.setValue(WTI_종가)
            plot1_fut_jh_line.setValue(WTI_종가)
            plot1_fut_close_line.setValue(WTI_종가)
            plot1_fut_pivot_line.setValue(WTI_종가)
            plot1_fut_open_line.setValue(WTI_종가)
            plot1_fut_low_line.setValue(WTI_종가)
            plot1_fut_high_line.setValue(WTI_종가)
            
            if WTI_전저 == 0:
                WTI_전저 = WTI_종가
            else:
                pass

            if WTI_전고 == 0:
                WTI_전고 = WTI_종가
            else:
                pass

            if WTI_종가 == 0:
                pass
            else:
                pass

            if WTI_피봇 == 0:
                WTI_피봇 = WTI_종가
            else:
                pass

            if WTI_시가 == 0:
                WTI_시가 = WTI_종가
            else:
                pass

            if WTI_저가 == 0:
                WTI_저가 = WTI_종가
            else:
                pass

            if WTI_고가 == 0:
                WTI_고가 = WTI_종가
            else:
                pass
                
            str = ' {0} '.format(format(WTI_전저, ','))
            self.label_11.setText(str)
            plot1_ovc_jl_line.setValue(WTI_전저)

            str = ' {0} '.format(format(WTI_전고, ','))
            self.label_12.setText(str)
            plot1_ovc_jh_line.setValue(WTI_전고)
            
            str = ' {0} '.format(format(WTI_종가, ','))
            self.label_13.setText(str)
            plot1_ovc_close_line.setValue(WTI_종가)

            str = ' {0} '.format(format(WTI_피봇, ','))
            self.label_14.setText(str)
            plot1_ovc_pivot_line.setValue(WTI_피봇)
            
            str = ' {0} '.format(format(WTI_시가, ','))
            self.label_15.setText(str)
            plot1_ovc_open_line.setValue(WTI_시가)

            str = ' {0} '.format(format(WTI_저가, ','))
            self.label_16.setText(str)
            plot1_ovc_low_line.setValue(WTI_저가)

            self.label_17.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(WTI_고가, ','))
            self.label_18.setText(str)
            plot1_ovc_high_line.setValue(WTI_고가)
        else:
            pass

    def cb2_selectionChanged(self):

        global comboindex2
        
        global SP500_전저, SP500_전고, SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가
        global DOW_전저, DOW_전고, DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가
        global NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가
        global WTI_전저, WTI_전고, WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가

        txt = self.comboBox2.currentText()
        comboindex2 = self.comboBox2.currentIndex()

        plot2_bollinger_upper_curve.clear()
        plot2_bollinger_middle_curve.clear()
        plot2_bollinger_lower_curve.clear()

        plot2_mama_curve.clear()
        plot2_fama_curve.clear()

        plot2_oe_conv_curve.clear()
        plot2_oe_base_curve.clear()

        # 옵션체결
        if comboindex2 == 0:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")
            self.label_26.setText(" 풋체결량 ")
            self.label_27.setText(" - ")
            self.label_28.setText(" 콜체결량 ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
                        
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()
            
            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(0)

            for i in range(9):
                plot2_mv_line[i].setValue(0)
            
            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            plot2_center_val_lower_line.setValue(0)
            plot2_center_val_line.setValue(0)
            plot2_center_val_upper_line.setValue(0)

        # 옵션잔량비   
        elif comboindex2 == 1:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")
            self.label_26.setText(" 풋잔량비 ")
            self.label_27.setText(" - ")
            self.label_28.setText(" 콜잔량비 ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')
                        
            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()

            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()

            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(0)

            for i in range(9):
                plot2_mv_line[i].setValue(0)

            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            plot2_center_val_lower_line.setValue(0)
            plot2_center_val_line.setValue(0)
            plot2_center_val_upper_line.setValue(0)                      

        # 선물체결
        elif comboindex2 == 2:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")
            self.label_26.setText(" - ")
            self.label_27.setText(" 체결량 ")
            self.label_28.setText(" - ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                

            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear() 
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(0)

            for i in range(9):
                plot2_mv_line[i].setValue(0)

            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            plot2_center_val_lower_line.setValue(0)
            plot2_center_val_line.setValue(0)
            plot2_center_val_upper_line.setValue(0)

        # 선물잔량비
        elif comboindex2 == 3:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")
            self.label_26.setText(" - ")
            self.label_27.setText(" 본월물: 0.00, 차월물: 0.00, 차차월물: 0.00 ")
            self.label_28.setText(" - ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                

            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear() 
            plot2_wti_curve.clear()

            for i in range(9):
                plot2_mv_line[i].setValue(0)

            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            plot2_center_val_lower_line.setValue(0)
            plot2_center_val_line.setValue(0)
            plot2_center_val_upper_line.setValue(0)

            plot2_fut_hoga_line.setValue(1.0)

        # 등락율비
        elif comboindex2 == 4:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" 선물등락율 ")
            self.label_26.setText(" DOW등락율 ")
            self.label_27.setText(" 풋등락율 ")
            self.label_28.setText(" 콜등락율 ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                

            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(0)

            for i in range(9):
                plot2_mv_line[i].setValue(0)

            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            plot2_center_val_lower_line.setValue(0)
            plot2_center_val_line.setValue(0)
            plot2_center_val_upper_line.setValue(0)

        # 옵션미결
        elif comboindex2 == 5:

            self.label_21.setText(" - ")
            self.label_22.setText(" - ")
            self.label_23.setText(" - ")
            self.label_24.setText(" - ")
            self.label_25.setText(" - ")
            self.label_26.setText(" 풋미결 ")
            self.label_27.setText(" - ")
            self.label_28.setText(" 콜미결 ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                

            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(0)

            for i in range(9):
                plot2_mv_line[i].setValue(0)

            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            plot2_center_val_lower_line.setValue(0)
            plot2_center_val_line.setValue(0)
            plot2_center_val_upper_line.setValue(0) 

        # 옵션가격
        elif comboindex2 == 6:

            self.label_21.setText(" 등가: 행사가 ")
            self.label_22.setText(" 시작 중심가 ")
            self.label_23.setText(" 중심가 하단 ")
            self.label_24.setText(" 중심가 상단 ")
            self.label_25.setText(" - ")
            self.label_26.setText(" 풋현재가 ")
            self.label_27.setText(" 중심가 ")
            self.label_28.setText(" 콜현재가 ")
            
            self.label_p2_2.setText(" BB Middle\n PSAR ")
            self.label_p2_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_3.setText(" OneEye ")
            self.label_p2_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p2_4.setText(" MAMA ")
            self.label_p2_4.setStyleSheet('background-color: yellow ; color: black')

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(0)
            
            plot2_ovc_close_line.setValue(0)
            plot2_ovc_open_line.setValue(0)
            plot2_ovc_jl_line.setValue(0)
            plot2_ovc_jh_line.setValue(0)
            plot2_ovc_pivot_line.setValue(0)
            plot2_ovc_low_line.setValue(0)
            plot2_ovc_high_line.setValue(0)

            # 대맥점 표시
            plot2_mv_line[0].setValue(0)
            plot2_mv_line[1].setValue(2.5)
            plot2_mv_line[2].setValue(3.5)
            plot2_mv_line[3].setValue(4.85)
            plot2_mv_line[4].setValue(0)
            plot2_mv_line[5].setValue(0)
            plot2_mv_line[6].setValue(0)
            plot2_mv_line[7].setValue(0)
            plot2_mv_line[8].setValue(0)
            
            plot2_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
            plot2_center_val_line.setValue(CENTER_VAL)
            plot2_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

        # 분리선
        elif comboindex2 == 7:

            pass

        # SP500
        elif comboindex2 == 8:

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()                
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()

            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(SP500_종가)

            for i in range(9):
                plot2_mv_line[i].setValue(SP500_종가)
            
            if SP500_전저 == 0:
                SP500_전저 = SP500_종가
            else:
                pass

            if SP500_전고 == 0:
                SP500_전고 = SP500_종가
            else:
                pass

            if SP500_종가 == 0:
                pass
            else:
                pass

            if SP500_피봇 == 0:
                SP500_피봇 = SP500_종가
            else:
                pass

            if SP500_시가 == 0:
                SP500_시가 = SP500_종가
            else:
                pass

            if SP500_저가 == 0:
                SP500_저가 = SP500_종가
            else:
                pass

            if SP500_고가 == 0:
                SP500_고가 = SP500_종가
            else:
                pass
            
            plot2_center_val_lower_line.setValue(SP500_고가)
            plot2_center_val_line.setValue(SP500_고가)
            plot2_center_val_upper_line.setValue(SP500_고가)
                
            str = ' {0} '.format(format(SP500_전저, ','))
            self.label_21.setText(str)
            plot2_ovc_jl_line.setValue(SP500_전저)

            str = ' {0} '.format(format(SP500_전고, ','))
            self.label_22.setText(str)
            plot2_ovc_jh_line.setValue(SP500_전고)
            
            str = ' {0} '.format(format(SP500_종가, ','))
            self.label_23.setText(str)
            plot2_ovc_close_line.setValue(SP500_종가)

            str = ' {0} '.format(format(SP500_피봇, ','))
            self.label_24.setText(str)
            plot2_ovc_pivot_line.setValue(SP500_피봇)
            
            str = ' {0} '.format(format(SP500_시가, ','))
            self.label_25.setText(str)
            plot2_ovc_open_line.setValue(SP500_시가)

            str = ' {0} '.format(format(SP500_저가, ','))
            self.label_26.setText(str)
            plot2_ovc_low_line.setValue(SP500_저가)

            self.label_27.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(SP500_고가, ','))
            self.label_28.setText(str)
            plot2_ovc_high_line.setValue(SP500_고가)

        # DOW
        elif comboindex2 == 9:

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                

            plot2_sp500_curve.clear()
            plot2_nasdaq_curve.clear()
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(DOW_종가)

            for i in range(9):
                plot2_mv_line[i].setValue(DOW_종가)
            
            if DOW_전저 == 0:
                DOW_전저 = DOW_종가
            else:
                pass

            if DOW_전고 == 0:
                DOW_전고 = DOW_종가
            else:
                pass

            if DOW_종가 == 0:
                pass
            else:
                pass

            if DOW_피봇 == 0:
                DOW_피봇 = DOW_종가
            else:
                pass

            if DOW_시가 == 0:
                DOW_시가 = DOW_종가
            else:
                pass

            if DOW_저가 == 0:
                DOW_저가 = DOW_종가
            else:
                pass

            if DOW_고가 == 0:
                DOW_고가 = DOW_종가
            else:
                pass
            
            plot2_center_val_lower_line.setValue(DOW_고가)
            plot2_center_val_line.setValue(DOW_고가)
            plot2_center_val_upper_line.setValue(DOW_고가)
                
            str = ' {0} '.format(format(DOW_전저, ','))
            self.label_21.setText(str)
            plot2_ovc_jl_line.setValue(DOW_전저)

            str = ' {0} '.format(format(DOW_전고, ','))
            self.label_22.setText(str)
            plot2_ovc_jh_line.setValue(DOW_전고)
            
            str = ' {0} '.format(format(DOW_종가, ','))
            self.label_23.setText(str)
            plot2_ovc_close_line.setValue(DOW_종가)

            str = ' {0} '.format(format(DOW_피봇, ','))
            self.label_24.setText(str)
            plot2_ovc_pivot_line.setValue(DOW_피봇)
            
            str = ' {0} '.format(format(DOW_시가, ','))
            self.label_25.setText(str)
            plot2_ovc_open_line.setValue(DOW_시가)

            str = ' {0} '.format(format(DOW_저가, ','))
            self.label_26.setText(str)
            plot2_ovc_low_line.setValue(DOW_저가)

            self.label_27.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(DOW_고가, ','))
            self.label_28.setText(str)
            plot2_ovc_high_line.setValue(DOW_고가)

        # NASDAQ
        elif comboindex2 == 10:

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                
                
            plot2_sp500_curve.clear()
            plot2_dow_curve.clear() 
            plot2_wti_curve.clear()

            plot2_fut_hoga_line.setValue(NASDAQ_종가)
                        
            for i in range(9):
                plot2_mv_line[i].setValue(NASDAQ_종가)
            
            if NASDAQ_전저 == 0:
                NASDAQ_전저 = NASDAQ_종가
            else:
                pass

            if NASDAQ_전고 == 0:
                NASDAQ_전고 = NASDAQ_종가
            else:
                pass

            if NASDAQ_종가 == 0:
                pass
            else:
                pass

            if NASDAQ_피봇 == 0:
                NASDAQ_피봇 = NASDAQ_종가
            else:
                pass

            if NASDAQ_시가 == 0:
                NASDAQ_시가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_저가 == 0:
                NASDAQ_저가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_고가 == 0:
                NASDAQ_고가 = NASDAQ_종가
            else:
                pass
            
            plot2_center_val_lower_line.setValue(NASDAQ_고가)
            plot2_center_val_line.setValue(NASDAQ_고가)
            plot2_center_val_upper_line.setValue(NASDAQ_고가)
            
            str = ' {0} '.format(format(NASDAQ_전저, ','))
            self.label_21.setText(str)
            plot2_ovc_jl_line.setValue(NASDAQ_전저)

            str = ' {0} '.format(format(NASDAQ_전고, ','))
            self.label_22.setText(str)
            plot2_ovc_jh_line.setValue(NASDAQ_전고)
            
            str = ' {0} '.format(format(NASDAQ_종가, ','))
            self.label_23.setText(str)
            plot2_ovc_close_line.setValue(NASDAQ_종가)

            str = ' {0} '.format(format(NASDAQ_피봇, ','))
            self.label_24.setText(str)
            plot2_ovc_pivot_line.setValue(NASDAQ_피봇)
            
            str = ' {0} '.format(format(NASDAQ_시가, ','))
            self.label_25.setText(str)
            plot2_ovc_open_line.setValue(NASDAQ_시가)

            str = ' {0} '.format(format(NASDAQ_저가, ','))
            self.label_26.setText(str)
            plot2_ovc_low_line.setValue(NASDAQ_저가)

            self.label_27.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(NASDAQ_고가, ','))
            self.label_28.setText(str)
            plot2_ovc_high_line.setValue(NASDAQ_고가)            

        # WTI  
        elif comboindex2 == 11:

            plot2_call_hoga_curve.clear()
            plot2_put_hoga_curve.clear()   

            plot2_call_volume_curve.clear()
            plot2_put_volume_curve.clear()

            plot2_fut_volume_plus_curve.clear()
            plot2_fut_volume_minus_curve.clear()

            plot2_fut_choga_rr_curve.clear()
            plot2_fut_nhoga_rr_curve.clear()
            plot2_fut_drate_curve.clear()
            plot2_dow_drate_curve.clear()
            plot2_call_drate_curve.clear()
            plot2_put_drate_curve.clear()

            plot2_call_oi_curve.clear()
            plot2_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot2_call_curve[i].clear()
                plot2_put_curve[i].clear()

            plot2_center_val_curve.clear()                
                
            plot2_sp500_curve.clear()
            plot2_dow_curve.clear()
            plot2_nasdaq_curve.clear()

            plot2_fut_hoga_line.setValue(WTI_종가)

            for i in range(9):
                plot2_mv_line[i].setValue(WTI_종가)
            
            if WTI_전저 == 0:
                WTI_전저 = WTI_종가
            else:
                pass

            if WTI_전고 == 0:
                WTI_전고 = WTI_종가
            else:
                pass

            if WTI_종가 == 0:
                pass
            else:
                pass

            if WTI_피봇 == 0:
                WTI_피봇 = WTI_종가
            else:
                pass

            if WTI_시가 == 0:
                WTI_시가 = WTI_종가
            else:
                pass

            if WTI_저가 == 0:
                WTI_저가 = WTI_종가
            else:
                pass

            if WTI_고가 == 0:
                WTI_고가 = WTI_종가
            else:
                pass
            
            plot2_center_val_lower_line.setValue(WTI_고가)
            plot2_center_val_line.setValue(WTI_고가)
            plot2_center_val_upper_line.setValue(WTI_고가) 
                
            str = ' {0} '.format(format(WTI_전저, ','))
            self.label_21.setText(str)
            plot2_ovc_jl_line.setValue(WTI_전저)

            str = ' {0} '.format(format(WTI_전고, ','))
            self.label_22.setText(str)
            plot2_ovc_jh_line.setValue(WTI_전고)
            
            str = ' {0} '.format(format(WTI_종가, ','))
            self.label_23.setText(str)
            plot2_ovc_close_line.setValue(WTI_종가)

            str = ' {0} '.format(format(WTI_피봇, ','))
            self.label_24.setText(str)
            plot2_ovc_pivot_line.setValue(WTI_피봇)
            
            str = ' {0} '.format(format(WTI_시가, ','))
            self.label_25.setText(str)
            plot2_ovc_open_line.setValue(WTI_시가)

            str = ' {0} '.format(format(WTI_저가, ','))
            self.label_26.setText(str)
            plot2_ovc_low_line.setValue(WTI_저가)

            self.label_27.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(WTI_고가, ','))
            self.label_28.setText(str)
            plot2_ovc_high_line.setValue(WTI_고가)            
        else:
            pass
    
    def cb3_selectionChanged(self):

        global comboindex3
        
        global SP500_전저, SP500_전고, SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가
        global DOW_전저, DOW_전고, DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가
        global NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가
        global WTI_전저, WTI_전고, WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가

        txt = self.comboBox3.currentText()
        comboindex3 = self.comboBox3.currentIndex()

        plot3_bollinger_upper_curve.clear()
        plot3_bollinger_middle_curve.clear()
        plot3_bollinger_lower_curve.clear()

        plot3_mama_curve.clear()
        plot3_fama_curve.clear()

        plot3_oe_conv_curve.clear()
        plot3_oe_base_curve.clear()

        # 옵션체결
        if comboindex3 == 0:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")
            self.label_36.setText(" 풋체결량 ")
            self.label_37.setText(" - ")
            self.label_38.setText(" 콜체결량 ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
                        
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()
            
            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(0)

            for i in range(9):
                plot3_mv_line[i].setValue(0)
            
            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            plot3_center_val_lower_line.setValue(0)
            plot3_center_val_line.setValue(0)
            plot3_center_val_upper_line.setValue(0)

        # 옵션잔량비   
        elif comboindex3 == 1:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")
            self.label_36.setText(" 풋잔량비 ")
            self.label_37.setText(" - ")
            self.label_38.setText(" 콜잔량비 ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')
                        
            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()

            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()

            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(0)

            for i in range(9):
                plot3_mv_line[i].setValue(0)

            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            plot3_center_val_lower_line.setValue(0)
            plot3_center_val_line.setValue(0)
            plot3_center_val_upper_line.setValue(0)                      

        # 선물체결
        elif comboindex3 == 2:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")
            self.label_36.setText(" - ")
            self.label_37.setText(" 체결량 ")
            self.label_38.setText(" - ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                

            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear() 
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(0)

            for i in range(9):
                plot3_mv_line[i].setValue(0)

            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            plot3_center_val_lower_line.setValue(0)
            plot3_center_val_line.setValue(0)
            plot3_center_val_upper_line.setValue(0)

        # 선물잔량비
        elif comboindex3 == 3:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")
            self.label_36.setText(" - ")
            self.label_37.setText(" 본월물: 0.00, 차월물: 0.00, 차차월물: 0.00 ")
            self.label_38.setText(" - ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                

            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear() 
            plot3_wti_curve.clear()

            for i in range(9):
                plot3_mv_line[i].setValue(0)

            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            plot3_center_val_lower_line.setValue(0)
            plot3_center_val_line.setValue(0)
            plot3_center_val_upper_line.setValue(0)

            plot3_fut_hoga_line.setValue(1.0)

        # 등락율비
        elif comboindex3 == 4:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" 선물등락율 ")
            self.label_36.setText(" DOW등락율 ")
            self.label_37.setText(" 풋등락율 ")
            self.label_38.setText(" 콜등락율 ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                

            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(0)

            for i in range(9):
                plot3_mv_line[i].setValue(0)

            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            plot3_center_val_lower_line.setValue(0)
            plot3_center_val_line.setValue(0)
            plot3_center_val_upper_line.setValue(0)

        # 옵션미결
        elif comboindex3 == 5:

            self.label_31.setText(" - ")
            self.label_32.setText(" - ")
            self.label_33.setText(" - ")
            self.label_34.setText(" - ")
            self.label_35.setText(" - ")
            self.label_36.setText(" 풋미결 ")
            self.label_37.setText(" - ")
            self.label_38.setText(" 콜미결 ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                

            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(0)

            for i in range(9):
                plot3_mv_line[i].setValue(0)

            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            plot3_center_val_lower_line.setValue(0)
            plot3_center_val_line.setValue(0)
            plot3_center_val_upper_line.setValue(0) 

        # 옵션가격
        elif comboindex3 == 6:

            self.label_31.setText(" 등가: 행사가 ")
            self.label_32.setText(" 시작 중심가 ")
            self.label_33.setText(" 중심가 하단 ")
            self.label_34.setText(" 중심가 상단 ")
            self.label_35.setText(" - ")
            self.label_36.setText(" 풋현재가 ")
            self.label_37.setText(" 중심가 ")
            self.label_38.setText(" 콜현재가 ")
            
            self.label_p3_2.setText(" BB Middle\n PSAR ")
            self.label_p3_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_3.setText(" OneEye ")
            self.label_p3_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p3_4.setText(" MAMA ")
            self.label_p3_4.setStyleSheet('background-color: yellow ; color: black')

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(0)
            
            plot3_ovc_close_line.setValue(0)
            plot3_ovc_open_line.setValue(0)
            plot3_ovc_jl_line.setValue(0)
            plot3_ovc_jh_line.setValue(0)
            plot3_ovc_pivot_line.setValue(0)
            plot3_ovc_low_line.setValue(0)
            plot3_ovc_high_line.setValue(0)

            # 대맥점 표시
            plot3_mv_line[0].setValue(0)
            plot3_mv_line[1].setValue(2.5)
            plot3_mv_line[2].setValue(3.5)
            plot3_mv_line[3].setValue(4.85)
            plot3_mv_line[4].setValue(0)
            plot3_mv_line[5].setValue(0)
            plot3_mv_line[6].setValue(0)
            plot3_mv_line[7].setValue(0)
            plot3_mv_line[8].setValue(0)

            plot3_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
            plot3_center_val_line.setValue(CENTER_VAL)
            plot3_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

        # 분리선
        elif comboindex3 == 7:

            pass

        # SP500
        elif comboindex3 == 8:

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()                
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()

            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(SP500_종가)

            for i in range(9):
                plot3_mv_line[i].setValue(SP500_종가)
            
            if SP500_전저 == 0:
                SP500_전저 = SP500_종가
            else:
                pass

            if SP500_전고 == 0:
                SP500_전고 = SP500_종가
            else:
                pass

            if SP500_종가 == 0:
                pass
            else:
                pass

            if SP500_피봇 == 0:
                SP500_피봇 = SP500_종가
            else:
                pass

            if SP500_시가 == 0:
                SP500_시가 = SP500_종가
            else:
                pass

            if SP500_저가 == 0:
                SP500_저가 = SP500_종가
            else:
                pass

            if SP500_고가 == 0:
                SP500_고가 = SP500_종가
            else:
                pass
            
            plot3_center_val_lower_line.setValue(SP500_고가)
            plot3_center_val_line.setValue(SP500_고가)
            plot3_center_val_upper_line.setValue(SP500_고가)
                
            str = ' {0} '.format(format(SP500_전저, ','))
            self.label_31.setText(str)
            plot3_ovc_jl_line.setValue(SP500_전저)

            str = ' {0} '.format(format(SP500_전고, ','))
            self.label_32.setText(str)
            plot3_ovc_jh_line.setValue(SP500_전고)
            
            str = ' {0} '.format(format(SP500_종가, ','))
            self.label_33.setText(str)
            plot3_ovc_close_line.setValue(SP500_종가)

            str = ' {0} '.format(format(SP500_피봇, ','))
            self.label_34.setText(str)
            plot3_ovc_pivot_line.setValue(SP500_피봇)
            
            str = ' {0} '.format(format(SP500_시가, ','))
            self.label_35.setText(str)
            plot3_ovc_open_line.setValue(SP500_시가)

            str = ' {0} '.format(format(SP500_저가, ','))
            self.label_36.setText(str)
            plot3_ovc_low_line.setValue(SP500_저가)

            self.label_37.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(SP500_고가, ','))
            self.label_38.setText(str)
            plot3_ovc_high_line.setValue(SP500_고가)

        # DOW
        elif comboindex3 == 9:

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                

            plot3_sp500_curve.clear()
            plot3_nasdaq_curve.clear()
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(DOW_종가)

            for i in range(9):
                plot3_mv_line[i].setValue(DOW_종가)
            
            if DOW_전저 == 0:
                DOW_전저 = DOW_종가
            else:
                pass

            if DOW_전고 == 0:
                DOW_전고 = DOW_종가
            else:
                pass

            if DOW_종가 == 0:
                pass
            else:
                pass

            if DOW_피봇 == 0:
                DOW_피봇 = DOW_종가
            else:
                pass

            if DOW_시가 == 0:
                DOW_시가 = DOW_종가
            else:
                pass

            if DOW_저가 == 0:
                DOW_저가 = DOW_종가
            else:
                pass

            if DOW_고가 == 0:
                DOW_고가 = DOW_종가
            else:
                pass
            
            plot3_center_val_lower_line.setValue(DOW_고가)
            plot3_center_val_line.setValue(DOW_고가)
            plot3_center_val_upper_line.setValue(DOW_고가)
                
            str = ' {0} '.format(format(DOW_전저, ','))
            self.label_31.setText(str)
            plot3_ovc_jl_line.setValue(DOW_전저)

            str = ' {0} '.format(format(DOW_전고, ','))
            self.label_32.setText(str)
            plot3_ovc_jh_line.setValue(DOW_전고)
            
            str = ' {0} '.format(format(DOW_종가, ','))
            self.label_33.setText(str)
            plot3_ovc_close_line.setValue(DOW_종가)

            str = ' {0} '.format(format(DOW_피봇, ','))
            self.label_34.setText(str)
            plot3_ovc_pivot_line.setValue(DOW_피봇)
            
            str = ' {0} '.format(format(DOW_시가, ','))
            self.label_35.setText(str)
            plot3_ovc_open_line.setValue(DOW_시가)

            str = ' {0} '.format(format(DOW_저가, ','))
            self.label_36.setText(str)
            plot3_ovc_low_line.setValue(DOW_저가)

            self.label_37.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(DOW_고가, ','))
            self.label_38.setText(str)
            plot3_ovc_high_line.setValue(DOW_고가)

        # NASDAQ
        elif comboindex3 == 10:

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                
                
            plot3_sp500_curve.clear()
            plot3_dow_curve.clear() 
            plot3_wti_curve.clear()

            plot3_fut_hoga_line.setValue(NASDAQ_종가)

            for i in range(9):
                plot3_mv_line[i].setValue(NASDAQ_종가)
            
            if NASDAQ_전저 == 0:
                NASDAQ_전저 = NASDAQ_종가
            else:
                pass

            if NASDAQ_전고 == 0:
                NASDAQ_전고 = NASDAQ_종가
            else:
                pass

            if NASDAQ_종가 == 0:
                pass
            else:
                pass

            if NASDAQ_피봇 == 0:
                NASDAQ_피봇 = NASDAQ_종가
            else:
                pass

            if NASDAQ_시가 == 0:
                NASDAQ_시가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_저가 == 0:
                NASDAQ_저가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_고가 == 0:
                NASDAQ_고가 = NASDAQ_종가
            else:
                pass
            
            plot3_center_val_lower_line.setValue(NASDAQ_고가)
            plot3_center_val_line.setValue(NASDAQ_고가)
            plot3_center_val_upper_line.setValue(NASDAQ_고가)
                
            str = ' {0} '.format(format(NASDAQ_전저, ','))
            self.label_31.setText(str)
            plot3_ovc_jl_line.setValue(NASDAQ_전저)

            str = ' {0} '.format(format(NASDAQ_전고, ','))
            self.label_32.setText(str)
            plot3_ovc_jh_line.setValue(NASDAQ_전고)
            
            str = ' {0} '.format(format(NASDAQ_종가, ','))
            self.label_33.setText(str)
            plot3_ovc_close_line.setValue(NASDAQ_종가)

            str = ' {0} '.format(format(NASDAQ_피봇, ','))
            self.label_34.setText(str)
            plot3_ovc_pivot_line.setValue(NASDAQ_피봇)
            
            str = ' {0} '.format(format(NASDAQ_시가, ','))
            self.label_35.setText(str)
            plot3_ovc_open_line.setValue(NASDAQ_시가)

            str = ' {0} '.format(format(NASDAQ_저가, ','))
            self.label_36.setText(str)
            plot3_ovc_low_line.setValue(NASDAQ_저가)

            self.label_37.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(NASDAQ_고가, ','))
            self.label_38.setText(str)
            plot3_ovc_high_line.setValue(NASDAQ_고가)            

        # WTI
        elif comboindex3 == 11:

            plot3_call_hoga_curve.clear()
            plot3_put_hoga_curve.clear()   

            plot3_call_volume_curve.clear()
            plot3_put_volume_curve.clear()

            plot3_fut_volume_plus_curve.clear()
            plot3_fut_volume_minus_curve.clear()

            plot3_fut_choga_rr_curve.clear()
            plot3_fut_nhoga_rr_curve.clear()
            plot3_fut_drate_curve.clear()
            plot3_dow_drate_curve.clear()
            plot3_call_drate_curve.clear()
            plot3_put_drate_curve.clear()

            plot3_call_oi_curve.clear()
            plot3_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot3_call_curve[i].clear()
                plot3_put_curve[i].clear()

            plot3_center_val_curve.clear()                
                
            plot3_sp500_curve.clear()
            plot3_dow_curve.clear()
            plot3_nasdaq_curve.clear()

            plot3_fut_hoga_line.setValue(WTI_종가) 

            for i in range(9):
                plot3_mv_line[i].setValue(WTI_종가)
            
            if WTI_전저 == 0:
                WTI_전저 = WTI_종가
            else:
                pass

            if WTI_전고 == 0:
                WTI_전고 = WTI_종가
            else:
                pass

            if WTI_종가 == 0:
                pass
            else:
                pass

            if WTI_피봇 == 0:
                WTI_피봇 = WTI_종가
            else:
                pass

            if WTI_시가 == 0:
                WTI_시가 = WTI_종가
            else:
                pass

            if WTI_저가 == 0:
                WTI_저가 = WTI_종가
            else:
                pass

            if WTI_고가 == 0:
                WTI_고가 = WTI_종가
            else:
                pass
            
            plot3_center_val_lower_line.setValue(WTI_고가)
            plot3_center_val_line.setValue(WTI_고가)
            plot3_center_val_upper_line.setValue(WTI_고가) 
                
            str = ' {0} '.format(format(WTI_전저, ','))
            self.label_31.setText(str)
            plot3_ovc_jl_line.setValue(WTI_전저)

            str = ' {0} '.format(format(WTI_전고, ','))
            self.label_32.setText(str)
            plot3_ovc_jh_line.setValue(WTI_전고)
            
            str = ' {0} '.format(format(WTI_종가, ','))
            self.label_33.setText(str)
            plot3_ovc_close_line.setValue(WTI_종가)

            str = ' {0} '.format(format(WTI_피봇, ','))
            self.label_34.setText(str)
            plot3_ovc_pivot_line.setValue(WTI_피봇)
            
            str = ' {0} '.format(format(WTI_시가, ','))
            self.label_35.setText(str)
            plot3_ovc_open_line.setValue(WTI_시가)

            str = ' {0} '.format(format(WTI_저가, ','))
            self.label_36.setText(str)
            plot3_ovc_low_line.setValue(WTI_저가)

            self.label_37.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(WTI_고가, ','))
            self.label_38.setText(str)
            plot3_ovc_high_line.setValue(WTI_고가)            
        else:
            pass

    def cb4_selectionChanged(self):

        global comboindex4
        
        global 선물_전저, 선물_전고, 선물_종가, 선물_피봇, 선물_시가, 선물_저가, 선물_고가
        global SP500_전저, SP500_전고, SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가
        global DOW_전저, DOW_전고, DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가
        global NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가
        global WTI_전저, WTI_전고, WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가

        txt = self.comboBox4.currentText()
        comboindex4 = self.comboBox4.currentIndex()

        plot4_bollinger_upper_curve.clear()
        plot4_bollinger_middle_curve.clear()
        plot4_bollinger_lower_curve.clear()

        plot4_mama_curve.clear()
        plot4_fama_curve.clear() 

        plot4_oe_conv_curve.clear()
        plot4_oe_base_curve.clear()

        # 선물체결
        if comboindex4 == 0:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")
            self.label_46.setText(" - ")
            self.label_47.setText(" 체결량 ")
            self.label_48.setText(" - ")
            
            self.label_p4_2.setText(" BB Middle\n PSAR ")
            self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_3.setText(" OneEye ")
            self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_4.setText(" MAMA ")
            self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear() 

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()          
            
            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()

            plot4_fut_hoga_line.setValue(0) 
            
            plot4_fut_jl_line.setValue(0)
            plot4_fut_jh_line.setValue(0)
            plot4_fut_close_line.setValue(0)
            plot4_fut_pivot_line.setValue(0)
            plot4_fut_open_line.setValue(0)
            plot4_fut_low_line.setValue(0)
            plot4_fut_high_line.setValue(0)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(0)
            
            plot4_ovc_close_line.setValue(0)
            plot4_ovc_open_line.setValue(0)
            plot4_ovc_jl_line.setValue(0)
            plot4_ovc_jh_line.setValue(0)
            plot4_ovc_pivot_line.setValue(0)
            plot4_ovc_low_line.setValue(0)
            plot4_ovc_high_line.setValue(0)

        # 선물잔량비
        elif comboindex4 == 1:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")
            self.label_46.setText(" - ")
            self.label_47.setText(" 본월물: 0.00, 차월물: 0.00, 차차월물: 0.00 ")
            self.label_48.setText(" - ")
            
            self.label_p4_2.setText(" BB Middle\n PSAR ")
            self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_3.setText(" OneEye ")
            self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_4.setText(" MAMA ")
            self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()           
            
            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()
            
            plot4_fut_jl_line.setValue(0)
            plot4_fut_jh_line.setValue(0)
            plot4_fut_close_line.setValue(0)
            plot4_fut_pivot_line.setValue(0)
            plot4_fut_open_line.setValue(0)
            plot4_fut_low_line.setValue(0)
            plot4_fut_high_line.setValue(0)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(0)
            
            plot4_ovc_close_line.setValue(0)
            plot4_ovc_open_line.setValue(0)
            plot4_ovc_jl_line.setValue(0)
            plot4_ovc_jh_line.setValue(0)
            plot4_ovc_pivot_line.setValue(0)
            plot4_ovc_low_line.setValue(0)
            plot4_ovc_high_line.setValue(0)
            
            plot4_fut_hoga_line.setValue(1.0)

        # 옵션체결
        elif comboindex4 == 2:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")
            self.label_46.setText(" 풋체결량 ")
            self.label_47.setText(" - ")
            self.label_48.setText(" 콜체결량 ")
            
            self.label_p4_2.setText(" BB Middle\n PSAR ")
            self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_3.setText(" OneEye ")
            self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_4.setText(" MAMA ")
            self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear() 

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()
            
            plot4_fut_hoga_line.setValue(1.0)     
            
            plot4_fut_jl_line.setValue(0)
            plot4_fut_jh_line.setValue(0)
            plot4_fut_close_line.setValue(0)
            plot4_fut_pivot_line.setValue(0)
            plot4_fut_open_line.setValue(0)
            plot4_fut_low_line.setValue(0)
            plot4_fut_high_line.setValue(0)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(0)
            
            plot4_ovc_close_line.setValue(0)
            plot4_ovc_open_line.setValue(0)
            plot4_ovc_jl_line.setValue(0)
            plot4_ovc_jh_line.setValue(0)
            plot4_ovc_pivot_line.setValue(0)
            plot4_ovc_low_line.setValue(0)
            plot4_ovc_high_line.setValue(0)

        # 옵션잔량비
        elif comboindex4 == 3:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")
            self.label_46.setText(" 풋잔량비 ")
            self.label_47.setText(" - ")
            self.label_48.setText(" 콜잔량비 ")
            
            self.label_p4_2.setText(" BB Middle\n PSAR ")
            self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_3.setText(" OneEye ")
            self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_4.setText(" MAMA ")
            self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()
            
            plot4_fut_hoga_line.setValue(1.0)   
            
            plot4_fut_jl_line.setValue(0)
            plot4_fut_jh_line.setValue(0)
            plot4_fut_close_line.setValue(0)
            plot4_fut_pivot_line.setValue(0)
            plot4_fut_open_line.setValue(0)
            plot4_fut_low_line.setValue(0)
            plot4_fut_high_line.setValue(0)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(0)
            
            plot4_ovc_close_line.setValue(0)
            plot4_ovc_open_line.setValue(0)
            plot4_ovc_jl_line.setValue(0)
            plot4_ovc_jh_line.setValue(0)
            plot4_ovc_pivot_line.setValue(0)
            plot4_ovc_low_line.setValue(0)
            plot4_ovc_high_line.setValue(0) 
        
        # 등락율비
        elif comboindex4 == 4:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" 선물등락율 ")
            self.label_46.setText(" DOW등락율 ")
            self.label_47.setText(" 풋등락율 ")
            self.label_48.setText(" 콜등락율 ")
            
            self.label_p4_2.setText(" BB Middle\n PSAR ")
            self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_3.setText(" OneEye ")
            self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_4.setText(" MAMA ")
            self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')

            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear() 
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()
            
            plot4_fut_hoga_line.setValue(1.0)
            
            plot4_fut_jl_line.setValue(0)
            plot4_fut_jh_line.setValue(0)
            plot4_fut_close_line.setValue(0)
            plot4_fut_pivot_line.setValue(0)
            plot4_fut_open_line.setValue(0)
            plot4_fut_low_line.setValue(0)
            plot4_fut_high_line.setValue(0)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(0)
            
            plot4_ovc_close_line.setValue(0)
            plot4_ovc_open_line.setValue(0)
            plot4_ovc_jl_line.setValue(0)
            plot4_ovc_jh_line.setValue(0)
            plot4_ovc_pivot_line.setValue(0)
            plot4_ovc_low_line.setValue(0)
            plot4_ovc_high_line.setValue(0)

        # 옵션미결
        elif comboindex4 == 5:

            self.label_41.setText(" - ")
            self.label_42.setText(" - ")
            self.label_43.setText(" - ")
            self.label_44.setText(" - ")
            self.label_45.setText(" - ")
            self.label_46.setText(" 풋미결 ")
            self.label_47.setText(" - ")
            self.label_48.setText(" 콜미결 ")
            
            self.label_p4_2.setText(" BB Middle\n PSAR ")
            self.label_p4_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_3.setText(" OneEye ")
            self.label_p4_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p4_4.setText(" MAMA ")
            self.label_p4_4.setStyleSheet('background-color: yellow ; color: black')

            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear() 
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()
            
            plot4_fut_hoga_line.setValue(1.0)
            
            plot4_fut_jl_line.setValue(0)
            plot4_fut_jh_line.setValue(0)
            plot4_fut_close_line.setValue(0)
            plot4_fut_pivot_line.setValue(0)
            plot4_fut_open_line.setValue(0)
            plot4_fut_low_line.setValue(0)
            plot4_fut_high_line.setValue(0)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(0)
            
            plot4_ovc_close_line.setValue(0)
            plot4_ovc_open_line.setValue(0)
            plot4_ovc_jl_line.setValue(0)
            plot4_ovc_jh_line.setValue(0)
            plot4_ovc_pivot_line.setValue(0)
            plot4_ovc_low_line.setValue(0)
            plot4_ovc_high_line.setValue(0)          

        # 선물가격
        elif comboindex4 == 6:
                        
            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()
            
            plot4_kp200_line[0].setValue(KP200_COREVAL[3])
            plot4_kp200_line[1].setValue(KP200_COREVAL[3])
            plot4_kp200_line[2].setValue(KP200_COREVAL[3])
            plot4_kp200_line[3].setValue(KP200_COREVAL[3])
            plot4_kp200_line[4].setValue(KP200_COREVAL[4])
            plot4_kp200_line[5].setValue(KP200_COREVAL[5])
            plot4_kp200_line[6].setValue(KP200_COREVAL[6])
            plot4_kp200_line[7].setValue(KP200_COREVAL[6])
            plot4_kp200_line[8].setValue(KP200_COREVAL[6])
            plot4_kp200_line[9].setValue(KP200_COREVAL[6])
                        
            if 선물_전저 == 0:
                선물_전저 = CME_종가
            else:
                pass

            if 선물_전고 == 0:
                선물_전고 = CME_종가
            else:
                pass

            if 선물_종가 == 0:
                선물_종가 = CME_종가
            else:
                pass

            if 선물_피봇 == 0:
                선물_피봇 = CME_종가
            else:
                pass

            if 선물_시가 == 0:
                선물_시가 = CME_종가
            else:
                pass

            if 선물_저가 == 0:
                선물_저가 = CME_종가
            else:
                pass

            if 선물_고가 == 0:
                선물_고가 = CME_종가
            else:
                pass
            
            # 종가선 컬러를 살리기위한 임시방편            
            plot4_fut_hoga_line.setValue(선물_고가)

            plot4_ovc_open_line.setValue(선물_고가)
            plot4_ovc_jl_line.setValue(선물_고가)
            plot4_ovc_jh_line.setValue(선물_고가)
            plot4_ovc_pivot_line.setValue(선물_고가)
            plot4_ovc_low_line.setValue(선물_고가)
            plot4_ovc_high_line.setValue(선물_고가)
            plot4_ovc_close_line.setValue(선물_고가)

            str = ' {0} '.format(선물_전저)
            self.label_41.setText(str) 
            plot4_fut_jl_line.setValue(선물_전저)
            
            str = ' {0} '.format(선물_전고)
            self.label_42.setText(str)
            plot4_fut_jh_line.setValue(선물_전고) 
            
            str = ' {0} '.format(선물_피봇)
            self.label_44.setText(str)
            plot4_fut_pivot_line.setValue(선물_피봇)

            str = ' {0} '.format(선물_시가)
            self.label_45.setText(str)
            plot4_fut_open_line.setValue(선물_시가)

            str = ' {0} '.format(선물_저가)
            self.label_46.setText(str)
            plot4_fut_low_line.setValue(선물_저가)
            
            self.label_47.setText(" 000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(선물_고가)
            self.label_48.setText(str)
            plot4_fut_high_line.setValue(선물_고가)
            
            str = ' {0} '.format(선물_종가)
            self.label_43.setText(str)
            plot4_fut_close_line.setValue(선물_종가)

        # 분리선
        elif comboindex4 == 7:

            pass

        # SP500
        elif comboindex4 == 8:

            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()  
            
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()

            plot4_fut_hoga_line.setValue(SP500_종가)
            
            for i in range(10):
                plot4_kp200_line[i].setValue(SP500_종가)
            
            plot4_fut_jl_line.setValue(SP500_종가)
            plot4_fut_jh_line.setValue(SP500_종가)
            plot4_fut_close_line.setValue(SP500_종가)
            plot4_fut_pivot_line.setValue(SP500_종가)
            plot4_fut_open_line.setValue(SP500_종가)
            plot4_fut_low_line.setValue(SP500_종가)
            plot4_fut_high_line.setValue(SP500_종가)
            
            if SP500_전저 == 0:
                SP500_전저 = SP500_종가
            else:
                pass

            if SP500_전고 == 0:
                SP500_전고 = SP500_종가
            else:
                pass

            if SP500_종가 == 0:
                pass
            else:
                pass

            if SP500_피봇 == 0:
                SP500_피봇 = SP500_종가
            else:
                pass

            if SP500_시가 == 0:
                SP500_시가 = SP500_종가
            else:
                pass

            if SP500_저가 == 0:
                SP500_저가 = SP500_종가
            else:
                pass

            if SP500_고가 == 0:
                SP500_고가 = SP500_종가
            else:
                pass
                
            str = ' {0} '.format(format(SP500_전저, ','))
            self.label_41.setText(str)
            plot4_ovc_jl_line.setValue(SP500_전저)

            str = ' {0} '.format(format(SP500_전고, ','))
            self.label_42.setText(str)
            plot4_ovc_jh_line.setValue(SP500_전고)
            
            str = ' {0} '.format(format(SP500_종가, ','))
            self.label_43.setText(str)
            plot4_ovc_close_line.setValue(SP500_종가)

            str = ' {0} '.format(format(SP500_피봇, ','))
            self.label_44.setText(str)
            plot4_ovc_pivot_line.setValue(SP500_피봇)
            
            str = ' {0} '.format(format(SP500_시가, ','))
            self.label_45.setText(str)
            plot4_ovc_open_line.setValue(SP500_시가)

            str = ' {0} '.format(format(SP500_저가, ','))
            self.label_46.setText(str)
            plot4_ovc_low_line.setValue(SP500_저가)

            self.label_47.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(SP500_고가, ','))
            self.label_48.setText(str)
            plot4_ovc_high_line.setValue(SP500_고가)

        # DOW    
        elif comboindex4 == 9:

            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_nasdaq_curve.clear()
            plot4_wti_curve.clear()

            plot4_fut_hoga_line.setValue(DOW_종가)  
            
            for i in range(10):
                plot4_kp200_line[i].setValue(DOW_종가)
            
            plot4_fut_jl_line.setValue(DOW_종가)
            plot4_fut_jh_line.setValue(DOW_종가)
            plot4_fut_close_line.setValue(DOW_종가)
            plot4_fut_pivot_line.setValue(DOW_종가)
            plot4_fut_open_line.setValue(DOW_종가)
            plot4_fut_low_line.setValue(DOW_종가)
            plot4_fut_high_line.setValue(DOW_종가)
            
            if DOW_전저 == 0:
                DOW_전저 = DOW_종가
            else:
                pass

            if DOW_전고 == 0:
                DOW_전고 = DOW_종가
            else:
                pass

            if DOW_종가 == 0:
                pass
            else:
                pass

            if DOW_피봇 == 0:
                DOW_피봇 = DOW_종가
            else:
                pass

            if DOW_시가 == 0:
                DOW_시가 = DOW_종가
            else:
                pass

            if DOW_저가 == 0:
                DOW_저가 = DOW_종가
            else:
                pass

            if DOW_고가 == 0:
                DOW_고가 = DOW_종가
            else:
                pass
                
            str = ' {0} '.format(format(DOW_전저, ','))
            self.label_41.setText(str)
            plot4_ovc_jl_line.setValue(DOW_전저)

            str = ' {0} '.format(format(DOW_전고, ','))
            self.label_42.setText(str)
            plot4_ovc_jh_line.setValue(DOW_전고)
            
            str = ' {0} '.format(format(DOW_종가, ','))
            self.label_43.setText(str)
            plot4_ovc_close_line.setValue(DOW_종가)

            str = ' {0} '.format(format(DOW_피봇, ','))
            self.label_44.setText(str)
            plot4_ovc_pivot_line.setValue(DOW_피봇)
            
            str = ' {0} '.format(format(DOW_시가, ','))
            self.label_45.setText(str)
            plot4_ovc_open_line.setValue(DOW_시가)

            str = ' {0} '.format(format(DOW_저가, ','))
            self.label_46.setText(str)
            plot4_ovc_low_line.setValue(DOW_저가)

            self.label_47.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(DOW_고가, ','))
            self.label_48.setText(str)
            plot4_ovc_high_line.setValue(DOW_고가)

        # NASDAQ
        elif comboindex4 == 10:

            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear() 
            plot4_wti_curve.clear()

            plot4_fut_hoga_line.setValue(NASDAQ_종가) 
            
            for i in range(10):
                plot4_kp200_line[i].setValue(NASDAQ_종가)
            
            plot4_fut_jl_line.setValue(NASDAQ_종가)
            plot4_fut_jh_line.setValue(NASDAQ_종가)
            plot4_fut_close_line.setValue(NASDAQ_종가)
            plot4_fut_pivot_line.setValue(NASDAQ_종가)
            plot4_fut_open_line.setValue(NASDAQ_종가)
            plot4_fut_low_line.setValue(NASDAQ_종가)
            plot4_fut_high_line.setValue(NASDAQ_종가)
            
            if NASDAQ_전저 == 0:
                NASDAQ_전저 = NASDAQ_종가
            else:
                pass

            if NASDAQ_전고 == 0:
                NASDAQ_전고 = NASDAQ_종가
            else:
                pass

            if NASDAQ_종가 == 0:
                pass
            else:
                pass

            if NASDAQ_피봇 == 0:
                NASDAQ_피봇 = NASDAQ_종가
            else:
                pass

            if NASDAQ_시가 == 0:
                NASDAQ_시가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_저가 == 0:
                NASDAQ_저가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_고가 == 0:
                NASDAQ_고가 = NASDAQ_종가
            else:
                pass
                
            str = ' {0} '.format(format(NASDAQ_전저, ','))
            self.label_41.setText(str)
            plot4_ovc_jl_line.setValue(NASDAQ_전저)

            str = ' {0} '.format(format(NASDAQ_전고, ','))
            self.label_42.setText(str)
            plot4_ovc_jh_line.setValue(NASDAQ_전고)
            
            str = ' {0} '.format(format(NASDAQ_종가, ','))
            self.label_43.setText(str)
            plot4_ovc_close_line.setValue(NASDAQ_종가)

            str = ' {0} '.format(format(NASDAQ_피봇, ','))
            self.label_44.setText(str)
            plot4_ovc_pivot_line.setValue(NASDAQ_피봇)
            
            str = ' {0} '.format(format(NASDAQ_시가, ','))
            self.label_45.setText(str)
            plot4_ovc_open_line.setValue(NASDAQ_시가)

            str = ' {0} '.format(format(NASDAQ_저가, ','))
            self.label_46.setText(str)
            plot4_ovc_low_line.setValue(NASDAQ_저가)

            self.label_47.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(NASDAQ_고가, ','))
            self.label_48.setText(str)
            plot4_ovc_high_line.setValue(NASDAQ_고가)            

        # WTI    
        elif comboindex4 == 11:

            plot4_fut_volume_plus_curve.clear()
            plot4_fut_volume_minus_curve.clear()

            plot4_call_hoga_curve.clear()
            plot4_put_hoga_curve.clear()

            plot4_call_volume_curve.clear()
            plot4_put_volume_curve.clear()

            plot4_fut_choga_rr_curve.clear()
            plot4_fut_nhoga_rr_curve.clear()
            plot4_fut_drate_curve.clear()
            plot4_dow_drate_curve.clear()
            plot4_call_drate_curve.clear()
            plot4_put_drate_curve.clear()

            plot4_call_oi_curve.clear()
            plot4_put_oi_curve.clear()

            plot4_kp200_curve.clear()
            plot4_fut_price_curve.clear()
            
            plot4_sp500_curve.clear()
            plot4_dow_curve.clear()
            plot4_nasdaq_curve.clear()

            plot4_fut_hoga_line.setValue(WTI_종가)  
            
            for i in range(10):
                plot4_kp200_line[i].setValue(WTI_종가)
            
            plot4_fut_jl_line.setValue(WTI_종가)
            plot4_fut_jh_line.setValue(WTI_종가)
            plot4_fut_close_line.setValue(WTI_종가)
            plot4_fut_pivot_line.setValue(WTI_종가)
            plot4_fut_open_line.setValue(WTI_종가)
            plot4_fut_low_line.setValue(WTI_종가)
            plot4_fut_high_line.setValue(WTI_종가)
            
            if WTI_전저 == 0:
                WTI_전저 = WTI_종가
            else:
                pass

            if WTI_전고 == 0:
                WTI_전고 = WTI_종가
            else:
                pass

            if WTI_종가 == 0:
                pass
            else:
                pass

            if WTI_피봇 == 0:
                WTI_피봇 = WTI_종가
            else:
                pass

            if WTI_시가 == 0:
                WTI_시가 = WTI_종가
            else:
                pass

            if WTI_저가 == 0:
                WTI_저가 = WTI_종가
            else:
                pass

            if WTI_고가 == 0:
                WTI_고가 = WTI_종가
            else:
                pass
                
            str = ' {0} '.format(format(WTI_전저, ','))
            self.label_41.setText(str)
            plot4_ovc_jl_line.setValue(WTI_전저)

            str = ' {0} '.format(format(WTI_전고, ','))
            self.label_42.setText(str)
            plot4_ovc_jh_line.setValue(WTI_전고)
            
            str = ' {0} '.format(format(WTI_종가, ','))
            self.label_43.setText(str)
            plot4_ovc_close_line.setValue(WTI_종가)

            str = ' {0} '.format(format(WTI_피봇, ','))
            self.label_44.setText(str)
            plot4_ovc_pivot_line.setValue(WTI_피봇)
            
            str = ' {0} '.format(format(WTI_시가, ','))
            self.label_45.setText(str)
            plot4_ovc_open_line.setValue(WTI_시가)

            str = ' {0} '.format(format(WTI_저가, ','))
            self.label_46.setText(str)
            plot4_ovc_low_line.setValue(WTI_저가)

            self.label_47.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(WTI_고가, ','))
            self.label_48.setText(str)
            plot4_ovc_high_line.setValue(WTI_고가)
        else:
            pass

    def cb5_selectionChanged(self):

        global comboindex5
        
        global SP500_전저, SP500_전고, SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가
        global DOW_전저, DOW_전고, DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가
        global NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가
        global WTI_전저, WTI_전고, WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가

        txt = self.comboBox5.currentText()
        comboindex5 = self.comboBox5.currentIndex()

        plot5_bollinger_upper_curve.clear()
        plot5_bollinger_middle_curve.clear()
        plot5_bollinger_lower_curve.clear()

        plot5_mama_curve.clear()
        plot5_fama_curve.clear()

        plot5_oe_conv_curve.clear()
        plot5_oe_base_curve.clear()

        # 옵션체결
        if comboindex5 == 0:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")
            self.label_56.setText(" 풋체결량 ")
            self.label_57.setText(" - ")
            self.label_58.setText(" 콜체결량 ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
                        
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()
            
            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(0)

            for i in range(9):
                plot5_mv_line[i].setValue(0)
            
            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            plot5_center_val_lower_line.setValue(0)
            plot5_center_val_line.setValue(0)
            plot5_center_val_upper_line.setValue(0)

        # 옵션잔량비    
        elif comboindex5 == 1:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")
            self.label_56.setText(" 풋잔량비 ")
            self.label_57.setText(" - ")
            self.label_58.setText(" 콜잔량비 ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')
                        
            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()

            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()

            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(0)

            for i in range(9):
                plot5_mv_line[i].setValue(0)

            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            plot5_center_val_lower_line.setValue(0)
            plot5_center_val_line.setValue(0)
            plot5_center_val_upper_line.setValue(0)                      

        # 선물체결
        elif comboindex5 == 2:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")
            self.label_56.setText(" - ")
            self.label_57.setText(" 체결량 ")
            self.label_58.setText(" - ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                

            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear() 
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(0)

            for i in range(9):
                plot5_mv_line[i].setValue(0)

            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            plot5_center_val_lower_line.setValue(0)
            plot5_center_val_line.setValue(0)
            plot5_center_val_upper_line.setValue(0)

        # 선물잔량비
        elif comboindex5 == 3:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")
            self.label_56.setText(" - ")
            self.label_57.setText(" 본월물: 0.00, 차월물: 0.00, 차차월물: 0.00 ")
            self.label_58.setText(" - ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                

            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear() 
            plot5_wti_curve.clear()

            for i in range(9):
                plot5_mv_line[i].setValue(0)

            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            plot5_center_val_lower_line.setValue(0)
            plot5_center_val_line.setValue(0)
            plot5_center_val_upper_line.setValue(0)

            plot5_fut_hoga_line.setValue(1.0)

        # 등락율비
        elif comboindex5 == 4:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" 선물등락율 ")
            self.label_56.setText(" DOW등락율 ")
            self.label_57.setText(" 풋등락율 ")
            self.label_58.setText(" 콜등락율 ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                

            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(0)

            for i in range(9):
                plot5_mv_line[i].setValue(0)

            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            plot5_center_val_lower_line.setValue(0)
            plot5_center_val_line.setValue(0)
            plot5_center_val_upper_line.setValue(0)

        # 옵션미결
        elif comboindex5 == 5:

            self.label_51.setText(" - ")
            self.label_52.setText(" - ")
            self.label_53.setText(" - ")
            self.label_54.setText(" - ")
            self.label_55.setText(" - ")
            self.label_56.setText(" 풋미결 ")
            self.label_57.setText(" - ")
            self.label_58.setText(" 콜미결 ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                

            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(0)

            for i in range(9):
                plot5_mv_line[i].setValue(0)

            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            plot5_center_val_lower_line.setValue(0)
            plot5_center_val_line.setValue(0)
            plot5_center_val_upper_line.setValue(0) 

        # 옵션가격
        elif comboindex5 == 6:

            self.label_51.setText(" 등가: 행사가 ")
            self.label_52.setText(" 시작 중심가 ")
            self.label_53.setText(" 중심가 하단 ")
            self.label_54.setText(" 중심가 상단 ")
            self.label_55.setText(" - ")
            self.label_56.setText(" 풋현재가 ")
            self.label_57.setText(" 중심가 ")
            self.label_58.setText(" 콜현재가 ")
            
            self.label_p5_2.setText(" BB Middle\n PSAR ")
            self.label_p5_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_3.setText(" OneEye ")
            self.label_p5_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p5_4.setText(" MAMA ")
            self.label_p5_4.setStyleSheet('background-color: yellow ; color: black')

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(0)
            
            plot5_ovc_close_line.setValue(0)
            plot5_ovc_open_line.setValue(0)
            plot5_ovc_jl_line.setValue(0)
            plot5_ovc_jh_line.setValue(0)
            plot5_ovc_pivot_line.setValue(0)
            plot5_ovc_low_line.setValue(0)
            plot5_ovc_high_line.setValue(0)

            # 대맥점 표시
            plot5_mv_line[0].setValue(0)
            plot5_mv_line[1].setValue(2.5)
            plot5_mv_line[2].setValue(3.5)
            plot5_mv_line[3].setValue(4.85)
            plot5_mv_line[4].setValue(0)
            plot5_mv_line[5].setValue(0)
            plot5_mv_line[6].setValue(0)
            plot5_mv_line[7].setValue(0)
            plot5_mv_line[8].setValue(0)

            plot5_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
            plot5_center_val_line.setValue(CENTER_VAL)
            plot5_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

        # 분리선
        elif comboindex5 == 7:

            pass

        # SP500
        elif comboindex5 == 8:

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()                
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()

            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(SP500_종가)

            for i in range(9):
                plot5_mv_line[i].setValue(SP500_종가)
            
            if SP500_전저 == 0:
                SP500_전저 = SP500_종가
            else:
                pass

            if SP500_전고 == 0:
                SP500_전고 = SP500_종가
            else:
                pass

            if SP500_종가 == 0:
                pass
            else:
                pass

            if SP500_피봇 == 0:
                SP500_피봇 = SP500_종가
            else:
                pass

            if SP500_시가 == 0:
                SP500_시가 = SP500_종가
            else:
                pass

            if SP500_저가 == 0:
                SP500_저가 = SP500_종가
            else:
                pass

            if SP500_고가 == 0:
                SP500_고가 = SP500_종가
            else:
                pass
            
            plot5_center_val_lower_line.setValue(SP500_고가)
            plot5_center_val_line.setValue(SP500_고가)
            plot5_center_val_upper_line.setValue(SP500_고가)
                
            str = ' {0} '.format(format(SP500_전저, ','))
            self.label_51.setText(str)
            plot5_ovc_jl_line.setValue(SP500_전저)

            str = ' {0} '.format(format(SP500_전고, ','))
            self.label_52.setText(str)
            plot5_ovc_jh_line.setValue(SP500_전고)
            
            str = ' {0} '.format(format(SP500_종가, ','))
            self.label_53.setText(str)
            plot5_ovc_close_line.setValue(SP500_종가)

            str = ' {0} '.format(format(SP500_피봇, ','))
            self.label_54.setText(str)
            plot5_ovc_pivot_line.setValue(SP500_피봇)
            
            str = ' {0} '.format(format(SP500_시가, ','))
            self.label_55.setText(str)
            plot5_ovc_open_line.setValue(SP500_시가)

            str = ' {0} '.format(format(SP500_저가, ','))
            self.label_56.setText(str)
            plot5_ovc_low_line.setValue(SP500_저가)

            self.label_57.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(SP500_고가, ','))
            self.label_58.setText(str)
            plot5_ovc_high_line.setValue(SP500_고가)

        # DOW
        elif comboindex5 == 9:

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                

            plot5_sp500_curve.clear()
            plot5_nasdaq_curve.clear()
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(DOW_종가)

            for i in range(9):
                plot5_mv_line[i].setValue(DOW_종가)
            
            if DOW_전저 == 0:
                DOW_전저 = DOW_종가
            else:
                pass

            if DOW_전고 == 0:
                DOW_전고 = DOW_종가
            else:
                pass

            if DOW_종가 == 0:
                pass
            else:
                pass

            if DOW_피봇 == 0:
                DOW_피봇 = DOW_종가
            else:
                pass

            if DOW_시가 == 0:
                DOW_시가 = DOW_종가
            else:
                pass

            if DOW_저가 == 0:
                DOW_저가 = DOW_종가
            else:
                pass

            if DOW_고가 == 0:
                DOW_고가 = DOW_종가
            else:
                pass
            
            plot5_center_val_lower_line.setValue(DOW_고가)
            plot5_center_val_line.setValue(DOW_고가)
            plot5_center_val_upper_line.setValue(DOW_고가)
                
            str = ' {0} '.format(format(DOW_전저, ','))
            self.label_51.setText(str)
            plot5_ovc_jl_line.setValue(DOW_전저)

            str = ' {0} '.format(format(DOW_전고, ','))
            self.label_52.setText(str)
            plot5_ovc_jh_line.setValue(DOW_전고)
            
            str = ' {0} '.format(format(DOW_종가, ','))
            self.label_53.setText(str)
            plot5_ovc_close_line.setValue(DOW_종가)

            str = ' {0} '.format(format(DOW_피봇, ','))
            self.label_54.setText(str)
            plot5_ovc_pivot_line.setValue(DOW_피봇)
            
            str = ' {0} '.format(format(DOW_시가, ','))
            self.label_55.setText(str)
            plot5_ovc_open_line.setValue(DOW_시가)

            str = ' {0} '.format(format(DOW_저가, ','))
            self.label_56.setText(str)
            plot5_ovc_low_line.setValue(DOW_저가)

            self.label_57.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(DOW_고가, ','))
            self.label_58.setText(str)
            plot5_ovc_high_line.setValue(DOW_고가)

        # NASDAQ
        elif comboindex5 == 10:

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                
                
            plot5_sp500_curve.clear()
            plot5_dow_curve.clear() 
            plot5_wti_curve.clear()

            plot5_fut_hoga_line.setValue(NASDAQ_종가)

            for i in range(9):
                plot5_mv_line[i].setValue(NASDAQ_종가)
            
            if NASDAQ_전저 == 0:
                NASDAQ_전저 = NASDAQ_종가
            else:
                pass

            if NASDAQ_전고 == 0:
                NASDAQ_전고 = NASDAQ_종가
            else:
                pass

            if NASDAQ_종가 == 0:
                pass
            else:
                pass

            if NASDAQ_피봇 == 0:
                NASDAQ_피봇 = NASDAQ_종가
            else:
                pass

            if NASDAQ_시가 == 0:
                NASDAQ_시가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_저가 == 0:
                NASDAQ_저가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_고가 == 0:
                NASDAQ_고가 = NASDAQ_종가
            else:
                pass
            
            plot5_center_val_lower_line.setValue(NASDAQ_고가)
            plot5_center_val_line.setValue(NASDAQ_고가)
            plot5_center_val_upper_line.setValue(NASDAQ_고가)
                
            str = ' {0} '.format(format(NASDAQ_전저, ','))
            self.label_51.setText(str)
            plot5_ovc_jl_line.setValue(NASDAQ_전저)

            str = ' {0} '.format(format(NASDAQ_전고, ','))
            self.label_52.setText(str)
            plot5_ovc_jh_line.setValue(NASDAQ_전고)
            
            str = ' {0} '.format(format(NASDAQ_종가, ','))
            self.label_53.setText(str)
            plot5_ovc_close_line.setValue(NASDAQ_종가)

            str = ' {0} '.format(format(NASDAQ_피봇, ','))
            self.label_54.setText(str)
            plot5_ovc_pivot_line.setValue(NASDAQ_피봇)
            
            str = ' {0} '.format(format(NASDAQ_시가, ','))
            self.label_55.setText(str)
            plot5_ovc_open_line.setValue(NASDAQ_시가)

            str = ' {0} '.format(format(NASDAQ_저가, ','))
            self.label_56.setText(str)
            plot5_ovc_low_line.setValue(NASDAQ_저가)

            self.label_57.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(NASDAQ_고가, ','))
            self.label_58.setText(str)
            plot5_ovc_high_line.setValue(NASDAQ_고가)            

        # WTI
        elif comboindex5 == 11:

            plot5_call_hoga_curve.clear()
            plot5_put_hoga_curve.clear()   

            plot5_call_volume_curve.clear()
            plot5_put_volume_curve.clear()

            plot5_fut_volume_plus_curve.clear()
            plot5_fut_volume_minus_curve.clear()

            plot5_fut_choga_rr_curve.clear()
            plot5_fut_nhoga_rr_curve.clear()
            plot5_fut_drate_curve.clear()
            plot5_dow_drate_curve.clear()
            plot5_call_drate_curve.clear()
            plot5_put_drate_curve.clear()

            plot5_call_oi_curve.clear()
            plot5_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot5_call_curve[i].clear()
                plot5_put_curve[i].clear()

            plot5_center_val_curve.clear()                
                
            plot5_sp500_curve.clear()
            plot5_dow_curve.clear()
            plot5_nasdaq_curve.clear()

            plot5_fut_hoga_line.setValue(WTI_종가) 

            for i in range(9):
                plot5_mv_line[i].setValue(WTI_종가)
            
            if WTI_전저 == 0:
                WTI_전저 = WTI_종가
            else:
                pass

            if WTI_전고 == 0:
                WTI_전고 = WTI_종가
            else:
                pass

            if WTI_종가 == 0:
                pass
            else:
                pass

            if WTI_피봇 == 0:
                WTI_피봇 = WTI_종가
            else:
                pass

            if WTI_시가 == 0:
                WTI_시가 = WTI_종가
            else:
                pass

            if WTI_저가 == 0:
                WTI_저가 = WTI_종가
            else:
                pass

            if WTI_고가 == 0:
                WTI_고가 = WTI_종가
            else:
                pass
            
            plot5_center_val_lower_line.setValue(WTI_고가)
            plot5_center_val_line.setValue(WTI_고가)
            plot5_center_val_upper_line.setValue(WTI_고가) 
                
            str = ' {0} '.format(format(WTI_전저, ','))
            self.label_51.setText(str)
            plot5_ovc_jl_line.setValue(WTI_전저)

            str = ' {0} '.format(format(WTI_전고, ','))
            self.label_52.setText(str)
            plot5_ovc_jh_line.setValue(WTI_전고)
            
            str = ' {0} '.format(format(WTI_종가, ','))
            self.label_53.setText(str)
            plot5_ovc_close_line.setValue(WTI_종가)

            str = ' {0} '.format(format(WTI_피봇, ','))
            self.label_54.setText(str)
            plot5_ovc_pivot_line.setValue(WTI_피봇)
            
            str = ' {0} '.format(format(WTI_시가, ','))
            self.label_55.setText(str)
            plot5_ovc_open_line.setValue(WTI_시가)

            str = ' {0} '.format(format(WTI_저가, ','))
            self.label_56.setText(str)
            plot5_ovc_low_line.setValue(WTI_저가)

            self.label_57.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(WTI_고가, ','))
            self.label_58.setText(str)
            plot5_ovc_high_line.setValue(WTI_고가)            
        else:
            pass

    def cb6_selectionChanged(self):

        global comboindex6
        
        global SP500_전저, SP500_전고, SP500_종가, SP500_피봇, SP500_시가, SP500_저가, SP500_고가
        global DOW_전저, DOW_전고, DOW_종가, DOW_피봇, DOW_시가, DOW_저가, DOW_고가
        global NASDAQ_전저, NASDAQ_전고, NASDAQ_종가, NASDAQ_피봇, NASDAQ_시가, NASDAQ_저가, NASDAQ_고가
        global WTI_전저, WTI_전고, WTI_종가, WTI_피봇, WTI_시가, WTI_저가, WTI_고가

        txt = self.comboBox6.currentText()
        comboindex6 = self.comboBox6.currentIndex()

        plot6_bollinger_upper_curve.clear()
        plot6_bollinger_middle_curve.clear()
        plot6_bollinger_lower_curve.clear()

        plot6_mama_curve.clear()
        plot6_fama_curve.clear()

        plot6_oe_conv_curve.clear()
        plot6_oe_base_curve.clear()

        # 옵션체결
        if comboindex6 == 0:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")
            self.label_66.setText(" 풋체결량 ")
            self.label_67.setText(" - ")
            self.label_68.setText(" 콜체결량 ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')
            
            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
                        
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()
            
            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(0)

            for i in range(9):
                plot6_mv_line[i].setValue(0)
            
            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            plot6_center_val_lower_line.setValue(0)
            plot6_center_val_line.setValue(0)
            plot6_center_val_upper_line.setValue(0)

        # 옵션잔량비    
        elif comboindex6 == 1:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")
            self.label_66.setText(" 풋잔량비 ")
            self.label_67.setText(" - ")
            self.label_68.setText(" 콜잔량비 ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')
                        
            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()

            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()

            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(0)

            for i in range(9):
                plot6_mv_line[i].setValue(0)

            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            plot6_center_val_lower_line.setValue(0)
            plot6_center_val_line.setValue(0)
            plot6_center_val_upper_line.setValue(0)                      

        # 선물체결
        elif comboindex6 == 2:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")
            self.label_66.setText(" - ")
            self.label_67.setText(" 체결량 ")
            self.label_68.setText(" - ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                

            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear() 
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(0)

            for i in range(9):
                plot6_mv_line[i].setValue(0)

            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            plot6_center_val_lower_line.setValue(0)
            plot6_center_val_line.setValue(0)
            plot6_center_val_upper_line.setValue(0)

        # 선물잔량비
        elif comboindex6 == 3:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")
            self.label_66.setText(" - ")
            self.label_67.setText(" 본월물: 0.00, 차월물: 0.00, 차차월물: 0.00 ")
            self.label_68.setText(" - ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                

            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear() 
            plot6_wti_curve.clear()

            for i in range(9):
                plot6_mv_line[i].setValue(0)

            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            plot6_center_val_lower_line.setValue(0)
            plot6_center_val_line.setValue(0)
            plot6_center_val_upper_line.setValue(0)

            plot6_fut_hoga_line.setValue(1.0)

        # 등락율비
        elif comboindex6 == 4:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" 선물등락율 ")
            self.label_66.setText(" DOW등락율 ")
            self.label_67.setText(" 풋등락율 ")
            self.label_68.setText(" 콜등락율 ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                

            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(0)

            for i in range(9):
                plot6_mv_line[i].setValue(0)

            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            plot6_center_val_lower_line.setValue(0)
            plot6_center_val_line.setValue(0)
            plot6_center_val_upper_line.setValue(0)

        # 옵션미결
        elif comboindex6 == 5:

            self.label_61.setText(" - ")
            self.label_62.setText(" - ")
            self.label_63.setText(" - ")
            self.label_64.setText(" - ")
            self.label_65.setText(" - ")
            self.label_66.setText(" 풋미결 ")
            self.label_67.setText(" - ")
            self.label_68.setText(" 콜미결 ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                

            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(0)

            for i in range(9):
                plot6_mv_line[i].setValue(0)

            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            plot6_center_val_lower_line.setValue(0)
            plot6_center_val_line.setValue(0)
            plot6_center_val_upper_line.setValue(0) 

        # 옵션가격
        elif comboindex6 == 6:

            self.label_61.setText(" 등가: 행사가 ")
            self.label_62.setText(" 시작 중심가 ")
            self.label_63.setText(" 중심가 하단 ")
            self.label_64.setText(" 중심가 상단 ")
            self.label_65.setText(" - ")
            self.label_66.setText(" 풋현재가 ")
            self.label_67.setText(" 중심가 ")
            self.label_68.setText(" 콜현재가 ")
            
            self.label_p6_2.setText(" BB Middle\n PSAR ")
            self.label_p6_2.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_3.setText(" OneEye ")
            self.label_p6_3.setStyleSheet('background-color: yellow ; color: black')

            self.label_p6_4.setText(" MAMA ")
            self.label_p6_4.setStyleSheet('background-color: yellow ; color: black')

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(0)
            
            plot6_ovc_close_line.setValue(0)
            plot6_ovc_open_line.setValue(0)
            plot6_ovc_jl_line.setValue(0)
            plot6_ovc_jh_line.setValue(0)
            plot6_ovc_pivot_line.setValue(0)
            plot6_ovc_low_line.setValue(0)
            plot6_ovc_high_line.setValue(0)

            # 대맥점 표시
            plot6_mv_line[0].setValue(0)
            plot6_mv_line[1].setValue(2.5)
            plot6_mv_line[2].setValue(3.5)
            plot6_mv_line[3].setValue(4.85)
            plot6_mv_line[4].setValue(0)
            plot6_mv_line[5].setValue(0)
            plot6_mv_line[6].setValue(0)
            plot6_mv_line[7].setValue(0)
            plot6_mv_line[8].setValue(0)

            plot6_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
            plot6_center_val_line.setValue(CENTER_VAL)
            plot6_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

        # 분리선
        elif comboindex6 == 7:

            pass

        # SP500
        elif comboindex6 == 8:

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()                
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()

            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(SP500_종가)

            for i in range(9):
                plot6_mv_line[i].setValue(SP500_종가)
            
            if SP500_전저 == 0:
                SP500_전저 = SP500_종가
            else:
                pass

            if SP500_전고 == 0:
                SP500_전고 = SP500_종가
            else:
                pass

            if SP500_종가 == 0:
                pass
            else:
                pass

            if SP500_피봇 == 0:
                SP500_피봇 = SP500_종가
            else:
                pass

            if SP500_시가 == 0:
                SP500_시가 = SP500_종가
            else:
                pass

            if SP500_저가 == 0:
                SP500_저가 = SP500_종가
            else:
                pass

            if SP500_고가 == 0:
                SP500_고가 = SP500_종가
            else:
                pass
            
            plot6_center_val_lower_line.setValue(SP500_고가)
            plot6_center_val_line.setValue(SP500_고가)
            plot6_center_val_upper_line.setValue(SP500_고가)
                
            str = ' {0} '.format(format(SP500_전저, ','))
            self.label_61.setText(str)
            plot6_ovc_jl_line.setValue(SP500_전저)

            str = ' {0} '.format(format(SP500_전고, ','))
            self.label_62.setText(str)
            plot6_ovc_jh_line.setValue(SP500_전고)
            
            str = ' {0} '.format(format(SP500_종가, ','))
            self.label_63.setText(str)
            plot6_ovc_close_line.setValue(SP500_종가)

            str = ' {0} '.format(format(SP500_피봇, ','))
            self.label_64.setText(str)
            plot6_ovc_pivot_line.setValue(SP500_피봇)
            
            str = ' {0} '.format(format(SP500_시가, ','))
            self.label_65.setText(str)
            plot6_ovc_open_line.setValue(SP500_시가)

            str = ' {0} '.format(format(SP500_저가, ','))
            self.label_66.setText(str)
            plot6_ovc_low_line.setValue(SP500_저가)

            self.label_67.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(SP500_고가, ','))
            self.label_68.setText(str)
            plot6_ovc_high_line.setValue(SP500_고가)

        # DOW
        elif comboindex6 == 9:

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                

            plot6_sp500_curve.clear()
            plot6_nasdaq_curve.clear()
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(DOW_종가)

            for i in range(9):
                plot6_mv_line[i].setValue(DOW_종가)
            
            if DOW_전저 == 0:
                DOW_전저 = DOW_종가
            else:
                pass

            if DOW_전고 == 0:
                DOW_전고 = DOW_종가
            else:
                pass

            if DOW_종가 == 0:
                pass
            else:
                pass

            if DOW_피봇 == 0:
                DOW_피봇 = DOW_종가
            else:
                pass

            if DOW_시가 == 0:
                DOW_시가 = DOW_종가
            else:
                pass

            if DOW_저가 == 0:
                DOW_저가 = DOW_종가
            else:
                pass

            if DOW_고가 == 0:
                DOW_고가 = DOW_종가
            else:
                pass
            
            plot6_center_val_lower_line.setValue(DOW_고가)
            plot6_center_val_line.setValue(DOW_고가)
            plot6_center_val_upper_line.setValue(DOW_고가)
                
            str = ' {0} '.format(format(DOW_전저, ','))
            self.label_61.setText(str)
            plot6_ovc_jl_line.setValue(DOW_전저)

            str = ' {0} '.format(format(DOW_전고, ','))
            self.label_62.setText(str)
            plot6_ovc_jh_line.setValue(DOW_전고)
            
            str = ' {0} '.format(format(DOW_종가, ','))
            self.label_63.setText(str)
            plot6_ovc_close_line.setValue(DOW_종가)

            str = ' {0} '.format(format(DOW_피봇, ','))
            self.label_64.setText(str)
            plot6_ovc_pivot_line.setValue(DOW_피봇)
            
            str = ' {0} '.format(format(DOW_시가, ','))
            self.label_65.setText(str)
            plot6_ovc_open_line.setValue(DOW_시가)

            str = ' {0} '.format(format(DOW_저가, ','))
            self.label_66.setText(str)
            plot6_ovc_low_line.setValue(DOW_저가)

            self.label_67.setText(" 00,000 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(DOW_고가, ','))
            self.label_68.setText(str)
            plot6_ovc_high_line.setValue(DOW_고가)

        # NASDAQ
        elif comboindex6 == 10:

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                
                
            plot6_sp500_curve.clear()
            plot6_dow_curve.clear() 
            plot6_wti_curve.clear()

            plot6_fut_hoga_line.setValue(NASDAQ_종가)

            for i in range(9):
                plot6_mv_line[i].setValue(NASDAQ_종가)
            
            if NASDAQ_전저 == 0:
                NASDAQ_전저 = NASDAQ_종가
            else:
                pass

            if NASDAQ_전고 == 0:
                NASDAQ_전고 = NASDAQ_종가
            else:
                pass

            if NASDAQ_종가 == 0:
                pass
            else:
                pass

            if NASDAQ_피봇 == 0:
                NASDAQ_피봇 = NASDAQ_종가
            else:
                pass

            if NASDAQ_시가 == 0:
                NASDAQ_시가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_저가 == 0:
                NASDAQ_저가 = NASDAQ_종가
            else:
                pass

            if NASDAQ_고가 == 0:
                NASDAQ_고가 = NASDAQ_종가
            else:
                pass
            
            plot6_center_val_lower_line.setValue(NASDAQ_고가)
            plot6_center_val_line.setValue(NASDAQ_고가)
            plot6_center_val_upper_line.setValue(NASDAQ_고가)
                
            str = ' {0} '.format(format(NASDAQ_전저, ','))
            self.label_61.setText(str)
            plot6_ovc_jl_line.setValue(NASDAQ_전저)

            str = ' {0} '.format(format(NASDAQ_전고, ','))
            self.label_62.setText(str)
            plot6_ovc_jh_line.setValue(NASDAQ_전고)
            
            str = ' {0} '.format(format(NASDAQ_종가, ','))
            self.label_63.setText(str)
            plot6_ovc_close_line.setValue(NASDAQ_종가)

            str = ' {0} '.format(format(NASDAQ_피봇, ','))
            self.label_64.setText(str)
            plot6_ovc_pivot_line.setValue(NASDAQ_피봇)
            
            str = ' {0} '.format(format(NASDAQ_시가, ','))
            self.label_65.setText(str)
            plot6_ovc_open_line.setValue(NASDAQ_시가)

            str = ' {0} '.format(format(NASDAQ_저가, ','))
            self.label_66.setText(str)
            plot6_ovc_low_line.setValue(NASDAQ_저가)

            self.label_67.setText(" 0,000.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(NASDAQ_고가, ','))
            self.label_68.setText(str)
            plot6_ovc_high_line.setValue(NASDAQ_고가)            

        # WTI
        elif comboindex6 == 11:

            plot6_call_hoga_curve.clear()
            plot6_put_hoga_curve.clear()   

            plot6_call_volume_curve.clear()
            plot6_put_volume_curve.clear()

            plot6_fut_volume_plus_curve.clear()
            plot6_fut_volume_minus_curve.clear()

            plot6_fut_choga_rr_curve.clear()
            plot6_fut_nhoga_rr_curve.clear()
            plot6_fut_drate_curve.clear()
            plot6_dow_drate_curve.clear()
            plot6_call_drate_curve.clear()
            plot6_put_drate_curve.clear()

            plot6_call_oi_curve.clear()
            plot6_put_oi_curve.clear()
            
            for i in range(ActvalCount):
                plot6_call_curve[i].clear()
                plot6_put_curve[i].clear()

            plot6_center_val_curve.clear()                
                
            plot6_sp500_curve.clear()
            plot6_dow_curve.clear()
            plot6_nasdaq_curve.clear()

            plot6_fut_hoga_line.setValue(WTI_종가) 

            for i in range(9):
                plot6_mv_line[i].setValue(WTI_종가)
            
            if WTI_전저 == 0:
                WTI_전저 = WTI_종가
            else:
                pass

            if WTI_전고 == 0:
                WTI_전고 = WTI_종가
            else:
                pass

            if WTI_종가 == 0:
                pass
            else:
                pass

            if WTI_피봇 == 0:
                WTI_피봇 = WTI_종가
            else:
                pass

            if WTI_시가 == 0:
                WTI_시가 = WTI_종가
            else:
                pass

            if WTI_저가 == 0:
                WTI_저가 = WTI_종가
            else:
                pass

            if WTI_고가 == 0:
                WTI_고가 = WTI_종가
            else:
                pass
            
            plot6_center_val_lower_line.setValue(WTI_고가)
            plot6_center_val_line.setValue(WTI_고가)
            plot6_center_val_upper_line.setValue(WTI_고가) 
                
            str = ' {0} '.format(format(WTI_전저, ','))
            self.label_61.setText(str)
            plot6_ovc_jl_line.setValue(WTI_전저)

            str = ' {0} '.format(format(WTI_전고, ','))
            self.label_62.setText(str)
            plot6_ovc_jh_line.setValue(WTI_전고)
            
            str = ' {0} '.format(format(WTI_종가, ','))
            self.label_63.setText(str)
            plot6_ovc_close_line.setValue(WTI_종가)

            str = ' {0} '.format(format(WTI_피봇, ','))
            self.label_64.setText(str)
            plot6_ovc_pivot_line.setValue(WTI_피봇)
            
            str = ' {0} '.format(format(WTI_시가, ','))
            self.label_65.setText(str)
            plot6_ovc_open_line.setValue(WTI_시가)

            str = ' {0} '.format(format(WTI_저가, ','))
            self.label_66.setText(str)
            plot6_ovc_low_line.setValue(WTI_저가)

            self.label_67.setText(" 00.00 (전일대비, 등락율, 진폭) ")

            str = ' {0} '.format(format(WTI_고가, ','))
            self.label_68.setText(str)
            plot6_ovc_high_line.setValue(WTI_고가)            
        else:
            pass 

    #####################################################################################################################################################################
    # Plot Update...
    @pyqtSlot(str)
    def update_bigchart(self):

        dt = datetime.datetime.now()
        start_time = timeit.default_timer()

        '''
        if flag_offline:

            str = '[{0:02d}:{1:02d}:{2:02d}] BigChart UI 쓰레드를 종료합니다. : {3:.2f} ms...\r'.format(\
            dt.hour, dt.minute, dt.second, (timeit.default_timer() - start_time) * 1000)
            print(str)

            self.bigchart_update_worker.terminate()
        else:
            pass
        '''

        # 해외선물 한국시간 표시
        if OVC_체결시간 == '000000':

            str = ' {0:02d}:{1:02d}:{2:02d} '.format(dt.hour, dt.minute, dt.second)
        else:
            str = ' {0:02d}:{1:02d}:{2:02d}({3:d}) '.format(adj_hour, adj_min, adj_sec, ovc_x_idx)
   
        self.label_time.setText(str)

        if FLAG_GUEST_CONTROL and receive_real_ovc:

            # Plot1 x축 타임라인 그리기
            plot1_time_line.setValue(ovc_x_idx)

            # Plot2 x축 타임라인 그리기
            plot2_time_line.setValue(ovc_x_idx)

            # Plot3 x축 타임라인 그리기
            plot3_time_line.setValue(ovc_x_idx)

            # Plot4 x축 타임라인 그리기
            plot4_time_line.setValue(ovc_x_idx)

            # Plot5 x축 타임라인 그리기
            plot5_time_line.setValue(ovc_x_idx)

            # Plot6 x축 타임라인 그리기
            plot6_time_line.setValue(ovc_x_idx)

            # Plot1 그래프 그리기
            if comboindex1 == 0 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    self.label_17.setStyleSheet('background-color: red ; color: white')
                else:
                    self.label_17.setStyleSheet('background-color: blue ; color: white')

                self.label_17.setText(str)

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    plot1_fut_volume_plus_curve.setData(df_futures_graph['volume'].tolist())
                else:
                    plot1_fut_volume_minus_curve.setData(df_futures_graph['volume'].tolist())

            elif comboindex1 == 1 and market_service:

                str = " 본월물: {0:.2f}({1:.0f}/{2:.0f}), 차월물: {3:.2f}({4:.0f}/{5:.0f}), {6:.2f} ".format(\
                    df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'c_md_hoga'], \
                    df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'n_md_hoga'], \
                    fut_ccms_hoga_rr)

                if df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] > 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] > 1.0:
                    self.label_17.setStyleSheet('background-color: red ; color: white')
                elif df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] < 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] < 1.0:
                    self.label_17.setStyleSheet('background-color: blue ; color: white')
                else:
                    self.label_17.setStyleSheet('background-color: yellow ; color: black')

                self.label_17.setText(str)

                plot1_fut_choga_rr_curve.setData(df_futures_graph['c_hoga_remainder_ratio'].tolist())
                plot1_fut_nhoga_rr_curve.setData(df_futures_graph['n_hoga_remainder_ratio'].tolist())

            elif comboindex1 == 2 and market_service:

                str = " {0:.0f} ".format(df_put_total_graph.at[ovc_x_idx, 'volume'])
                self.label_16.setStyleSheet('background-color: blue ; color: white')
                self.label_16.setText(str)
                
                str = " {0:.0f} ".format(df_call_total_graph.at[ovc_x_idx, 'volume'])
                self.label_18.setStyleSheet('background-color: red ; color: white')
                self.label_18.setText(str)

                plot1_call_volume_curve.setData(df_call_total_graph['volume'].tolist())
                plot1_put_volume_curve.setData(df_put_total_graph['volume'].tolist())

            elif comboindex1 == 3 and market_service:
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, df_put_total_graph.at[ovc_x_idx, 'ms_hoga'], df_put_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_16.setStyleSheet('background-color: blue ; color: white')
                self.label_16.setText(str)
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, df_call_total_graph.at[ovc_x_idx, 'ms_hoga'], df_call_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_18.setStyleSheet('background-color: red ; color: white')
                self.label_18.setText(str)

                plot1_call_hoga_curve.setData(df_call_total_graph['hoga_remainder_ratio'].tolist())
                plot1_put_hoga_curve.setData(df_put_total_graph['hoga_remainder_ratio'].tolist())

            elif comboindex1 == 4 and market_service:

                plot1_fut_drate_curve.setData(df_futures_graph['drate'].tolist())
                plot1_dow_drate_curve.setData(df_dow_graph['drate'].tolist())
                plot1_call_drate_curve.setData(df_call_total_graph['drate'].tolist())
                plot1_put_drate_curve.setData(df_put_total_graph['drate'].tolist())

            elif comboindex1 == 5 and market_service:

                str = " {0:.2f}({1:.2f}) ".format(df_put_total_graph.at[ovc_x_idx, 'open_interest'], put_oi_init_percent)
                self.label_16.setStyleSheet('background-color: blue ; color: white')
                self.label_16.setText(str)
                '''
                if df_call_total_graph.at[ovc_x_idx, 'open_interest'] > call_oi_init_percent:

                    str = ' ▲ '
                    self.label_17.setStyleSheet('background-color: red ; color: white')
                    self.label_17.setText(str)

                elif df_put_total_graph.at[ovc_x_idx, 'open_interest'] > put_oi_init_percent:

                    str = ' ▼ '
                    self.label_17.setStyleSheet('background-color: blue ; color: white')
                    self.label_17.setText(str)
                else:
                    pass
                '''
                str = " {0:.2f}({1:.2f}) ".format(df_call_total_graph.at[ovc_x_idx, 'open_interest'], call_oi_init_percent)
                self.label_18.setStyleSheet('background-color: red ; color: white')
                self.label_18.setText(str)

                plot1_call_oi_curve.setData(df_call_total_graph['open_interest'].tolist())
                plot1_put_oi_curve.setData(df_put_total_graph['open_interest'].tolist())

            elif comboindex1 == 6 and market_service:

                if df_futures_graph.at[ovc_x_idx, 'BBMiddle'] == df_futures_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_futures_graph.at[ovc_x_idx, 'BBMiddle'] >= df_futures_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass               

                if df_futures_graph.at[ovc_x_idx, 'PSAR'] == df_futures_graph.at[ovc_x_idx, 'PSAR']:

                    if df_futures_graph.at[ovc_x_idx, 'PSAR'] >= df_futures_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'BBMiddle'], df_futures_graph.at[ovc_x_idx, 'PSAR'], 선물_호가순매수)
                    self.label_p1_2.setText(str)
                else:
                    pass
                
                if df_futures_graph.at[ovc_x_idx, 'OE_CONV'] == df_futures_graph.at[ovc_x_idx, 'OE_CONV'] and df_futures_graph.at[ovc_x_idx, 'OE_BASE'] == df_futures_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_futures_graph.at[ovc_x_idx, 'OE_CONV'] < df_futures_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p1_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_futures_graph.at[ovc_x_idx, 'OE_CONV'], df_futures_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p1_3.setText(str)
                else:
                    pass

                if df_futures_graph.at[ovc_x_idx, 'MAMA'] == df_futures_graph.at[ovc_x_idx, 'MAMA'] and df_futures_graph.at[ovc_x_idx, 'FAMA'] == df_futures_graph.at[ovc_x_idx, 'FAMA']:

                    if df_futures_graph.at[ovc_x_idx, 'FAMA'] >= df_futures_graph.at[ovc_x_idx, 'BBLower']:

                        if df_futures_graph.at[ovc_x_idx, 'MAMA'] < df_futures_graph.at[ovc_x_idx, 'FAMA']:                        
                            self.label_p1_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p1_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_futures_graph.at[ovc_x_idx, 'MAMA'], df_futures_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p1_4.setText(str)
                else:
                    pass
                
                plot1_kp200_line[3].setValue(KP200_COREVAL[3])
                plot1_kp200_line[4].setValue(KP200_COREVAL[4])
                plot1_kp200_line[5].setValue(KP200_COREVAL[5])
                plot1_kp200_line[6].setValue(KP200_COREVAL[6])
                
                if kp200_저가 < KP200_COREVAL[3]:
                    plot1_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass
                
                if kp200_고가 > KP200_COREVAL[6]:
                    plot1_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass
                
                plot1_fut_jl_line.setValue(선물_전저)
                plot1_fut_jh_line.setValue(선물_전고)
                plot1_fut_close_line.setValue(선물_종가)
                plot1_fut_pivot_line.setValue(선물_피봇)
                plot1_fut_open_line.setValue(선물_시가)
                plot1_fut_low_line.setValue(선물_저가)

                # 종가선 컬러를 살리기위한 임시방편
                plot1_ovc_open_line.setValue(선물_고가)
                plot1_ovc_jl_line.setValue(선물_고가)
                plot1_ovc_jh_line.setValue(선물_고가)
                plot1_ovc_pivot_line.setValue(선물_고가)
                plot1_ovc_low_line.setValue(선물_고가)
                plot1_ovc_high_line.setValue(선물_고가)
                plot1_ovc_close_line.setValue(선물_고가)
                plot1_fut_high_line.setValue(선물_고가)

                str = ' {0} '.format(선물_저가)
                self.label_16.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_16.setText(str)       

                value = self.label_17.text().split()[0]

                if 선물_현재가 > float(value):

                    str = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}) ".format(선물_현재가, 선물_전일대비, 선물_등락율, 선물_진폭)

                    if 선물_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: red')
                    elif 선물_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: pink ; color: black')

                    self.label_17.setText(str)

                elif 선물_현재가 < float(value):

                    str = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}) ".format(선물_현재가, 선물_전일대비, 선물_등락율, 선물_진폭)

                    if 선물_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: red')
                    if 선물_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_17.setText(str)
                else:
                    pass

                str = ' {0} '.format(선물_고가)
                self.label_18.setStyleSheet('background-color: pink ; color: red')
                self.label_18.setText(str)   

                #plot1_kp200_curve.setData(df_futures_graph['kp200'].tolist())
                plot1_kp200_curve.setData(df_kp200_graph['price'].tolist())
                plot1_fut_price_curve.setData(df_futures_graph['price'].tolist())

                if flag_checkBox_plot1_bband:

                    plot1_bollinger_upper_curve.setData(df_futures_graph['BBUpper'].tolist())
                    plot1_bollinger_middle_curve.setData(df_futures_graph['BBMiddle'].tolist())
                    plot1_bollinger_lower_curve.setData(df_futures_graph['BBLower'].tolist())
                else:
                    plot1_bollinger_upper_curve.clear()
                    plot1_bollinger_middle_curve.clear()
                    plot1_bollinger_lower_curve.clear()

                if flag_checkBox_plot1_mama:

                    plot1_mama_curve.setData(df_futures_graph['MAMA'].tolist())
                    plot1_fama_curve.setData(df_futures_graph['A_FAMA'].tolist())
                else:
                    plot1_mama_curve.clear()
                    plot1_fama_curve.clear()

                if flag_checkBox_plot1_oe:

                    plot1_oe_conv_curve.setData(df_futures_graph['OE_CONV'].tolist())
                    plot1_oe_base_curve.setData(df_futures_graph['OE_BASE'].tolist())
                else:
                    plot1_oe_conv_curve.clear()
                    plot1_oe_base_curve.clear()

            elif comboindex1 == 7:

                pass

            elif comboindex1 == 8:

                if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] == df_sp500_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_sp500_graph.at[ovc_x_idx, 'PSAR'] == df_sp500_graph.at[ovc_x_idx, 'PSAR']:

                    if df_sp500_graph.at[ovc_x_idx, 'PSAR'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_sp500_graph.at[ovc_x_idx, 'BBMiddle'], df_sp500_graph.at[ovc_x_idx, 'PSAR'], SP500_호가순매수)
                    self.label_p1_2.setText(str)
                else:
                    pass
                
                if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] == df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] and df_sp500_graph.at[ovc_x_idx, 'OE_BASE'] == df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] < df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p1_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'OE_CONV'], df_sp500_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p1_3.setText(str)
                else:
                    pass

                if df_sp500_graph.at[ovc_x_idx, 'MAMA'] == df_sp500_graph.at[ovc_x_idx, 'MAMA'] and df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA']:

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] >= df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'MAMA'] < df_sp500_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p1_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p1_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'MAMA'], df_sp500_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p1_4.setText(str)
                else:
                    pass

                plot1_ovc_jl_line.setValue(SP500_전저)
                plot1_ovc_jh_line.setValue(SP500_전고)
                plot1_ovc_close_line.setValue(SP500_종가)
                plot1_ovc_open_line.setValue(SP500_시가)
                plot1_ovc_pivot_line.setValue(SP500_피봇)
                plot1_ovc_low_line.setValue(SP500_저가)
                plot1_ovc_high_line.setValue(SP500_고가)

                str = ' {0} '.format(format(SP500_저가, ','))
                self.label_16.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_16.setText(str)

                tmp = self.label_17.text().split()[0]
                value = tmp.replace(',', '')               

                if SP500_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: pink ; color: black')

                    self.label_17.setText(str)

                elif SP500_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_17.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(SP500_고가, ','))
                self.label_18.setStyleSheet('background-color: pink ; color: red')
                self.label_18.setText(str)   

                plot1_sp500_curve.setData(df_sp500_graph['price'].tolist())

                if flag_checkBox_plot1_bband:

                    plot1_bollinger_upper_curve.setData(df_sp500_graph['BBUpper'].tolist())
                    plot1_bollinger_middle_curve.setData(df_sp500_graph['BBMiddle'].tolist())
                    plot1_bollinger_lower_curve.setData(df_sp500_graph['BBLower'].tolist())
                else:
                    plot1_bollinger_upper_curve.clear()
                    plot1_bollinger_middle_curve.clear()
                    plot1_bollinger_lower_curve.clear()

                if flag_checkBox_plot1_mama:

                    plot1_mama_curve.setData(df_sp500_graph['MAMA'].tolist())
                    plot1_fama_curve.setData(df_sp500_graph['A_FAMA'].tolist())
                else:
                    plot1_mama_curve.clear()
                    plot1_fama_curve.clear()

                if flag_checkBox_plot1_oe:

                    plot1_oe_conv_curve.setData(df_sp500_graph['OE_CONV'].tolist())
                    plot1_oe_base_curve.setData(df_sp500_graph['OE_BASE'].tolist())
                else:
                    plot1_oe_conv_curve.clear()
                    plot1_oe_base_curve.clear()

            elif comboindex1 == 9:

                if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] == df_dow_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_dow_graph.at[ovc_x_idx, 'PSAR'] == df_dow_graph.at[ovc_x_idx, 'PSAR']:

                    if df_dow_graph.at[ovc_x_idx, 'PSAR'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_dow_graph.at[ovc_x_idx, 'BBMiddle'], df_dow_graph.at[ovc_x_idx, 'PSAR'], DOW_호가순매수)
                    self.label_p1_2.setText(str)
                else:
                    pass
                
                if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] == df_dow_graph.at[ovc_x_idx, 'OE_CONV'] and df_dow_graph.at[ovc_x_idx, 'OE_BASE'] == df_dow_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] < df_dow_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p1_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'OE_CONV'], df_dow_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p1_3.setText(str)
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'MAMA'] == df_dow_graph.at[ovc_x_idx, 'MAMA'] and df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA']:

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] >= df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'MAMA'] < df_dow_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p1_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p1_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'MAMA'], df_dow_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p1_4.setText(str)
                else:
                    pass

                plot1_ovc_jl_line.setValue(DOW_전저)
                plot1_ovc_jh_line.setValue(DOW_전고)
                plot1_ovc_close_line.setValue(DOW_종가)
                plot1_ovc_open_line.setValue(DOW_시가)
                plot1_ovc_pivot_line.setValue(DOW_피봇)
                plot1_ovc_low_line.setValue(DOW_저가)
                plot1_ovc_high_line.setValue(DOW_고가)

                str = ' {0} '.format(format(DOW_저가, ','))
                self.label_16.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_16.setText(str)

                tmp = self.label_17.text().split()[0]
                value = tmp.replace(',', '')

                if DOW_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: pink ; color: black')

                    self.label_17.setText(str)

                elif DOW_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_17.setText(str)
                else:
                    pass
                
                str = ' {0} '.format(format(DOW_고가, ','))
                self.label_18.setStyleSheet('background-color: pink ; color: red')
                self.label_18.setText(str)                      

                plot1_dow_curve.setData(df_dow_graph['price'].tolist())

                if flag_checkBox_plot1_bband:

                    plot1_bollinger_upper_curve.setData(df_dow_graph['BBUpper'].tolist())
                    plot1_bollinger_middle_curve.setData(df_dow_graph['BBMiddle'].tolist())
                    plot1_bollinger_lower_curve.setData(df_dow_graph['BBLower'].tolist())
                else:
                    plot1_bollinger_upper_curve.clear()
                    plot1_bollinger_middle_curve.clear()
                    plot1_bollinger_lower_curve.clear()

                if flag_checkBox_plot1_mama:

                    plot1_mama_curve.setData(df_dow_graph['MAMA'].tolist())
                    plot1_fama_curve.setData(df_dow_graph['A_FAMA'].tolist())
                else:
                    plot1_mama_curve.clear()
                    plot1_fama_curve.clear()

                if flag_checkBox_plot1_oe:

                    plot1_oe_conv_curve.setData(df_dow_graph['OE_CONV'].tolist())
                    plot1_oe_base_curve.setData(df_dow_graph['OE_BASE'].tolist())
                else:
                    plot1_oe_conv_curve.clear()
                    plot1_oe_base_curve.clear()

            elif comboindex1 == 10:

                if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] == df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] == df_nasdaq_graph.at[ovc_x_idx, 'PSAR']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'], df_nasdaq_graph.at[ovc_x_idx, 'PSAR'], NASDAQ_호가순매수)
                    self.label_p1_2.setText(str)
                else:
                    pass
                
                if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] and df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] < df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p1_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'], df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p1_3.setText(str)
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] >= df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p1_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p1_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'MAMA'], df_nasdaq_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p1_4.setText(str)
                else:
                    pass

                plot1_ovc_jl_line.setValue(NASDAQ_전저)
                plot1_ovc_jh_line.setValue(NASDAQ_전고)
                plot1_ovc_close_line.setValue(NASDAQ_종가)
                plot1_ovc_open_line.setValue(NASDAQ_시가)
                plot1_ovc_pivot_line.setValue(NASDAQ_피봇)
                plot1_ovc_low_line.setValue(NASDAQ_저가)
                plot1_ovc_high_line.setValue(NASDAQ_고가)

                str = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_16.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_16.setText(str)

                tmp = self.label_17.text().split()[0]
                value = tmp.replace(',', '')                

                if NASDAQ_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: pink ; color: black')

                    self.label_17.setText(str)

                elif NASDAQ_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_17.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_18.setStyleSheet('background-color: pink ; color: red')
                self.label_18.setText(str) 

                plot1_nasdaq_curve.setData(df_nasdaq_graph['price'].tolist())

                if flag_checkBox_plot1_bband:

                    plot1_bollinger_upper_curve.setData(df_nasdaq_graph['BBUpper'].tolist())
                    plot1_bollinger_middle_curve.setData(df_nasdaq_graph['BBMiddle'].tolist())
                    plot1_bollinger_lower_curve.setData(df_nasdaq_graph['BBLower'].tolist())
                else:
                    plot1_bollinger_upper_curve.clear()
                    plot1_bollinger_middle_curve.clear()
                    plot1_bollinger_lower_curve.clear()

                if flag_checkBox_plot1_mama:

                    plot1_mama_curve.setData(df_nasdaq_graph['MAMA'].tolist())
                    plot1_fama_curve.setData(df_nasdaq_graph['A_FAMA'].tolist())
                else:
                    plot1_mama_curve.clear()
                    plot1_fama_curve.clear()

                if flag_checkBox_plot1_oe:

                    plot1_oe_conv_curve.setData(df_nasdaq_graph['OE_CONV'].tolist())
                    plot1_oe_base_curve.setData(df_nasdaq_graph['OE_BASE'].tolist())
                else:
                    plot1_oe_conv_curve.clear()
                    plot1_oe_base_curve.clear()

            elif comboindex1 == 11:

                if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] == df_wti_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_wti_graph.at[ovc_x_idx, 'PSAR'] == df_wti_graph.at[ovc_x_idx, 'PSAR']:

                    if df_wti_graph.at[ovc_x_idx, 'PSAR'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p1_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_wti_graph.at[ovc_x_idx, 'BBMiddle'], df_wti_graph.at[ovc_x_idx, 'PSAR'], WTI_호가순매수)
                    self.label_p1_2.setText(str)
                else:
                    pass
                
                if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] == df_wti_graph.at[ovc_x_idx, 'OE_CONV'] and df_wti_graph.at[ovc_x_idx, 'OE_BASE'] == df_wti_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] < df_wti_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p1_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p1_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'OE_CONV'], df_wti_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p1_3.setText(str)
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'MAMA'] == df_wti_graph.at[ovc_x_idx, 'MAMA'] and df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA']:

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] >= df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'MAMA'] < df_wti_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p1_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p1_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p1_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'MAMA'], df_wti_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p1_4.setText(str)
                else:
                    pass

                plot1_ovc_jl_line.setValue(WTI_전저)
                plot1_ovc_jh_line.setValue(WTI_전고)
                plot1_ovc_close_line.setValue(WTI_종가)
                plot1_ovc_open_line.setValue(WTI_시가)
                plot1_ovc_pivot_line.setValue(WTI_피봇)
                plot1_ovc_low_line.setValue(WTI_저가)
                plot1_ovc_high_line.setValue(WTI_고가)

                str = ' {0} '.format(format(WTI_저가, ','))
                self.label_16.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_16.setText(str)

                value = self.label_17.text().split()[0]     

                if WTI_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: pink ; color: black')

                    self.label_17.setText(str)

                elif WTI_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_17.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_17.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(WTI_고가, ','))
                self.label_18.setStyleSheet('background-color: pink ; color: red')
                self.label_18.setText(str) 

                plot1_wti_curve.setData(df_wti_graph['price'].tolist())

                if flag_checkBox_plot1_bband:

                    plot1_bollinger_upper_curve.setData(df_wti_graph['BBUpper'].tolist())
                    plot1_bollinger_middle_curve.setData(df_wti_graph['BBMiddle'].tolist())
                    plot1_bollinger_lower_curve.setData(df_wti_graph['BBLower'].tolist())
                else:
                    plot1_bollinger_upper_curve.clear()
                    plot1_bollinger_middle_curve.clear()
                    plot1_bollinger_lower_curve.clear()

                if flag_checkBox_plot1_mama:

                    plot1_mama_curve.setData(df_wti_graph['MAMA'].tolist())
                    plot1_fama_curve.setData(df_wti_graph['A_FAMA'].tolist())
                else:
                    plot1_mama_curve.clear()
                    plot1_fama_curve.clear()

                if flag_checkBox_plot1_oe:

                    plot1_oe_conv_curve.setData(df_wti_graph['OE_CONV'].tolist())
                    plot1_oe_base_curve.setData(df_wti_graph['OE_BASE'].tolist())
                else:
                    plot1_oe_conv_curve.clear()
                    plot1_oe_base_curve.clear()
            else:
                pass   

            # Plot2 그래프 그리기
            if comboindex2 == 0 and market_service:

                str = " {0:.0f} ".format(df_put_total_graph.at[ovc_x_idx, 'volume'])
                self.label_26.setStyleSheet('background-color: blue ; color: white')
                self.label_26.setText(str)
                
                str = " {0:.0f} ".format(df_call_total_graph.at[ovc_x_idx, 'volume'])
                self.label_28.setStyleSheet('background-color: red ; color: white')
                self.label_28.setText(str)

                plot2_call_volume_curve.setData(df_call_total_graph['volume'].tolist())
                plot2_put_volume_curve.setData(df_put_total_graph['volume'].tolist())

            elif comboindex2 == 1 and market_service:

                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, df_put_total_graph.at[ovc_x_idx, 'ms_hoga'], df_put_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_26.setStyleSheet('background-color: blue ; color: white')
                self.label_26.setText(str)
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, df_call_total_graph.at[ovc_x_idx, 'ms_hoga'], df_call_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_28.setStyleSheet('background-color: red ; color: white')
                self.label_28.setText(str)

                plot2_call_hoga_curve.setData(df_call_total_graph['hoga_remainder_ratio'].tolist())
                plot2_put_hoga_curve.setData(df_put_total_graph['hoga_remainder_ratio'].tolist())        

            elif comboindex2 == 2 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    self.label_27.setStyleSheet('background-color: red ; color: white')
                else:
                    self.label_27.setStyleSheet('background-color: blue ; color: white')

                self.label_27.setText(str)

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    plot2_fut_volume_plus_curve.setData(df_futures_graph['volume'].tolist())
                else:
                    plot2_fut_volume_minus_curve.setData(df_futures_graph['volume'].tolist())

            elif comboindex2 == 3 and market_service:

                str = " 본월물: {0:.2f}({1:.0f}/{2:.0f}), 차월물: {3:.2f}({4:.0f}/{5:.0f}), {6:.2f} ".format(\
                    df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'c_md_hoga'], \
                    df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'n_md_hoga'], \
                    fut_ccms_hoga_rr)

                if df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] > 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] > 1.0:
                    self.label_27.setStyleSheet('background-color: red ; color: white')
                elif df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] < 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] < 1.0:
                    self.label_27.setStyleSheet('background-color: blue ; color: white')
                else:
                    self.label_27.setStyleSheet('background-color: yellow ; color: black')

                self.label_27.setText(str)

                plot2_fut_choga_rr_curve.setData(df_futures_graph['c_hoga_remainder_ratio'].tolist())
                plot2_fut_nhoga_rr_curve.setData(df_futures_graph['n_hoga_remainder_ratio'].tolist())

            elif comboindex2 == 4 and market_service:

                plot2_fut_drate_curve.setData(df_futures_graph['drate'].tolist())
                plot2_dow_drate_curve.setData(df_dow_graph['drate'].tolist())
                plot2_call_drate_curve.setData(df_call_total_graph['drate'].tolist())
                plot2_put_drate_curve.setData(df_put_total_graph['drate'].tolist())

            elif comboindex2 == 5 and market_service:

                str = " {0:.2f}({1:.2f}) ".format(df_put_total_graph.at[ovc_x_idx, 'open_interest'], put_oi_init_percent)
                self.label_26.setStyleSheet('background-color: blue ; color: white')
                self.label_26.setText(str)
                '''
                if df_call_total_graph.at[ovc_x_idx, 'open_interest'] > call_oi_init_percent:

                    str = ' ▲ '
                    self.label_27.setStyleSheet('background-color: red ; color: white')
                    self.label_27.setText(str)

                elif df_put_total_graph.at[ovc_x_idx, 'open_interest'] > put_oi_init_percent:

                    str = ' ▼ '
                    self.label_27.setStyleSheet('background-color: blue ; color: white')
                    self.label_27.setText(str)
                else:
                    pass
                '''
                str = " {0:.2f}({1:.2f}) ".format(df_call_total_graph.at[ovc_x_idx, 'open_interest'], call_oi_init_percent)
                self.label_28.setStyleSheet('background-color: red ; color: white')
                self.label_28.setText(str)

                plot2_call_oi_curve.setData(df_call_total_graph['open_interest'].tolist())
                plot2_put_oi_curve.setData(df_put_total_graph['open_interest'].tolist())

            elif comboindex2 == 6 and market_service:

                if selected_opt_list != old_selected_opt_list:

                    # 전체 행사가 그래프 클리어
                    for index in range(option_pairs_count):
                        plot2_call_curve[index].clear()
                        plot2_put_curve[index].clear()                    
                else:
                    # 선택된 행사가 그래프 클리어
                    for index in range(option_pairs_count):

                        if index in selected_call:
                            plot2_call_curve[index].clear()
                        else:
                            pass

                        if index in selected_put:
                            plot2_put_curve[index].clear()
                        else:
                            pass

                plot2_center_val_curve.clear()

                plot2_mv_line[1].setValue(2.5)
                plot2_mv_line[2].setValue(3.5)
                plot2_mv_line[3].setValue(4.85)

                for index in range(option_pairs_count):

                    # 선택된 콜그래프 그리기
                    for i in range(len(selected_call)):

                        if index == selected_call[i]:
                            #plot2_call_curve[i].setData(call_plot_data[index])
                            plot2_call_curve[i].setData(df_call_graph[index]['price'].tolist())
                        else:
                            pass                    

                    # 선택된 풋그래프 그리기
                    for i in range(len(selected_put)):

                        if index == selected_put[i]:
                            #plot2_put_curve[i].setData(put_plot_data[index])
                            plot2_put_curve[i].setData(df_put_graph[index]['price'].tolist())
                        else:
                            pass
                        
                plot2_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
                plot2_center_val_line.setValue(CENTER_VAL)
                plot2_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

                # 중심가 그리기
                plot2_center_val_curve.setData(df_call_total_graph['centerval'].tolist())

                # 등가표시
                str = ' 등가: {0} '.format(atm_str)
                self.label_21.setText(str)
                
                str = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                self.label_22.setText(str)

                str = ' 중심가 하단: {0:.2f} '.format(CENTER_VAL - CENTERVAL_LOWER)
                self.label_23.setText(str)

                str = ' 중심가 상단: {0:.2f} '.format(CENTER_VAL + CENTERVAL_UPPER)
                self.label_24.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[atm_index, '대비'], (put_atm_value / df_put.at[atm_index, '시가'] - 1) * 100)
                self.label_26.setText(str)

                str = ' 중심가: {0:.2f} '.format(CENTER_VAL)
                self.label_27.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[atm_index, '대비'], (call_atm_value / df_call.at[atm_index, '시가'] - 1) * 100)
                self.label_28.setText(str)

            elif comboindex2 == 7:

                pass

            elif comboindex2 == 8:

                if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] == df_sp500_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_sp500_graph.at[ovc_x_idx, 'PSAR'] == df_sp500_graph.at[ovc_x_idx, 'PSAR']:

                    if df_sp500_graph.at[ovc_x_idx, 'PSAR'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_sp500_graph.at[ovc_x_idx, 'BBMiddle'], df_sp500_graph.at[ovc_x_idx, 'PSAR'], SP500_호가순매수)
                    self.label_p2_2.setText(str)
                else:
                    pass
                
                if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] == df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] and df_sp500_graph.at[ovc_x_idx, 'OE_BASE'] == df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] < df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p2_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'OE_CONV'], df_sp500_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p2_3.setText(str)
                else:
                    pass

                if df_sp500_graph.at[ovc_x_idx, 'MAMA'] == df_sp500_graph.at[ovc_x_idx, 'MAMA'] and df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA']:

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] >= df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'MAMA'] < df_sp500_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p2_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p2_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'MAMA'], df_sp500_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p2_4.setText(str)
                else:
                    pass

                plot2_ovc_jl_line.setValue(SP500_전저)
                plot2_ovc_jh_line.setValue(SP500_전고)
                plot2_ovc_close_line.setValue(SP500_종가)
                plot2_ovc_open_line.setValue(SP500_시가)
                plot2_ovc_pivot_line.setValue(SP500_피봇)
                plot2_ovc_low_line.setValue(SP500_저가)
                plot2_ovc_high_line.setValue(SP500_고가)

                # 고가선 이동시 중심가 3개 선도 같이 이동해야됨(중요)
                plot2_center_val_lower_line.setValue(SP500_고가)
                plot2_center_val_line.setValue(SP500_고가)
                plot2_center_val_upper_line.setValue(SP500_고가)
                plot2_ovc_high_line.setValue(SP500_고가)

                str = ' {0} '.format(format(SP500_저가, ','))
                self.label_26.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_26.setText(str)

                tmp = self.label_27.text().split()[0]
                value = tmp.replace(',', '')                

                if SP500_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: pink ; color: black')

                    self.label_27.setText(str)

                elif SP500_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_27.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(SP500_고가, ','))
                self.label_28.setStyleSheet('background-color: pink ; color: red')
                self.label_28.setText(str) 

                plot2_sp500_curve.setData(df_sp500_graph['price'].tolist())

                if flag_checkBox_plot2_bband:

                    plot2_bollinger_upper_curve.setData(df_sp500_graph['BBUpper'].tolist())
                    plot2_bollinger_middle_curve.setData(df_sp500_graph['BBMiddle'].tolist())
                    plot2_bollinger_lower_curve.setData(df_sp500_graph['BBLower'].tolist())
                else:
                    plot2_bollinger_upper_curve.clear()
                    plot2_bollinger_middle_curve.clear()
                    plot2_bollinger_lower_curve.clear()

                if flag_checkBox_plot2_mama:

                    plot2_mama_curve.setData(df_sp500_graph['MAMA'].tolist())
                    plot2_fama_curve.setData(df_sp500_graph['A_FAMA'].tolist())
                else:
                    plot2_mama_curve.clear()
                    plot2_fama_curve.clear()

                if flag_checkBox_plot2_oe:

                    plot2_oe_conv_curve.setData(df_sp500_graph['OE_CONV'].tolist())
                    plot2_oe_base_curve.setData(df_sp500_graph['OE_BASE'].tolist())
                else:
                    plot2_oe_conv_curve.clear()
                    plot2_oe_base_curve.clear() 

            elif comboindex2 == 9:

                if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] == df_dow_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_dow_graph.at[ovc_x_idx, 'PSAR'] == df_dow_graph.at[ovc_x_idx, 'PSAR']:

                    if df_dow_graph.at[ovc_x_idx, 'PSAR'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_dow_graph.at[ovc_x_idx, 'BBMiddle'], df_dow_graph.at[ovc_x_idx, 'PSAR'], DOW_호가순매수)
                    self.label_p2_2.setText(str)
                else:
                    pass
                
                if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] == df_dow_graph.at[ovc_x_idx, 'OE_CONV'] and df_dow_graph.at[ovc_x_idx, 'OE_BASE'] == df_dow_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] < df_dow_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p2_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'OE_CONV'], df_dow_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p2_3.setText(str)
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'MAMA'] == df_dow_graph.at[ovc_x_idx, 'MAMA'] and df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA']:

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] >= df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'MAMA'] < df_dow_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p2_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p2_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'MAMA'], df_dow_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p2_4.setText(str)
                else:
                    pass

                plot2_ovc_jl_line.setValue(DOW_전저)
                plot2_ovc_jh_line.setValue(DOW_전고)
                plot2_ovc_close_line.setValue(DOW_종가)
                plot2_ovc_open_line.setValue(DOW_시가)
                plot2_ovc_pivot_line.setValue(DOW_피봇)
                plot2_ovc_low_line.setValue(DOW_저가)
                plot2_ovc_high_line.setValue(DOW_고가)

                plot2_center_val_lower_line.setValue(DOW_고가)
                plot2_center_val_line.setValue(DOW_고가)
                plot2_center_val_upper_line.setValue(DOW_고가)
                plot2_ovc_high_line.setValue(DOW_고가)

                str = ' {0} '.format(format(DOW_저가, ','))
                self.label_26.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_26.setText(str)

                tmp = self.label_27.text().split()[0]
                value = tmp.replace(',', '')               

                if DOW_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: pink ; color: black')

                    self.label_27.setText(str)

                elif DOW_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_27.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(DOW_고가, ','))
                self.label_28.setStyleSheet('background-color: pink ; color: red')
                self.label_28.setText(str)                  

                plot2_dow_curve.setData(df_dow_graph['price'].tolist())

                if flag_checkBox_plot2_bband:

                    plot2_bollinger_upper_curve.setData(df_dow_graph['BBUpper'].tolist())
                    plot2_bollinger_middle_curve.setData(df_dow_graph['BBMiddle'].tolist())
                    plot2_bollinger_lower_curve.setData(df_dow_graph['BBLower'].tolist())
                else:
                    plot2_bollinger_upper_curve.clear()
                    plot2_bollinger_middle_curve.clear()
                    plot2_bollinger_lower_curve.clear()

                if flag_checkBox_plot2_mama:

                    plot2_mama_curve.setData(df_dow_graph['MAMA'].tolist())
                    plot2_fama_curve.setData(df_dow_graph['A_FAMA'].tolist())
                else:
                    plot2_mama_curve.clear()
                    plot2_fama_curve.clear()

                if flag_checkBox_plot2_oe:

                    plot2_oe_conv_curve.setData(df_dow_graph['OE_CONV'].tolist())
                    plot2_oe_base_curve.setData(df_dow_graph['OE_BASE'].tolist())
                else:
                    plot2_oe_conv_curve.clear()
                    plot2_oe_base_curve.clear()    

            elif comboindex2 == 10:

                if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] == df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] == df_nasdaq_graph.at[ovc_x_idx, 'PSAR']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'], df_nasdaq_graph.at[ovc_x_idx, 'PSAR'], NASDAQ_호가순매수)
                    self.label_p2_2.setText(str)
                else:
                    pass
                
                if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] and df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] < df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p2_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'], df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p2_3.setText(str)
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] >= df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p2_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p2_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'MAMA'], df_nasdaq_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p2_4.setText(str)
                else:
                    pass

                plot2_ovc_jl_line.setValue(NASDAQ_전저)
                plot2_ovc_jh_line.setValue(NASDAQ_전고)
                plot2_ovc_close_line.setValue(NASDAQ_종가)
                plot2_ovc_open_line.setValue(NASDAQ_시가)
                plot2_ovc_pivot_line.setValue(NASDAQ_피봇)
                plot2_ovc_low_line.setValue(NASDAQ_저가)
                plot2_ovc_high_line.setValue(NASDAQ_고가)

                plot2_center_val_lower_line.setValue(NASDAQ_고가)
                plot2_center_val_line.setValue(NASDAQ_고가)
                plot2_center_val_upper_line.setValue(NASDAQ_고가)
                plot2_ovc_high_line.setValue(NASDAQ_고가)

                str = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_26.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_26.setText(str)

                tmp = self.label_27.text().split()[0]
                value = tmp.replace(',', '')                

                if NASDAQ_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: pink ; color: black')

                    self.label_27.setText(str)

                elif NASDAQ_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_27.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_28.setStyleSheet('background-color: pink ; color: red')
                self.label_28.setText(str)    

                plot2_nasdaq_curve.setData(df_nasdaq_graph['price'].tolist())

                if flag_checkBox_plot2_bband:

                    plot2_bollinger_upper_curve.setData(df_nasdaq_graph['BBUpper'].tolist())
                    plot2_bollinger_middle_curve.setData(df_nasdaq_graph['BBMiddle'].tolist())
                    plot2_bollinger_lower_curve.setData(df_nasdaq_graph['BBLower'].tolist())
                else:
                    plot2_bollinger_upper_curve.clear()
                    plot2_bollinger_middle_curve.clear()
                    plot2_bollinger_lower_curve.clear()

                if flag_checkBox_plot2_mama:

                    plot2_mama_curve.setData(df_nasdaq_graph['MAMA'].tolist())
                    plot2_fama_curve.setData(df_nasdaq_graph['A_FAMA'].tolist())
                else:
                    plot2_mama_curve.clear()
                    plot2_fama_curve.clear()

                if flag_checkBox_plot2_oe:

                    plot2_oe_conv_curve.setData(df_nasdaq_graph['OE_CONV'].tolist())
                    plot2_oe_base_curve.setData(df_nasdaq_graph['OE_BASE'].tolist())
                else:
                    plot2_oe_conv_curve.clear()
                    plot2_oe_base_curve.clear() 

            elif comboindex2 == 11:

                if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] == df_wti_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_wti_graph.at[ovc_x_idx, 'PSAR'] == df_wti_graph.at[ovc_x_idx, 'PSAR']:

                    if df_wti_graph.at[ovc_x_idx, 'PSAR'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p2_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_wti_graph.at[ovc_x_idx, 'BBMiddle'], df_wti_graph.at[ovc_x_idx, 'PSAR'], WTI_호가순매수)
                    self.label_p2_2.setText(str)
                else:
                    pass
                
                if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] == df_wti_graph.at[ovc_x_idx, 'OE_CONV'] and df_wti_graph.at[ovc_x_idx, 'OE_BASE'] == df_wti_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] < df_wti_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p2_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p2_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'OE_CONV'], df_wti_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p2_3.setText(str)
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'MAMA'] == df_wti_graph.at[ovc_x_idx, 'MAMA'] and df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA']:

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] >= df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'MAMA'] < df_wti_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p2_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p2_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p2_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'MAMA'], df_wti_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p2_4.setText(str)
                else:
                    pass

                plot2_ovc_jl_line.setValue(WTI_전저)
                plot2_ovc_jh_line.setValue(WTI_전고)
                plot2_ovc_close_line.setValue(WTI_종가)
                plot2_ovc_open_line.setValue(WTI_시가)
                plot2_ovc_pivot_line.setValue(WTI_피봇)
                plot2_ovc_low_line.setValue(WTI_저가)
                plot2_ovc_high_line.setValue(WTI_고가)

                plot2_center_val_lower_line.setValue(WTI_고가)
                plot2_center_val_line.setValue(WTI_고가)
                plot2_center_val_upper_line.setValue(WTI_고가)
                plot2_ovc_high_line.setValue(WTI_고가)

                str = ' {0} '.format(format(WTI_저가, ','))
                self.label_26.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_26.setText(str)

                value = self.label_27.text().split()[0]             

                if WTI_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: pink ; color: black')

                    self.label_27.setText(str)

                elif WTI_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_27.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_27.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(WTI_고가, ','))
                self.label_28.setStyleSheet('background-color: pink ; color: red')
                self.label_28.setText(str)    

                plot2_wti_curve.setData(df_wti_graph['price'].tolist())

                if flag_checkBox_plot2_bband:

                    plot2_bollinger_upper_curve.setData(df_wti_graph['BBUpper'].tolist())
                    plot2_bollinger_middle_curve.setData(df_wti_graph['BBMiddle'].tolist())
                    plot2_bollinger_lower_curve.setData(df_wti_graph['BBLower'].tolist())
                else:
                    plot2_bollinger_upper_curve.clear()
                    plot2_bollinger_middle_curve.clear()
                    plot2_bollinger_lower_curve.clear()

                if flag_checkBox_plot2_mama:

                    plot2_mama_curve.setData(df_wti_graph['MAMA'].tolist())
                    plot2_fama_curve.setData(df_wti_graph['A_FAMA'].tolist())
                else:
                    plot2_mama_curve.clear()
                    plot2_fama_curve.clear()

                if flag_checkBox_plot2_oe:

                    plot2_oe_conv_curve.setData(df_wti_graph['OE_CONV'].tolist())
                    plot2_oe_base_curve.setData(df_wti_graph['OE_BASE'].tolist())
                else:
                    plot2_oe_conv_curve.clear()
                    plot2_oe_base_curve.clear()  
            else:
                pass        
            
            # Plot3 그래프 그리기
            if comboindex3 == 0 and market_service:

                str = " {0:.0f} ".format(df_put_total_graph.at[ovc_x_idx, 'volume'])
                self.label_36.setStyleSheet('background-color: blue ; color: white')
                self.label_36.setText(str)
                
                str = " {0:.0f} ".format(df_call_total_graph.at[ovc_x_idx, 'volume'])
                self.label_38.setStyleSheet('background-color: red ; color: white')
                self.label_38.setText(str)

                plot3_call_volume_curve.setData(df_call_total_graph['volume'].tolist())
                plot3_put_volume_curve.setData(df_put_total_graph['volume'].tolist())

            elif comboindex3 == 1 and market_service:

                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, df_put_total_graph.at[ovc_x_idx, 'ms_hoga'], df_put_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_36.setStyleSheet('background-color: blue ; color: white')
                self.label_36.setText(str)
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, df_call_total_graph.at[ovc_x_idx, 'ms_hoga'], df_call_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_38.setStyleSheet('background-color: red ; color: white')
                self.label_38.setText(str)

                plot3_call_hoga_curve.setData(df_call_total_graph['hoga_remainder_ratio'].tolist())
                plot3_put_hoga_curve.setData(df_put_total_graph['hoga_remainder_ratio'].tolist())        

            elif comboindex3 == 2 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    self.label_37.setStyleSheet('background-color: red ; color: white')
                else:
                    self.label_37.setStyleSheet('background-color: blue ; color: white')

                self.label_37.setText(str)

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    plot3_fut_volume_plus_curve.setData(df_futures_graph['volume'].tolist())
                else:
                    plot3_fut_volume_minus_curve.setData(df_futures_graph['volume'].tolist())

            elif comboindex3 == 3 and market_service:

                str = " 본월물: {0:.2f}({1:.0f}/{2:.0f}), 차월물: {3:.2f}({4:.0f}/{5:.0f}), {6:.2f} ".format(\
                    df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'c_md_hoga'], \
                    df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'n_md_hoga'], \
                    fut_ccms_hoga_rr)

                if df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] > 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] > 1.0:
                    self.label_37.setStyleSheet('background-color: red ; color: white')
                elif df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] < 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] < 1.0:
                    self.label_37.setStyleSheet('background-color: blue ; color: white')
                else:
                    self.label_37.setStyleSheet('background-color: yellow ; color: black')

                self.label_37.setText(str)

                plot3_fut_choga_rr_curve.setData(df_futures_graph['c_hoga_remainder_ratio'].tolist())
                plot3_fut_nhoga_rr_curve.setData(df_futures_graph['n_hoga_remainder_ratio'].tolist())

            elif comboindex3 == 4 and market_service:

                plot3_fut_drate_curve.setData(df_futures_graph['drate'].tolist())
                plot3_dow_drate_curve.setData(df_dow_graph['drate'].tolist())
                plot3_call_drate_curve.setData(df_call_total_graph['drate'].tolist())
                plot3_put_drate_curve.setData(df_put_total_graph['drate'].tolist())

            elif comboindex3 == 5 and market_service:

                str = " {0:.2f}({1:.2f}) ".format(df_put_total_graph.at[ovc_x_idx, 'open_interest'], put_oi_init_percent)
                self.label_36.setStyleSheet('background-color: blue ; color: white')
                self.label_36.setText(str)
                '''
                if df_call_total_graph.at[ovc_x_idx, 'open_interest'] > call_oi_init_percent:

                    str = ' ▲ '
                    self.label_37.setStyleSheet('background-color: red ; color: white')
                    self.label_37.setText(str)

                elif df_put_total_graph.at[ovc_x_idx, 'open_interest'] > put_oi_init_percent:

                    str = ' ▼ '
                    self.label_37.setStyleSheet('background-color: blue ; color: white')
                    self.label_37.setText(str)
                else:
                    pass
                '''
                str = " {0:.2f}({1:.2f}) ".format(df_call_total_graph.at[ovc_x_idx, 'open_interest'], call_oi_init_percent)
                self.label_38.setStyleSheet('background-color: red ; color: white')
                self.label_38.setText(str)

                plot3_call_oi_curve.setData(df_call_total_graph['open_interest'].tolist())
                plot3_put_oi_curve.setData(df_put_total_graph['open_interest'].tolist())

            elif comboindex3 == 6 and market_service:

                if selected_opt_list != old_selected_opt_list:

                    # 전체 행사가 그래프 클리어
                    for index in range(option_pairs_count):
                        plot3_call_curve[index].clear()
                        plot3_put_curve[index].clear()
                else:
                    # 선택된 행사가 그래프 클리어
                    for index in range(option_pairs_count):

                        if index in selected_call:
                            plot3_call_curve[index].clear()
                        else:
                            pass

                        if index in selected_put:
                            plot3_put_curve[index].clear()
                        else:
                            pass

                plot3_center_val_curve.clear()

                plot3_mv_line[1].setValue(2.5)
                plot3_mv_line[2].setValue(3.5)
                plot3_mv_line[3].setValue(4.85)

                for index in range(option_pairs_count):

                    # 선택된 콜그래프 그리기
                    for i in range(len(selected_call)):

                        if index == selected_call[i]:
                            #plot3_call_curve[i].setData(call_plot_data[index])
                            plot3_call_curve[i].setData(df_call_graph[index]['price'].tolist())
                        else:
                            pass                    

                    # 선택된 풋그래프 그리기
                    for i in range(len(selected_put)):

                        if index == selected_put[i]:
                            #plot3_put_curve[i].setData(put_plot_data[index])
                            plot3_put_curve[i].setData(df_put_graph[index]['price'].tolist())
                        else:
                            pass
                        
                plot3_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
                plot3_center_val_line.setValue(CENTER_VAL)
                plot3_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

                # 중심가 그리기
                plot3_center_val_curve.setData(df_call_total_graph['centerval'].tolist())

                # 등가표시
                str = ' 등가: {0} '.format(atm_str)
                self.label_31.setText(str)

                str = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                self.label_32.setText(str)

                str = ' 중심가 하단: {0:.2f} '.format(CENTER_VAL - CENTERVAL_LOWER)
                self.label_33.setText(str)

                str = ' 중심가 상단: {0:.2f} '.format(CENTER_VAL + CENTERVAL_UPPER)
                self.label_34.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[atm_index, '대비'], (put_atm_value / df_put.at[atm_index, '시가'] - 1) * 100)
                self.label_36.setText(str)

                str = ' 중심가: {0:.2f} '.format(CENTER_VAL)
                self.label_37.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[atm_index, '대비'], (call_atm_value / df_call.at[atm_index, '시가'] - 1) * 100)
                self.label_38.setText(str)

            elif comboindex3 == 7:

                pass

            elif comboindex3 == 8:

                if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] == df_sp500_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_sp500_graph.at[ovc_x_idx, 'PSAR'] == df_sp500_graph.at[ovc_x_idx, 'PSAR']:

                    if df_sp500_graph.at[ovc_x_idx, 'PSAR'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_sp500_graph.at[ovc_x_idx, 'BBMiddle'], df_sp500_graph.at[ovc_x_idx, 'PSAR'], SP500_호가순매수)
                    self.label_p3_2.setText(str)
                else:
                    pass
                
                if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] == df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] and df_sp500_graph.at[ovc_x_idx, 'OE_BASE'] == df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] < df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p3_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'OE_CONV'], df_sp500_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p3_3.setText(str)
                else:
                    pass

                if df_sp500_graph.at[ovc_x_idx, 'MAMA'] == df_sp500_graph.at[ovc_x_idx, 'MAMA'] and df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA']:

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] >= df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'MAMA'] < df_sp500_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p3_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p3_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'MAMA'], df_sp500_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p3_4.setText(str)
                else:
                    pass

                plot3_ovc_jl_line.setValue(SP500_전저)
                plot3_ovc_jh_line.setValue(SP500_전고)
                plot3_ovc_close_line.setValue(SP500_종가)
                plot3_ovc_open_line.setValue(SP500_시가)
                plot3_ovc_pivot_line.setValue(SP500_피봇)
                plot3_ovc_low_line.setValue(SP500_저가)
                plot3_ovc_high_line.setValue(SP500_고가)

                # 고가선 이동시 중심가 3개 선도 같이 이동해야됨(중요)
                plot3_center_val_lower_line.setValue(SP500_고가)
                plot3_center_val_line.setValue(SP500_고가)
                plot3_center_val_upper_line.setValue(SP500_고가)
                plot3_ovc_high_line.setValue(SP500_고가)

                str = ' {0} '.format(format(SP500_저가, ','))
                self.label_36.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_36.setText(str)

                tmp = self.label_37.text().split()[0]
                value = tmp.replace(',', '')                

                if SP500_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: pink ; color: black')

                    self.label_37.setText(str)

                elif SP500_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_37.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(SP500_고가, ','))
                self.label_38.setStyleSheet('background-color: pink ; color: red')
                self.label_38.setText(str) 

                plot3_sp500_curve.setData(df_sp500_graph['price'].tolist())

                if flag_checkBox_plot3_bband:

                    plot3_bollinger_upper_curve.setData(df_sp500_graph['BBUpper'].tolist())
                    plot3_bollinger_middle_curve.setData(df_sp500_graph['BBMiddle'].tolist())
                    plot3_bollinger_lower_curve.setData(df_sp500_graph['BBLower'].tolist())
                else:
                    plot3_bollinger_upper_curve.clear()
                    plot3_bollinger_middle_curve.clear()
                    plot3_bollinger_lower_curve.clear()

                if flag_checkBox_plot3_mama:

                    plot3_mama_curve.setData(df_sp500_graph['MAMA'].tolist())
                    plot3_fama_curve.setData(df_sp500_graph['A_FAMA'].tolist())
                else:
                    plot3_mama_curve.clear()
                    plot3_fama_curve.clear()

                if flag_checkBox_plot3_oe:

                    plot3_oe_conv_curve.setData(df_sp500_graph['OE_CONV'].tolist())
                    plot3_oe_base_curve.setData(df_sp500_graph['OE_BASE'].tolist())
                else:
                    plot3_oe_conv_curve.clear()
                    plot3_oe_base_curve.clear()  

            elif comboindex3 == 9:

                if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] == df_dow_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'PSAR'] == df_dow_graph.at[ovc_x_idx, 'PSAR']:

                    if df_dow_graph.at[ovc_x_idx, 'PSAR'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_dow_graph.at[ovc_x_idx, 'BBMiddle'], df_dow_graph.at[ovc_x_idx, 'PSAR'], DOW_호가순매수)
                    self.label_p3_2.setText(str)
                else:
                    pass
                
                if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] == df_dow_graph.at[ovc_x_idx, 'OE_CONV'] and df_dow_graph.at[ovc_x_idx, 'OE_BASE'] == df_dow_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] < df_dow_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p3_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'OE_CONV'], df_dow_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p3_3.setText(str)
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'MAMA'] == df_dow_graph.at[ovc_x_idx, 'MAMA'] and df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA']:

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] >= df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'MAMA'] < df_dow_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p3_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p3_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'MAMA'], df_dow_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p3_4.setText(str)
                else:
                    pass

                plot3_ovc_jl_line.setValue(DOW_전저)
                plot3_ovc_jh_line.setValue(DOW_전고)
                plot3_ovc_close_line.setValue(DOW_종가)
                plot3_ovc_open_line.setValue(DOW_시가)
                plot3_ovc_pivot_line.setValue(DOW_피봇)
                plot3_ovc_low_line.setValue(DOW_저가)
                plot3_ovc_high_line.setValue(DOW_고가) 

                plot3_center_val_lower_line.setValue(DOW_고가)
                plot3_center_val_line.setValue(DOW_고가)
                plot3_center_val_upper_line.setValue(DOW_고가)
                plot3_ovc_high_line.setValue(DOW_고가)

                str = ' {0} '.format(format(DOW_저가, ','))
                self.label_36.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_36.setText(str)

                tmp = self.label_37.text().split()[0]
                value = tmp.replace(',', '')               

                if DOW_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: pink ; color: black')

                    self.label_37.setText(str)

                elif DOW_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_37.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(DOW_고가, ','))
                self.label_38.setStyleSheet('background-color: pink ; color: red')
                self.label_38.setText(str)                  

                plot3_dow_curve.setData(df_dow_graph['price'].tolist())

                if flag_checkBox_plot3_bband:

                    plot3_bollinger_upper_curve.setData(df_dow_graph['BBUpper'].tolist())
                    plot3_bollinger_middle_curve.setData(df_dow_graph['BBMiddle'].tolist())
                    plot3_bollinger_lower_curve.setData(df_dow_graph['BBLower'].tolist())
                else:
                    plot3_bollinger_upper_curve.clear()
                    plot3_bollinger_middle_curve.clear()
                    plot3_bollinger_lower_curve.clear()

                if flag_checkBox_plot3_mama:

                    plot3_mama_curve.setData(df_dow_graph['MAMA'].tolist())
                    plot3_fama_curve.setData(df_dow_graph['A_FAMA'].tolist())
                else:
                    plot3_mama_curve.clear()
                    plot3_fama_curve.clear()

                if flag_checkBox_plot3_oe:

                    plot3_oe_conv_curve.setData(df_dow_graph['OE_CONV'].tolist())
                    plot3_oe_base_curve.setData(df_dow_graph['OE_BASE'].tolist())
                else:
                    plot3_oe_conv_curve.clear()
                    plot3_oe_base_curve.clear()    

            elif comboindex3 == 10:

                if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] == df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] == df_nasdaq_graph.at[ovc_x_idx, 'PSAR']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'], df_nasdaq_graph.at[ovc_x_idx, 'PSAR'], NASDAQ_호가순매수)
                    self.label_p3_2.setText(str)
                else:
                    pass
                
                if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] and df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] < df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p3_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'], df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p3_3.setText(str)
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] >= df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p3_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p3_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'MAMA'], df_nasdaq_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p3_4.setText(str)
                else:
                    pass

                plot3_ovc_jl_line.setValue(NASDAQ_전저)
                plot3_ovc_jh_line.setValue(NASDAQ_전고)
                plot3_ovc_close_line.setValue(NASDAQ_종가)
                plot3_ovc_open_line.setValue(NASDAQ_시가)
                plot3_ovc_pivot_line.setValue(NASDAQ_피봇)
                plot3_ovc_low_line.setValue(NASDAQ_저가)
                plot3_ovc_high_line.setValue(NASDAQ_고가)

                plot3_center_val_lower_line.setValue(NASDAQ_고가)
                plot3_center_val_line.setValue(NASDAQ_고가)
                plot3_center_val_upper_line.setValue(NASDAQ_고가)
                plot3_ovc_high_line.setValue(NASDAQ_고가)

                str = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_36.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_36.setText(str)

                tmp = self.label_37.text().split()[0]
                value = tmp.replace(',', '')                

                if NASDAQ_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: pink ; color: black')

                    self.label_37.setText(str)

                elif NASDAQ_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_37.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_38.setStyleSheet('background-color: pink ; color: red')
                self.label_38.setText(str)    

                plot3_nasdaq_curve.setData(df_nasdaq_graph['price'].tolist())

                if flag_checkBox_plot3_bband:

                    plot3_bollinger_upper_curve.setData(df_nasdaq_graph['BBUpper'].tolist())
                    plot3_bollinger_middle_curve.setData(df_nasdaq_graph['BBMiddle'].tolist())
                    plot3_bollinger_lower_curve.setData(df_nasdaq_graph['BBLower'].tolist())
                else:
                    plot3_bollinger_upper_curve.clear()
                    plot3_bollinger_middle_curve.clear()
                    plot3_bollinger_lower_curve.clear()

                if flag_checkBox_plot3_mama:

                    plot3_mama_curve.setData(df_nasdaq_graph['MAMA'].tolist())
                    plot3_fama_curve.setData(df_nasdaq_graph['A_FAMA'].tolist())
                else:
                    plot3_mama_curve.clear()
                    plot3_fama_curve.clear()

                if flag_checkBox_plot3_oe:

                    plot3_oe_conv_curve.setData(df_nasdaq_graph['OE_CONV'].tolist())
                    plot3_oe_base_curve.setData(df_nasdaq_graph['OE_BASE'].tolist())
                else:
                    plot3_oe_conv_curve.clear()
                    plot3_oe_base_curve.clear()   

            elif comboindex3 == 11:

                if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] == df_wti_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'PSAR'] == df_wti_graph.at[ovc_x_idx, 'PSAR']:

                    if df_wti_graph.at[ovc_x_idx, 'PSAR'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p3_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_wti_graph.at[ovc_x_idx, 'BBMiddle'], df_wti_graph.at[ovc_x_idx, 'PSAR'], WTI_호가순매수)
                    self.label_p3_2.setText(str)
                else:
                    pass
                
                if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] == df_wti_graph.at[ovc_x_idx, 'OE_CONV'] and df_wti_graph.at[ovc_x_idx, 'OE_BASE'] == df_wti_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] < df_wti_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p3_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p3_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'OE_CONV'], df_wti_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p3_3.setText(str)
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'MAMA'] == df_wti_graph.at[ovc_x_idx, 'MAMA'] and df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA']:

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] >= df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'MAMA'] < df_wti_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p3_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p3_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p3_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'MAMA'], df_wti_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p3_4.setText(str)
                else:
                    pass

                plot3_ovc_jl_line.setValue(WTI_전저)
                plot3_ovc_jh_line.setValue(WTI_전고)
                plot3_ovc_close_line.setValue(WTI_종가)
                plot3_ovc_open_line.setValue(WTI_시가)
                plot3_ovc_pivot_line.setValue(WTI_피봇)
                plot3_ovc_low_line.setValue(WTI_저가)
                plot3_ovc_high_line.setValue(WTI_고가)

                plot3_center_val_lower_line.setValue(WTI_고가)
                plot3_center_val_line.setValue(WTI_고가)
                plot3_center_val_upper_line.setValue(WTI_고가)
                plot3_ovc_high_line.setValue(WTI_고가)

                str = ' {0} '.format(format(WTI_저가, ','))
                self.label_36.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_36.setText(str)

                value = self.label_37.text().split()[0]             

                if WTI_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: pink ; color: black')

                    self.label_37.setText(str)

                elif WTI_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_37.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_37.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(WTI_고가, ','))
                self.label_38.setStyleSheet('background-color: pink ; color: red')
                self.label_38.setText(str)    

                plot3_wti_curve.setData(df_wti_graph['price'].tolist())

                if flag_checkBox_plot3_bband:

                    plot3_bollinger_upper_curve.setData(df_wti_graph['BBUpper'].tolist())
                    plot3_bollinger_middle_curve.setData(df_wti_graph['BBMiddle'].tolist())
                    plot3_bollinger_lower_curve.setData(df_wti_graph['BBLower'].tolist())
                else:
                    plot3_bollinger_upper_curve.clear()
                    plot3_bollinger_middle_curve.clear()
                    plot3_bollinger_lower_curve.clear()

                if flag_checkBox_plot3_mama:

                    plot3_mama_curve.setData(df_wti_graph['MAMA'].tolist())
                    plot3_fama_curve.setData(df_wti_graph['A_FAMA'].tolist())
                else:
                    plot3_mama_curve.clear()
                    plot3_fama_curve.clear()

                if flag_checkBox_plot3_oe:

                    plot3_oe_conv_curve.setData(df_wti_graph['OE_CONV'].tolist())
                    plot3_oe_base_curve.setData(df_wti_graph['OE_BASE'].tolist())
                else:
                    plot3_oe_conv_curve.clear()
                    plot3_oe_base_curve.clear()  
            else:
                pass

            # Plot4 그래프 그리기
            if comboindex4 == 0 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    self.label_47.setStyleSheet('background-color: red ; color: white')
                else:
                    self.label_47.setStyleSheet('background-color: blue ; color: white')

                self.label_47.setText(str)

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    plot4_fut_volume_plus_curve.setData(df_futures_graph['volume'].tolist())
                else:
                    plot4_fut_volume_minus_curve.setData(df_futures_graph['volume'].tolist())

            elif comboindex4 == 1 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                str = " 본월물: {0:.2f}({1:.0f}/{2:.0f}), 차월물: {3:.2f}({4:.0f}/{5:.0f}), {6:.2f} ".format(\
                    df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'c_md_hoga'], \
                    df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'n_md_hoga'], \
                    fut_ccms_hoga_rr)

                if df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] > 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] > 1.0:
                    self.label_47.setStyleSheet('background-color: red ; color: white')
                elif df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] < 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] < 1.0:
                    self.label_47.setStyleSheet('background-color: blue ; color: white')
                else:
                    self.label_47.setStyleSheet('background-color: yellow ; color: black')

                self.label_47.setText(str)

                plot4_fut_choga_rr_curve.setData(df_futures_graph['c_hoga_remainder_ratio'].tolist())
                plot4_fut_nhoga_rr_curve.setData(df_futures_graph['n_hoga_remainder_ratio'].tolist())

            elif comboindex4 == 2 and market_service:

                str = " {0:.0f} ".format(df_put_total_graph.at[ovc_x_idx, 'volume'])
                self.label_46.setStyleSheet('background-color: blue ; color: white')
                self.label_46.setText(str)
                
                str = " {0:.0f} ".format(df_call_total_graph.at[ovc_x_idx, 'volume'])
                self.label_48.setStyleSheet('background-color: red ; color: white')
                self.label_48.setText(str)                      

                plot4_call_volume_curve.setData(df_call_total_graph['volume'].tolist())
                plot4_put_volume_curve.setData(df_put_total_graph['volume'].tolist())

            elif comboindex4 == 3 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, df_put_total_graph.at[ovc_x_idx, 'ms_hoga'], df_put_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_46.setStyleSheet('background-color: blue ; color: white')
                self.label_46.setText(str)
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, df_call_total_graph.at[ovc_x_idx, 'ms_hoga'], df_call_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_48.setStyleSheet('background-color: red ; color: white')
                self.label_48.setText(str)

                plot4_call_hoga_curve.setData(df_call_total_graph['hoga_remainder_ratio'].tolist())
                plot4_put_hoga_curve.setData(df_put_total_graph['hoga_remainder_ratio'].tolist())

            elif comboindex4 == 4 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                plot4_fut_drate_curve.setData(df_futures_graph['drate'].tolist())
                plot4_dow_drate_curve.setData(df_dow_graph['drate'].tolist())
                plot4_call_drate_curve.setData(df_call_total_graph['drate'].tolist())
                plot4_put_drate_curve.setData(df_put_total_graph['drate'].tolist())

            elif comboindex4 == 5 and market_service:

                str = " {0:.2f}({1:.2f}) ".format(df_put_total_graph.at[ovc_x_idx, 'open_interest'], put_oi_init_percent)
                self.label_46.setStyleSheet('background-color: blue ; color: white')
                self.label_46.setText(str)
                '''
                if df_call_total_graph.at[ovc_x_idx, 'open_interest'] > call_oi_init_percent:

                    str = ' ▲ '
                    self.label_47.setStyleSheet('background-color: red ; color: white')
                    self.label_47.setText(str)

                elif df_put_total_graph.at[ovc_x_idx, 'open_interest'] > put_oi_init_percent:

                    str = ' ▼ '
                    self.label_47.setStyleSheet('background-color: blue ; color: white')
                    self.label_47.setText(str)
                else:
                    pass
                '''
                str = " {0:.2f}({1:.2f}) ".format(df_call_total_graph.at[ovc_x_idx, 'open_interest'], call_oi_init_percent)
                self.label_48.setStyleSheet('background-color: red ; color: white')
                self.label_48.setText(str)

                plot4_call_oi_curve.setData(df_call_total_graph['open_interest'].tolist())
                plot4_put_oi_curve.setData(df_put_total_graph['open_interest'].tolist())

            elif comboindex4 == 6 and market_service:

                if df_futures_graph.at[ovc_x_idx, 'BBMiddle'] == df_futures_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_futures_graph.at[ovc_x_idx, 'BBMiddle'] >= df_futures_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass               

                if df_futures_graph.at[ovc_x_idx, 'PSAR'] == df_futures_graph.at[ovc_x_idx, 'PSAR']:

                    if df_futures_graph.at[ovc_x_idx, 'PSAR'] >= df_futures_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'BBMiddle'], df_futures_graph.at[ovc_x_idx, 'PSAR'], 선물_호가순매수)
                    self.label_p4_2.setText(str)
                else:
                    pass
                
                if df_futures_graph.at[ovc_x_idx, 'OE_CONV'] == df_futures_graph.at[ovc_x_idx, 'OE_CONV'] and df_futures_graph.at[ovc_x_idx, 'OE_BASE'] == df_futures_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_futures_graph.at[ovc_x_idx, 'OE_CONV'] < df_futures_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p4_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_futures_graph.at[ovc_x_idx, 'OE_CONV'], df_futures_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p4_3.setText(str)
                else:
                    pass

                if df_futures_graph.at[ovc_x_idx, 'MAMA'] == df_futures_graph.at[ovc_x_idx, 'MAMA'] and df_futures_graph.at[ovc_x_idx, 'FAMA'] == df_futures_graph.at[ovc_x_idx, 'FAMA']:

                    if df_futures_graph.at[ovc_x_idx, 'FAMA'] >= df_futures_graph.at[ovc_x_idx, 'BBLower']:

                        if df_futures_graph.at[ovc_x_idx, 'MAMA'] < df_futures_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p4_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p4_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_futures_graph.at[ovc_x_idx, 'MAMA'], df_futures_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p4_4.setText(str)
                else:
                    pass
                
                plot4_kp200_line[3].setValue(KP200_COREVAL[3])
                plot4_kp200_line[4].setValue(KP200_COREVAL[4])
                plot4_kp200_line[5].setValue(KP200_COREVAL[5])
                plot4_kp200_line[6].setValue(KP200_COREVAL[6])
                
                if kp200_저가 < KP200_COREVAL[3]:
                    plot4_kp200_line[2].setValue(KP200_COREVAL[2])
                else:
                    pass
                
                if kp200_고가 > KP200_COREVAL[6]:
                    plot4_kp200_line[7].setValue(KP200_COREVAL[7])
                else:
                    pass
                
                plot4_fut_jl_line.setValue(선물_전저)
                plot4_fut_jh_line.setValue(선물_전고)
                plot4_fut_close_line.setValue(선물_종가)
                plot4_fut_pivot_line.setValue(선물_피봇)
                plot4_fut_open_line.setValue(선물_시가)
                plot4_fut_low_line.setValue(선물_저가)

                # 종가선 컬러를 살리기위한 임시방편
                plot4_ovc_open_line.setValue(선물_고가)
                plot4_ovc_jl_line.setValue(선물_고가)
                plot4_ovc_jh_line.setValue(선물_고가)
                plot4_ovc_pivot_line.setValue(선물_고가)
                plot4_ovc_low_line.setValue(선물_고가)
                plot4_ovc_high_line.setValue(선물_고가)
                plot4_ovc_close_line.setValue(선물_고가)
                plot4_fut_high_line.setValue(선물_고가)

                str = ' {0} '.format(선물_저가)
                self.label_46.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_46.setText(str)    

                value = self.label_47.text().split()[0]

                if 선물_현재가 > float(value):

                    str = " {0} ▲ ({1:.2f}, {2:0.1f}%, {3:.2f}) ".format(선물_현재가, 선물_전일대비, 선물_등락율, 선물_진폭)

                    if 선물_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: red')
                    elif 선물_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: pink ; color: black')

                    self.label_47.setText(str)

                elif 선물_현재가 < float(value):

                    str = " {0} ▼ ({1:.2f}, {2:0.1f}%, {3:.2f}) ".format(선물_현재가, 선물_전일대비, 선물_등락율, 선물_진폭)

                    if 선물_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: red')
                    if 선물_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_47.setText(str)
                else:
                    pass

                str = ' {0} '.format(선물_고가)
                self.label_48.setStyleSheet('background-color: pink ; color: red')
                self.label_48.setText(str)   

                #plot4_kp200_curve.setData(df_futures_graph['kp200'].tolist())
                plot4_kp200_curve.setData(df_kp200_graph['price'].tolist())
                plot4_fut_price_curve.setData(df_futures_graph['price'].tolist())

                if flag_checkBox_plot4_bband:

                    plot4_bollinger_upper_curve.setData(df_futures_graph['BBUpper'].tolist())
                    plot4_bollinger_middle_curve.setData(df_futures_graph['BBMiddle'].tolist())
                    plot4_bollinger_lower_curve.setData(df_futures_graph['BBLower'].tolist())
                else:
                    plot4_bollinger_upper_curve.clear()
                    plot4_bollinger_middle_curve.clear()
                    plot4_bollinger_lower_curve.clear()

                if flag_checkBox_plot4_mama:

                    plot4_mama_curve.setData(df_futures_graph['MAMA'].tolist())
                    plot4_fama_curve.setData(df_futures_graph['A_FAMA'].tolist())
                else:
                    plot4_mama_curve.clear()
                    plot4_fama_curve.clear()

                if flag_checkBox_plot4_oe:

                    plot4_oe_conv_curve.setData(df_futures_graph['OE_CONV'].tolist())
                    plot4_oe_base_curve.setData(df_futures_graph['OE_BASE'].tolist())
                else:
                    plot4_oe_conv_curve.clear()
                    plot4_oe_base_curve.clear()

            elif comboindex4 == 7:

                pass

            elif comboindex4 == 8:

                if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] == df_sp500_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_sp500_graph.at[ovc_x_idx, 'PSAR'] == df_sp500_graph.at[ovc_x_idx, 'PSAR']:

                    if df_sp500_graph.at[ovc_x_idx, 'PSAR'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_sp500_graph.at[ovc_x_idx, 'BBMiddle'], df_sp500_graph.at[ovc_x_idx, 'PSAR'], SP500_호가순매수)
                    self.label_p4_2.setText(str)
                else:
                    pass
                
                if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] == df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] and df_sp500_graph.at[ovc_x_idx, 'OE_BASE'] == df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] < df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p4_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'OE_CONV'], df_sp500_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p4_3.setText(str)
                else:
                    pass

                if df_sp500_graph.at[ovc_x_idx, 'MAMA'] == df_sp500_graph.at[ovc_x_idx, 'MAMA'] and df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA']:

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] >= df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'MAMA'] < df_sp500_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p4_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p4_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'MAMA'], df_sp500_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p4_4.setText(str)
                else:
                    pass

                plot4_ovc_jl_line.setValue(SP500_전저)
                plot4_ovc_jh_line.setValue(SP500_전고)
                plot4_ovc_close_line.setValue(SP500_종가)
                plot4_ovc_open_line.setValue(SP500_시가)
                plot4_ovc_pivot_line.setValue(SP500_피봇)
                plot4_ovc_low_line.setValue(SP500_저가)
                plot4_ovc_high_line.setValue(SP500_고가)

                str = ' {0} '.format(format(SP500_저가, ','))
                self.label_46.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_46.setText(str)
                
                tmp = self.label_47.text().split()[0]
                value = tmp.replace(',', '')               

                if SP500_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: pink ; color: black')

                    self.label_47.setText(str)

                elif SP500_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_47.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(SP500_고가, ','))
                self.label_48.setStyleSheet('background-color: pink ; color: red')
                self.label_48.setText(str)   

                plot4_sp500_curve.setData(df_sp500_graph['price'].tolist())

                if flag_checkBox_plot4_bband:

                    plot4_bollinger_upper_curve.setData(df_sp500_graph['BBUpper'].tolist())
                    plot4_bollinger_middle_curve.setData(df_sp500_graph['BBMiddle'].tolist())
                    plot4_bollinger_lower_curve.setData(df_sp500_graph['BBLower'].tolist())
                else:
                    plot4_bollinger_upper_curve.clear()
                    plot4_bollinger_middle_curve.clear()
                    plot4_bollinger_lower_curve.clear()

                if flag_checkBox_plot4_mama:

                    plot4_mama_curve.setData(df_sp500_graph['MAMA'].tolist())
                    plot4_fama_curve.setData(df_sp500_graph['A_FAMA'].tolist())
                else:
                    plot4_mama_curve.clear()
                    plot4_fama_curve.clear()

                if flag_checkBox_plot4_oe:

                    plot4_oe_conv_curve.setData(df_sp500_graph['OE_CONV'].tolist())
                    plot4_oe_base_curve.setData(df_sp500_graph['OE_BASE'].tolist())
                else:
                    plot4_oe_conv_curve.clear()
                    plot4_oe_base_curve.clear()

            elif comboindex4 == 9:

                if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] == df_dow_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_dow_graph.at[ovc_x_idx, 'PSAR'] == df_dow_graph.at[ovc_x_idx, 'PSAR']:

                    if df_dow_graph.at[ovc_x_idx, 'PSAR'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_dow_graph.at[ovc_x_idx, 'BBMiddle'], df_dow_graph.at[ovc_x_idx, 'PSAR'], DOW_호가순매수)
                    self.label_p4_2.setText(str)
                else:
                    pass
                
                if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] == df_dow_graph.at[ovc_x_idx, 'OE_CONV'] and df_dow_graph.at[ovc_x_idx, 'OE_BASE'] == df_dow_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] < df_dow_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p4_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'OE_CONV'], df_dow_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p4_3.setText(str)
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'MAMA'] == df_dow_graph.at[ovc_x_idx, 'MAMA'] and df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA']:

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] >= df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'MAMA'] < df_dow_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p4_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p4_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'MAMA'], df_dow_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p4_4.setText(str)
                else:
                    pass

                plot4_ovc_jl_line.setValue(DOW_전저)
                plot4_ovc_jh_line.setValue(DOW_전고)
                plot4_ovc_close_line.setValue(DOW_종가)
                plot4_ovc_open_line.setValue(DOW_시가)
                plot4_ovc_pivot_line.setValue(DOW_피봇)
                plot4_ovc_low_line.setValue(DOW_저가)
                plot4_ovc_high_line.setValue(DOW_고가)

                str = ' {0} '.format(format(DOW_저가, ','))
                self.label_46.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_46.setText(str)

                tmp = self.label_47.text().split()[0]
                value = tmp.replace(',', '')

                if DOW_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: pink ; color: black')

                    self.label_47.setText(str)

                elif DOW_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_47.setText(str)
                else:
                    pass
                
                str = ' {0} '.format(format(DOW_고가, ','))
                self.label_48.setStyleSheet('background-color: pink ; color: red')
                self.label_48.setText(str)                      

                plot4_dow_curve.setData(df_dow_graph['price'].tolist())

                if flag_checkBox_plot4_bband:

                    plot4_bollinger_upper_curve.setData(df_dow_graph['BBUpper'].tolist())
                    plot4_bollinger_middle_curve.setData(df_dow_graph['BBMiddle'].tolist())
                    plot4_bollinger_lower_curve.setData(df_dow_graph['BBLower'].tolist())
                else:
                    plot4_bollinger_upper_curve.clear()
                    plot4_bollinger_middle_curve.clear()
                    plot4_bollinger_lower_curve.clear()

                if flag_checkBox_plot4_mama:

                    plot4_mama_curve.setData(df_dow_graph['MAMA'].tolist())
                    plot4_fama_curve.setData(df_dow_graph['A_FAMA'].tolist())
                else:
                    plot4_mama_curve.clear()
                    plot4_fama_curve.clear()

                if flag_checkBox_plot4_oe:

                    plot4_oe_conv_curve.setData(df_dow_graph['OE_CONV'].tolist())
                    plot4_oe_base_curve.setData(df_dow_graph['OE_BASE'].tolist())
                else:
                    plot4_oe_conv_curve.clear()
                    plot4_oe_base_curve.clear()

            elif comboindex4 == 10:

                if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] == df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] == df_nasdaq_graph.at[ovc_x_idx, 'PSAR']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'], df_nasdaq_graph.at[ovc_x_idx, 'PSAR'], NASDAQ_호가순매수)
                    self.label_p4_2.setText(str)
                else:
                    pass
                
                if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] and df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] < df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p4_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'], df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p4_3.setText(str)
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] >= df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p4_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p4_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'MAMA'], df_nasdaq_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p4_4.setText(str)
                else:
                    pass

                plot4_ovc_jl_line.setValue(NASDAQ_전저)
                plot4_ovc_jh_line.setValue(NASDAQ_전고)
                plot4_ovc_close_line.setValue(NASDAQ_종가)
                plot4_ovc_open_line.setValue(NASDAQ_시가)
                plot4_ovc_pivot_line.setValue(NASDAQ_피봇)
                plot4_ovc_low_line.setValue(NASDAQ_저가)
                plot4_ovc_high_line.setValue(NASDAQ_고가)

                str = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_46.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_46.setText(str)

                tmp = self.label_47.text().split()[0]
                value = tmp.replace(',', '')                

                if NASDAQ_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: pink ; color: black')

                    self.label_47.setText(str)

                elif NASDAQ_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_47.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_48.setStyleSheet('background-color: pink ; color: red')
                self.label_48.setText(str) 

                plot4_nasdaq_curve.setData(df_nasdaq_graph['price'].tolist())

                if flag_checkBox_plot4_bband:

                    plot4_bollinger_upper_curve.setData(df_nasdaq_graph['BBUpper'].tolist())
                    plot4_bollinger_middle_curve.setData(df_nasdaq_graph['BBMiddle'].tolist())
                    plot4_bollinger_lower_curve.setData(df_nasdaq_graph['BBLower'].tolist())
                else:
                    plot4_bollinger_upper_curve.clear()
                    plot4_bollinger_middle_curve.clear()
                    plot4_bollinger_lower_curve.clear()

                if flag_checkBox_plot4_mama:

                    plot4_mama_curve.setData(df_nasdaq_graph['MAMA'].tolist())
                    plot4_fama_curve.setData(df_nasdaq_graph['A_FAMA'].tolist())
                else:
                    plot4_mama_curve.clear()
                    plot4_fama_curve.clear()

                if flag_checkBox_plot4_oe:

                    plot4_oe_conv_curve.setData(df_nasdaq_graph['OE_CONV'].tolist())
                    plot4_oe_base_curve.setData(df_nasdaq_graph['OE_BASE'].tolist())
                else:
                    plot4_oe_conv_curve.clear()
                    plot4_oe_base_curve.clear()

            elif comboindex4 == 11:

                if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] == df_wti_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_wti_graph.at[ovc_x_idx, 'PSAR'] == df_wti_graph.at[ovc_x_idx, 'PSAR']:

                    if df_wti_graph.at[ovc_x_idx, 'PSAR'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p4_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_wti_graph.at[ovc_x_idx, 'BBMiddle'], df_wti_graph.at[ovc_x_idx, 'PSAR'], WTI_호가순매수)
                    self.label_p4_2.setText(str)
                else:
                    pass
                
                if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] == df_wti_graph.at[ovc_x_idx, 'OE_CONV'] and df_wti_graph.at[ovc_x_idx, 'OE_BASE'] == df_wti_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] < df_wti_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p4_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p4_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'OE_CONV'], df_wti_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p4_3.setText(str)
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'MAMA'] == df_wti_graph.at[ovc_x_idx, 'MAMA'] and df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA']:

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] >= df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'MAMA'] < df_wti_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p4_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p4_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p4_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'MAMA'], df_wti_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p4_4.setText(str)
                else:
                    pass

                plot4_ovc_jl_line.setValue(WTI_전저)
                plot4_ovc_jh_line.setValue(WTI_전고)
                plot4_ovc_close_line.setValue(WTI_종가)
                plot4_ovc_open_line.setValue(WTI_시가)
                plot4_ovc_pivot_line.setValue(WTI_피봇)
                plot4_ovc_low_line.setValue(WTI_저가)
                plot4_ovc_high_line.setValue(WTI_고가)

                str = ' {0} '.format(format(WTI_저가, ','))
                self.label_46.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_46.setText(str)

                value = self.label_47.text().split()[0]     

                if WTI_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: pink ; color: black')

                    self.label_47.setText(str)

                elif WTI_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_47.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_47.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(WTI_고가, ','))
                self.label_48.setStyleSheet('background-color: pink ; color: red')
                self.label_48.setText(str) 

                plot4_wti_curve.setData(df_wti_graph['price'].tolist())

                if flag_checkBox_plot4_bband:

                    plot4_bollinger_upper_curve.setData(df_wti_graph['BBUpper'].tolist())
                    plot4_bollinger_middle_curve.setData(df_wti_graph['BBMiddle'].tolist())
                    plot4_bollinger_lower_curve.setData(df_wti_graph['BBLower'].tolist())
                else:
                    plot4_bollinger_upper_curve.clear()
                    plot4_bollinger_middle_curve.clear()
                    plot4_bollinger_lower_curve.clear()

                if flag_checkBox_plot4_mama:

                    plot4_mama_curve.setData(df_wti_graph['MAMA'].tolist())
                    plot4_fama_curve.setData(df_wti_graph['A_FAMA'].tolist())
                else:
                    plot4_mama_curve.clear()
                    plot4_fama_curve.clear()

                if flag_checkBox_plot4_oe:

                    plot4_oe_conv_curve.setData(df_wti_graph['OE_CONV'].tolist())
                    plot4_oe_base_curve.setData(df_wti_graph['OE_BASE'].tolist())
                else:
                    plot4_oe_conv_curve.clear()
                    plot4_oe_base_curve.clear()
            else:
                pass   

            # Plot5 그래프 그리기
            if comboindex5 == 0 and market_service:

                str = " {0:.0f} ".format(df_put_total_graph.at[ovc_x_idx, 'volume'])
                self.label_56.setStyleSheet('background-color: blue ; color: white')
                self.label_56.setText(str)
                
                str = " {0:.0f} ".format(df_call_total_graph.at[ovc_x_idx, 'volume'])
                self.label_58.setStyleSheet('background-color: red ; color: white')
                self.label_58.setText(str)

                plot5_call_volume_curve.setData(df_call_total_graph['volume'].tolist())
                plot5_put_volume_curve.setData(df_put_total_graph['volume'].tolist())

            elif comboindex5 == 1 and market_service:

                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, df_put_total_graph.at[ovc_x_idx, 'ms_hoga'], df_put_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_56.setStyleSheet('background-color: blue ; color: white')
                self.label_56.setText(str)
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, df_call_total_graph.at[ovc_x_idx, 'ms_hoga'], df_call_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_58.setStyleSheet('background-color: red ; color: white')
                self.label_58.setText(str)

                plot5_call_hoga_curve.setData(df_call_total_graph['hoga_remainder_ratio'].tolist())
                plot5_put_hoga_curve.setData(df_put_total_graph['hoga_remainder_ratio'].tolist())        

            elif comboindex5 == 2 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    self.label_57.setStyleSheet('background-color: red ; color: white')
                else:
                    self.label_57.setStyleSheet('background-color: blue ; color: white')

                self.label_57.setText(str)

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    plot5_fut_volume_plus_curve.setData(df_futures_graph['volume'].tolist())
                else:
                    plot5_fut_volume_minus_curve.setData(df_futures_graph['volume'].tolist())

            elif comboindex5 == 3 and market_service:

                str = " 본월물: {0:.2f}({1:.0f}/{2:.0f}), 차월물: {3:.2f}({4:.0f}/{5:.0f}), {6:.2f} ".format(\
                    df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'c_md_hoga'], \
                    df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'n_md_hoga'], \
                    fut_ccms_hoga_rr)

                if df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] > 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] > 1.0:
                    self.label_57.setStyleSheet('background-color: red ; color: white')
                elif df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] < 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] < 1.0:
                    self.label_57.setStyleSheet('background-color: blue ; color: white')
                else:
                    self.label_57.setStyleSheet('background-color: yellow ; color: black')

                self.label_57.setText(str)

                plot5_fut_choga_rr_curve.setData(df_futures_graph['c_hoga_remainder_ratio'].tolist())
                plot5_fut_nhoga_rr_curve.setData(df_futures_graph['n_hoga_remainder_ratio'].tolist())

            elif comboindex5 == 4 and market_service:

                plot5_fut_drate_curve.setData(df_futures_graph['drate'].tolist())
                plot5_dow_drate_curve.setData(df_dow_graph['drate'].tolist())
                plot5_call_drate_curve.setData(df_call_total_graph['drate'].tolist())
                plot5_put_drate_curve.setData(df_put_total_graph['drate'].tolist())

            elif comboindex5 == 5 and market_service:

                str = " {0:.2f}({1:.2f}) ".format(df_put_total_graph.at[ovc_x_idx, 'open_interest'], put_oi_init_percent)
                self.label_56.setStyleSheet('background-color: blue ; color: white')
                self.label_56.setText(str)
                '''
                if df_call_total_graph.at[ovc_x_idx, 'open_interest'] > call_oi_init_percent:

                    str = ' ▲ '
                    self.label_57.setStyleSheet('background-color: red ; color: white')
                    self.label_57.setText(str)

                elif df_put_total_graph.at[ovc_x_idx, 'open_interest'] > put_oi_init_percent:

                    str = ' ▼ '
                    self.label_57.setStyleSheet('background-color: blue ; color: white')
                    self.label_57.setText(str)
                else:
                    pass
                '''
                str = " {0:.2f}({1:.2f}) ".format(df_call_total_graph.at[ovc_x_idx, 'open_interest'], call_oi_init_percent)
                self.label_58.setStyleSheet('background-color: red ; color: white')
                self.label_58.setText(str)

                plot5_call_oi_curve.setData(df_call_total_graph['open_interest'].tolist())
                plot5_put_oi_curve.setData(df_put_total_graph['open_interest'].tolist())

            elif comboindex5 == 6 and market_service:

                if selected_opt_list != old_selected_opt_list:

                    # 전체 행사가 그래프 클리어
                    for index in range(option_pairs_count):
                        plot5_call_curve[index].clear()
                        plot5_put_curve[index].clear()                    
                else:
                    # 선택된 행사가 그래프 클리어
                    for index in range(option_pairs_count):

                        if index in selected_call:
                            plot5_call_curve[index].clear()
                        else:
                            pass

                        if index in selected_put:
                            plot5_put_curve[index].clear()
                        else:
                            pass

                plot5_center_val_curve.clear()

                plot5_mv_line[1].setValue(2.5)
                plot5_mv_line[2].setValue(3.5)
                plot5_mv_line[3].setValue(4.85)

                for index in range(option_pairs_count):

                    # 선택된 콜그래프 그리기
                    for i in range(len(selected_call)):

                        if index == selected_call[i]:
                            #plot5_call_curve[i].setData(call_plot_data[index])
                            plot5_call_curve[i].setData(df_call_graph[index]['price'].tolist())
                        else:
                            pass                    

                    # 선택된 풋그래프 그리기
                    for i in range(len(selected_put)):

                        if index == selected_put[i]:
                            #plot5_put_curve[i].setData(put_plot_data[index])
                            plot5_put_curve[i].setData(df_put_graph[index]['price'].tolist())
                        else:
                            pass
                        
                plot5_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
                plot5_center_val_line.setValue(CENTER_VAL)
                plot5_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

                # 중심가 그리기
                plot5_center_val_curve.setData(df_call_total_graph['centerval'].tolist())

                # 등가표시
                str = ' 등가: {0} '.format(atm_str)
                self.label_51.setText(str)

                str = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                self.label_52.setText(str)

                str = ' 중심가 하단: {0:.2f} '.format(CENTER_VAL - CENTERVAL_LOWER)
                self.label_53.setText(str)

                str = ' 중심가 상단: {0:.2f} '.format(CENTER_VAL + CENTERVAL_UPPER)
                self.label_54.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[atm_index, '대비'], (put_atm_value / df_put.at[atm_index, '시가'] - 1) * 100)
                self.label_56.setText(str)

                str = ' 중심가: {0:.2f} '.format(CENTER_VAL)
                self.label_57.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[atm_index, '대비'], (call_atm_value / df_call.at[atm_index, '시가'] - 1) * 100)
                self.label_58.setText(str)

            elif comboindex5 == 7:

                pass

            elif comboindex5 == 8:

                if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] == df_sp500_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_sp500_graph.at[ovc_x_idx, 'PSAR'] == df_sp500_graph.at[ovc_x_idx, 'PSAR']:

                    if df_sp500_graph.at[ovc_x_idx, 'PSAR'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_sp500_graph.at[ovc_x_idx, 'BBMiddle'], df_sp500_graph.at[ovc_x_idx, 'PSAR'], SP500_호가순매수)
                    self.label_p5_2.setText(str)
                else:
                    pass
                
                if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] == df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] and df_sp500_graph.at[ovc_x_idx, 'OE_BASE'] == df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] < df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p5_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'OE_CONV'], df_sp500_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p5_3.setText(str)
                else:
                    pass

                if df_sp500_graph.at[ovc_x_idx, 'MAMA'] == df_sp500_graph.at[ovc_x_idx, 'MAMA'] and df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA']:

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] >= df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'MAMA'] < df_sp500_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p5_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p5_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'MAMA'], df_sp500_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p5_4.setText(str)
                else:
                    pass

                plot5_ovc_jl_line.setValue(SP500_전저)
                plot5_ovc_jh_line.setValue(SP500_전고)
                plot5_ovc_close_line.setValue(SP500_종가)
                plot5_ovc_open_line.setValue(SP500_시가)
                plot5_ovc_pivot_line.setValue(SP500_피봇)
                plot5_ovc_low_line.setValue(SP500_저가)
                plot5_ovc_high_line.setValue(SP500_고가)

                # 고가선 이동시 중심가 3개 선도 같이 이동해야됨(중요)
                plot5_center_val_lower_line.setValue(SP500_고가)
                plot5_center_val_line.setValue(SP500_고가)
                plot5_center_val_upper_line.setValue(SP500_고가)
                plot5_ovc_high_line.setValue(SP500_고가)

                str = ' {0} '.format(format(SP500_저가, ','))
                self.label_56.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_56.setText(str)

                tmp = self.label_57.text().split()[0]
                value = tmp.replace(',', '')                

                if SP500_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: pink ; color: black')

                    self.label_57.setText(str)

                elif SP500_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_57.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(SP500_고가, ','))
                self.label_58.setStyleSheet('background-color: pink ; color: red')
                self.label_58.setText(str) 

                plot5_sp500_curve.setData(df_sp500_graph['price'].tolist())

                if flag_checkBox_plot5_bband:

                    plot5_bollinger_upper_curve.setData(df_sp500_graph['BBUpper'].tolist())
                    plot5_bollinger_middle_curve.setData(df_sp500_graph['BBMiddle'].tolist())
                    plot5_bollinger_lower_curve.setData(df_sp500_graph['BBLower'].tolist())
                else:
                    plot5_bollinger_upper_curve.clear()
                    plot5_bollinger_middle_curve.clear()
                    plot5_bollinger_lower_curve.clear()

                if flag_checkBox_plot5_mama:

                    plot5_mama_curve.setData(df_sp500_graph['MAMA'].tolist())
                    plot5_fama_curve.setData(df_sp500_graph['A_FAMA'].tolist())
                else:
                    plot5_mama_curve.clear()
                    plot5_fama_curve.clear()

                if flag_checkBox_plot5_oe:

                    plot5_oe_conv_curve.setData(df_sp500_graph['OE_CONV'].tolist())
                    plot5_oe_base_curve.setData(df_sp500_graph['OE_BASE'].tolist())
                else:
                    plot5_oe_conv_curve.clear()
                    plot5_oe_base_curve.clear() 

            elif comboindex5 == 9:

                if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] == df_dow_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_dow_graph.at[ovc_x_idx, 'PSAR'] == df_dow_graph.at[ovc_x_idx, 'PSAR']:

                    if df_dow_graph.at[ovc_x_idx, 'PSAR'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_dow_graph.at[ovc_x_idx, 'BBMiddle'], df_dow_graph.at[ovc_x_idx, 'PSAR'], DOW_호가순매수)
                    self.label_p5_2.setText(str)
                else:
                    pass
                
                if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] == df_dow_graph.at[ovc_x_idx, 'OE_CONV'] and df_dow_graph.at[ovc_x_idx, 'OE_BASE'] == df_dow_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] < df_dow_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p5_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'OE_CONV'], df_dow_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p5_3.setText(str)
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'MAMA'] == df_dow_graph.at[ovc_x_idx, 'MAMA'] and df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA']:

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] >= df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'MAMA'] < df_dow_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p5_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p5_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'MAMA'], df_dow_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p5_4.setText(str)
                else:
                    pass

                plot5_ovc_jl_line.setValue(DOW_전저)
                plot5_ovc_jh_line.setValue(DOW_전고)
                plot5_ovc_close_line.setValue(DOW_종가)
                plot5_ovc_open_line.setValue(DOW_시가)
                plot5_ovc_pivot_line.setValue(DOW_피봇)
                plot5_ovc_low_line.setValue(DOW_저가)
                plot5_ovc_high_line.setValue(DOW_고가)

                plot5_center_val_lower_line.setValue(DOW_고가)
                plot5_center_val_line.setValue(DOW_고가)
                plot5_center_val_upper_line.setValue(DOW_고가)
                plot5_ovc_high_line.setValue(DOW_고가)

                str = ' {0} '.format(format(DOW_저가, ','))
                self.label_56.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_56.setText(str)

                tmp = self.label_57.text().split()[0]
                value = tmp.replace(',', '')               

                if DOW_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: pink ; color: black')

                    self.label_57.setText(str)

                elif DOW_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_57.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(DOW_고가, ','))
                self.label_58.setStyleSheet('background-color: pink ; color: red')
                self.label_58.setText(str)                  

                plot5_dow_curve.setData(df_dow_graph['price'].tolist())

                if flag_checkBox_plot5_bband:

                    plot5_bollinger_upper_curve.setData(df_dow_graph['BBUpper'].tolist())
                    plot5_bollinger_middle_curve.setData(df_dow_graph['BBMiddle'].tolist())
                    plot5_bollinger_lower_curve.setData(df_dow_graph['BBLower'].tolist())
                else:
                    plot5_bollinger_upper_curve.clear()
                    plot5_bollinger_middle_curve.clear()
                    plot5_bollinger_lower_curve.clear()

                if flag_checkBox_plot5_mama:

                    plot5_mama_curve.setData(df_dow_graph['MAMA'].tolist())
                    plot5_fama_curve.setData(df_dow_graph['A_FAMA'].tolist())
                else:
                    plot5_mama_curve.clear()
                    plot5_fama_curve.clear()

                if flag_checkBox_plot5_oe:

                    plot5_oe_conv_curve.setData(df_dow_graph['OE_CONV'].tolist())
                    plot5_oe_base_curve.setData(df_dow_graph['OE_BASE'].tolist())
                else:
                    plot5_oe_conv_curve.clear()
                    plot5_oe_base_curve.clear()   

            elif comboindex5 == 10:

                if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] == df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] == df_nasdaq_graph.at[ovc_x_idx, 'PSAR']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'], df_nasdaq_graph.at[ovc_x_idx, 'PSAR'], NASDAQ_호가순매수)
                    self.label_p5_2.setText(str)
                else:
                    pass
                
                if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] and df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] < df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p5_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'], df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p5_3.setText(str)
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] >= df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p5_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p5_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'MAMA'], df_nasdaq_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p5_4.setText(str)
                else:
                    pass

                plot5_ovc_jl_line.setValue(NASDAQ_전저)
                plot5_ovc_jh_line.setValue(NASDAQ_전고)
                plot5_ovc_close_line.setValue(NASDAQ_종가)
                plot5_ovc_open_line.setValue(NASDAQ_시가)
                plot5_ovc_pivot_line.setValue(NASDAQ_피봇)
                plot5_ovc_low_line.setValue(NASDAQ_저가)
                plot5_ovc_high_line.setValue(NASDAQ_고가)

                plot5_center_val_lower_line.setValue(NASDAQ_고가)
                plot5_center_val_line.setValue(NASDAQ_고가)
                plot5_center_val_upper_line.setValue(NASDAQ_고가)
                plot5_ovc_high_line.setValue(NASDAQ_고가)

                str = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_56.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_56.setText(str)

                tmp = self.label_57.text().split()[0]
                value = tmp.replace(',', '')                

                if NASDAQ_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: pink ; color: black')

                    self.label_57.setText(str)

                elif NASDAQ_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_57.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_58.setStyleSheet('background-color: pink ; color: red')
                self.label_58.setText(str)    

                plot5_nasdaq_curve.setData(df_nasdaq_graph['price'].tolist())

                if flag_checkBox_plot5_bband:

                    plot5_bollinger_upper_curve.setData(df_nasdaq_graph['BBUpper'].tolist())
                    plot5_bollinger_middle_curve.setData(df_nasdaq_graph['BBMiddle'].tolist())
                    plot5_bollinger_lower_curve.setData(df_nasdaq_graph['BBLower'].tolist())
                else:
                    plot5_bollinger_upper_curve.clear()
                    plot5_bollinger_middle_curve.clear()
                    plot5_bollinger_lower_curve.clear()

                if flag_checkBox_plot5_mama:

                    plot5_mama_curve.setData(df_nasdaq_graph['MAMA'].tolist())
                    plot5_fama_curve.setData(df_nasdaq_graph['A_FAMA'].tolist())
                else:
                    plot5_mama_curve.clear()
                    plot5_fama_curve.clear()

                if flag_checkBox_plot5_oe:

                    plot5_oe_conv_curve.setData(df_nasdaq_graph['OE_CONV'].tolist())
                    plot5_oe_base_curve.setData(df_nasdaq_graph['OE_BASE'].tolist())
                else:
                    plot5_oe_conv_curve.clear()
                    plot5_oe_base_curve.clear()  

            elif comboindex5 == 11:

                if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] == df_wti_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                

                if df_wti_graph.at[ovc_x_idx, 'PSAR'] == df_wti_graph.at[ovc_x_idx, 'PSAR']:

                    if df_wti_graph.at[ovc_x_idx, 'PSAR'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p5_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_wti_graph.at[ovc_x_idx, 'BBMiddle'], df_wti_graph.at[ovc_x_idx, 'PSAR'], WTI_호가순매수)
                    self.label_p5_2.setText(str)
                else:
                    pass
                
                if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] == df_wti_graph.at[ovc_x_idx, 'OE_CONV'] and df_wti_graph.at[ovc_x_idx, 'OE_BASE'] == df_wti_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] < df_wti_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p5_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p5_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'OE_CONV'], df_wti_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p5_3.setText(str)
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'MAMA'] == df_wti_graph.at[ovc_x_idx, 'MAMA'] and df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA']:

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] >= df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'MAMA'] < df_wti_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p5_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p5_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p5_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'MAMA'], df_wti_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p5_4.setText(str)
                else:
                    pass

                plot5_ovc_jl_line.setValue(WTI_전저)
                plot5_ovc_jh_line.setValue(WTI_전고)
                plot5_ovc_close_line.setValue(WTI_종가)
                plot5_ovc_open_line.setValue(WTI_시가)
                plot5_ovc_pivot_line.setValue(WTI_피봇)
                plot5_ovc_low_line.setValue(WTI_저가)
                plot5_ovc_high_line.setValue(WTI_고가)

                plot5_center_val_lower_line.setValue(WTI_고가)
                plot5_center_val_line.setValue(WTI_고가)
                plot5_center_val_upper_line.setValue(WTI_고가)
                plot5_ovc_high_line.setValue(WTI_고가)

                str = ' {0} '.format(format(WTI_저가, ','))
                self.label_56.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_56.setText(str)

                value = self.label_57.text().split()[0]             

                if WTI_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: pink ; color: black')

                    self.label_57.setText(str)

                elif WTI_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_57.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_57.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(WTI_고가, ','))
                self.label_58.setStyleSheet('background-color: pink ; color: red')
                self.label_58.setText(str)    

                plot5_wti_curve.setData(df_wti_graph['price'].tolist())

                if flag_checkBox_plot5_bband:

                    plot5_bollinger_upper_curve.setData(df_wti_graph['BBUpper'].tolist())
                    plot5_bollinger_middle_curve.setData(df_wti_graph['BBMiddle'].tolist())
                    plot5_bollinger_lower_curve.setData(df_wti_graph['BBLower'].tolist())
                else:
                    plot5_bollinger_upper_curve.clear()
                    plot5_bollinger_middle_curve.clear()
                    plot5_bollinger_lower_curve.clear()

                if flag_checkBox_plot5_mama:

                    plot5_mama_curve.setData(df_wti_graph['MAMA'].tolist())
                    plot5_fama_curve.setData(df_wti_graph['A_FAMA'].tolist())
                else:
                    plot5_mama_curve.clear()
                    plot5_fama_curve.clear()

                if flag_checkBox_plot5_oe:

                    plot5_oe_conv_curve.setData(df_wti_graph['OE_CONV'].tolist())
                    plot5_oe_base_curve.setData(df_wti_graph['OE_BASE'].tolist())
                else:
                    plot5_oe_conv_curve.clear()
                    plot5_oe_base_curve.clear() 
            else:
                pass

            # Plot6 그래프 그리기
            if comboindex6 == 0 and market_service:

                str = " {0:.0f} ".format(df_put_total_graph.at[ovc_x_idx, 'volume'])
                self.label_66.setStyleSheet('background-color: blue ; color: white')
                self.label_66.setText(str)
                
                str = " {0:.0f} ".format(df_call_total_graph.at[ovc_x_idx, 'volume'])
                self.label_68.setStyleSheet('background-color: red ; color: white')
                self.label_68.setText(str)

                plot6_call_volume_curve.setData(df_call_total_graph['volume'].tolist())
                plot6_put_volume_curve.setData(df_put_total_graph['volume'].tolist())

            elif comboindex6 == 1 and market_service:

                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(풋잔량비, df_put_total_graph.at[ovc_x_idx, 'ms_hoga'], df_put_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_66.setStyleSheet('background-color: blue ; color: white')
                self.label_66.setText(str)
                
                str = " {0:.2f}({1:.0f}/{2:.0f}) ".format(콜잔량비, df_call_total_graph.at[ovc_x_idx, 'ms_hoga'], df_call_total_graph.at[ovc_x_idx, 'md_hoga'])
                self.label_68.setStyleSheet('background-color: red ; color: white')
                self.label_68.setText(str)

                plot6_call_hoga_curve.setData(df_call_total_graph['hoga_remainder_ratio'].tolist())
                plot6_put_hoga_curve.setData(df_put_total_graph['hoga_remainder_ratio'].tolist())        

            elif comboindex6 == 2 and market_service:

                str = " {0:.0f} ".format(df_futures_graph.at[ovc_x_idx, 'volume'])

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    self.label_67.setStyleSheet('background-color: red ; color: white')
                else:
                    self.label_67.setStyleSheet('background-color: blue ; color: white')

                self.label_67.setText(str)

                if df_futures_graph.at[ovc_x_idx, 'volume'] > 0:
                    plot6_fut_volume_plus_curve.setData(df_futures_graph['volume'].tolist())
                else:
                    plot6_fut_volume_minus_curve.setData(df_futures_graph['volume'].tolist())

            elif comboindex6 == 3 and market_service:

                str = " 본월물: {0:.2f}({1:.0f}/{2:.0f}), 차월물: {3:.2f}({4:.0f}/{5:.0f}), {6:.2f} ".format(\
                    df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'c_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'c_md_hoga'], \
                    df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'], df_futures_graph.at[ovc_x_idx, 'n_ms_hoga'], df_futures_graph.at[ovc_x_idx, 'n_md_hoga'], \
                    fut_ccms_hoga_rr)

                if df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] > 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] > 1.0:
                    self.label_67.setStyleSheet('background-color: red ; color: white')
                elif df_futures_graph.at[ovc_x_idx, 'c_hoga_remainder_ratio'] < 1.0 and df_futures_graph.at[ovc_x_idx, 'n_hoga_remainder_ratio'] < 1.0:
                    self.label_67.setStyleSheet('background-color: blue ; color: white')
                else:
                    self.label_67.setStyleSheet('background-color: yellow ; color: black')

                self.label_67.setText(str)

                plot6_fut_choga_rr_curve.setData(df_futures_graph['c_hoga_remainder_ratio'].tolist())
                plot6_fut_nhoga_rr_curve.setData(df_futures_graph['n_hoga_remainder_ratio'].tolist())

            elif comboindex6 == 4 and market_service:

                plot6_fut_drate_curve.setData(df_futures_graph['drate'].tolist())
                plot6_dow_drate_curve.setData(df_dow_graph['drate'].tolist())
                plot6_call_drate_curve.setData(df_call_total_graph['drate'].tolist())
                plot6_put_drate_curve.setData(df_put_total_graph['drate'].tolist())

            elif comboindex6 == 5 and market_service:

                str = " {0:.2f}({1:.2f}) ".format(df_put_total_graph.at[ovc_x_idx, 'open_interest'], put_oi_init_percent)
                self.label_66.setStyleSheet('background-color: blue ; color: white')
                self.label_66.setText(str)
                '''
                if df_call_total_graph.at[ovc_x_idx, 'open_interest'] > call_oi_init_percent:

                    str = ' ▲ '
                    self.label_67.setStyleSheet('background-color: red ; color: white')
                    self.label_67.setText(str)

                elif df_put_total_graph.at[ovc_x_idx, 'open_interest'] > put_oi_init_percent:

                    str = ' ▼ '
                    self.label_67.setStyleSheet('background-color: blue ; color: white')
                    self.label_67.setText(str)
                else:
                    pass
                '''
                str = " {0:.2f}({1:.2f}) ".format(df_call_total_graph.at[ovc_x_idx, 'open_interest'], call_oi_init_percent)
                self.label_68.setStyleSheet('background-color: red ; color: white')
                self.label_68.setText(str)

                plot6_call_oi_curve.setData(df_call_total_graph['open_interest'].tolist())
                plot6_put_oi_curve.setData(df_put_total_graph['open_interest'].tolist())

            elif comboindex6 == 6 and market_service:

                if selected_opt_list != old_selected_opt_list:

                    # 전체 행사가 그래프 클리어
                    for index in range(option_pairs_count):
                        plot6_call_curve[index].clear()
                        plot6_put_curve[index].clear()
                else:
                    # 선택된 행사가 그래프 클리어
                    for index in range(option_pairs_count):

                        if index in selected_call:
                            plot6_call_curve[index].clear()
                        else:
                            pass

                        if index in selected_put:
                            plot6_put_curve[index].clear()
                        else:
                            pass

                plot6_center_val_curve.clear()

                plot6_mv_line[1].setValue(2.5)
                plot6_mv_line[2].setValue(3.5)
                plot6_mv_line[3].setValue(4.85)

                for index in range(option_pairs_count):

                    # 선택된 콜그래프 그리기
                    for i in range(len(selected_call)):

                        if index == selected_call[i]:
                            #plot6_call_curve[i].setData(call_plot_data[index])
                            plot6_call_curve[i].setData(df_call_graph[index]['price'].tolist())
                        else:
                            pass                    

                    # 선택된 풋그래프 그리기
                    for i in range(len(selected_put)):

                        if index == selected_put[i]:
                            #plot6_put_curve[i].setData(put_plot_data[index])
                            plot6_put_curve[i].setData(df_put_graph[index]['price'].tolist())
                        else:
                            pass
                        
                plot6_center_val_lower_line.setValue(CENTER_VAL - CENTERVAL_LOWER)
                plot6_center_val_line.setValue(CENTER_VAL)
                plot6_center_val_upper_line.setValue(CENTER_VAL + CENTERVAL_UPPER)

                # 중심가 그리기
                plot6_center_val_curve.setData(df_call_total_graph['centerval'].tolist())

                # 등가표시
                str = ' 등가: {0} '.format(atm_str)
                self.label_61.setText(str)

                str = ' 시작 중심가: {0:.2f} '.format(INIT_CENTER_VAL)
                self.label_62.setText(str)

                str = ' 중심가 하단: {0:.2f} '.format(CENTER_VAL - CENTERVAL_LOWER)
                self.label_63.setText(str)

                str = ' 중심가 상단: {0:.2f} '.format(CENTER_VAL + CENTERVAL_UPPER)
                self.label_64.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(put_atm_value, df_put.at[atm_index, '대비'], (put_atm_value / df_put.at[atm_index, '시가'] - 1) * 100)
                self.label_66.setText(str)

                str = ' 중심가: {0:.2f} '.format(CENTER_VAL)
                self.label_67.setText(str)

                str = ' {0:.2f}({1:.2f}, {2:.2f}%) '.format(call_atm_value, df_call.at[atm_index, '대비'], (call_atm_value / df_call.at[atm_index, '시가'] - 1) * 100)
                self.label_68.setText(str)

            elif comboindex6 == 7:

                pass

            elif comboindex6 == 8:

                if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] == df_sp500_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_sp500_graph.at[ovc_x_idx, 'BBMiddle'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass                 

                if df_sp500_graph.at[ovc_x_idx, 'PSAR'] == df_sp500_graph.at[ovc_x_idx, 'PSAR']:

                    if df_sp500_graph.at[ovc_x_idx, 'PSAR'] >= df_sp500_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_sp500_graph.at[ovc_x_idx, 'BBMiddle'], df_sp500_graph.at[ovc_x_idx, 'PSAR'], SP500_호가순매수)
                    self.label_p6_2.setText(str)
                else:
                    pass
                
                if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] == df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] and df_sp500_graph.at[ovc_x_idx, 'OE_BASE'] == df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_sp500_graph.at[ovc_x_idx, 'OE_CONV'] < df_sp500_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p6_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'OE_CONV'], df_sp500_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p6_3.setText(str)
                else:
                    pass

                if df_sp500_graph.at[ovc_x_idx, 'MAMA'] == df_sp500_graph.at[ovc_x_idx, 'MAMA'] and df_sp500_graph.at[ovc_x_idx, 'FAMA'] == df_sp500_graph.at[ovc_x_idx, 'FAMA']:

                    if df_sp500_graph.at[ovc_x_idx, 'FAMA'] >= df_sp500_graph.at[ovc_x_idx, 'BBLower']:

                        if df_sp500_graph.at[ovc_x_idx, 'MAMA'] < df_sp500_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p6_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p6_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_sp500_graph.at[ovc_x_idx, 'MAMA'], df_sp500_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p6_4.setText(str)
                else:
                    pass

                plot6_ovc_jl_line.setValue(SP500_전저)
                plot6_ovc_jh_line.setValue(SP500_전고)
                plot6_ovc_close_line.setValue(SP500_종가)
                plot6_ovc_open_line.setValue(SP500_시가)
                plot6_ovc_pivot_line.setValue(SP500_피봇)
                plot6_ovc_low_line.setValue(SP500_저가)
                plot6_ovc_high_line.setValue(SP500_고가)

                # 고가선 이동시 중심가 3개 선도 같이 이동해야됨(중요)
                plot6_center_val_lower_line.setValue(SP500_고가)
                plot6_center_val_line.setValue(SP500_고가)
                plot6_center_val_upper_line.setValue(SP500_고가)
                plot6_ovc_high_line.setValue(SP500_고가)

                str = ' {0} '.format(format(SP500_저가, ','))
                self.label_66.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_66.setText(str)

                tmp = self.label_67.text().split()[0]
                value = tmp.replace(',', '')                

                if SP500_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: pink ; color: black')

                    self.label_67.setText(str)

                elif SP500_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(SP500_현재가, ','), SP500_전일대비, SP500_등락율, format(SP500_진폭, ','))

                    if SP500_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: red')
                    elif SP500_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_67.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(SP500_고가, ','))
                self.label_68.setStyleSheet('background-color: pink ; color: red')
                self.label_68.setText(str) 

                plot6_sp500_curve.setData(df_sp500_graph['price'].tolist())

                if flag_checkBox_plot6_bband:

                    plot6_bollinger_upper_curve.setData(df_sp500_graph['BBUpper'].tolist())
                    plot6_bollinger_middle_curve.setData(df_sp500_graph['BBMiddle'].tolist())
                    plot6_bollinger_lower_curve.setData(df_sp500_graph['BBLower'].tolist())
                else:
                    plot6_bollinger_upper_curve.clear()
                    plot6_bollinger_middle_curve.clear()
                    plot6_bollinger_lower_curve.clear()

                if flag_checkBox_plot6_mama:

                    plot6_mama_curve.setData(df_sp500_graph['MAMA'].tolist())
                    plot6_fama_curve.setData(df_sp500_graph['A_FAMA'].tolist())
                else:
                    plot6_mama_curve.clear()
                    plot6_fama_curve.clear()

                if flag_checkBox_plot6_oe:

                    plot6_oe_conv_curve.setData(df_sp500_graph['OE_CONV'].tolist())
                    plot6_oe_base_curve.setData(df_sp500_graph['OE_BASE'].tolist())
                else:
                    plot6_oe_conv_curve.clear()
                    plot6_oe_base_curve.clear()  

            elif comboindex6 == 9:

                if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] == df_dow_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_dow_graph.at[ovc_x_idx, 'BBMiddle'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'PSAR'] == df_dow_graph.at[ovc_x_idx, 'PSAR']:

                    if df_dow_graph.at[ovc_x_idx, 'PSAR'] >= df_dow_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_dow_graph.at[ovc_x_idx, 'BBMiddle'], df_dow_graph.at[ovc_x_idx, 'PSAR'], DOW_호가순매수)
                    self.label_p6_2.setText(str)
                else:
                    pass
                
                if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] == df_dow_graph.at[ovc_x_idx, 'OE_CONV'] and df_dow_graph.at[ovc_x_idx, 'OE_BASE'] == df_dow_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_dow_graph.at[ovc_x_idx, 'OE_CONV'] < df_dow_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p6_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'OE_CONV'], df_dow_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p6_3.setText(str)
                else:
                    pass

                if df_dow_graph.at[ovc_x_idx, 'MAMA'] == df_dow_graph.at[ovc_x_idx, 'MAMA'] and df_dow_graph.at[ovc_x_idx, 'FAMA'] == df_dow_graph.at[ovc_x_idx, 'FAMA']:

                    if df_dow_graph.at[ovc_x_idx, 'FAMA'] >= df_dow_graph.at[ovc_x_idx, 'BBLower']:

                        if df_dow_graph.at[ovc_x_idx, 'MAMA'] < df_dow_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p6_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p6_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_dow_graph.at[ovc_x_idx, 'MAMA'], df_dow_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p6_4.setText(str)
                else:
                    pass

                plot6_ovc_jl_line.setValue(DOW_전저)
                plot6_ovc_jh_line.setValue(DOW_전고)
                plot6_ovc_close_line.setValue(DOW_종가)
                plot6_ovc_open_line.setValue(DOW_시가)
                plot6_ovc_pivot_line.setValue(DOW_피봇)
                plot6_ovc_low_line.setValue(DOW_저가)
                plot6_ovc_high_line.setValue(DOW_고가) 

                plot6_center_val_lower_line.setValue(DOW_고가)
                plot6_center_val_line.setValue(DOW_고가)
                plot6_center_val_upper_line.setValue(DOW_고가)
                plot6_ovc_high_line.setValue(DOW_고가)

                str = ' {0} '.format(format(DOW_저가, ','))
                self.label_66.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_66.setText(str)

                tmp = self.label_67.text().split()[0]
                value = tmp.replace(',', '')               

                if DOW_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: pink ; color: black')

                    self.label_67.setText(str)

                elif DOW_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(DOW_현재가, ','), format(DOW_전일대비, ','), DOW_등락율, format(DOW_진폭, ','))

                    if DOW_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: red')
                    elif DOW_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_67.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(DOW_고가, ','))
                self.label_68.setStyleSheet('background-color: pink ; color: red')
                self.label_68.setText(str)                  

                plot6_dow_curve.setData(df_dow_graph['price'].tolist())

                if flag_checkBox_plot6_bband:

                    plot6_bollinger_upper_curve.setData(df_dow_graph['BBUpper'].tolist())
                    plot6_bollinger_middle_curve.setData(df_dow_graph['BBMiddle'].tolist())
                    plot6_bollinger_lower_curve.setData(df_dow_graph['BBLower'].tolist())
                else:
                    plot6_bollinger_upper_curve.clear()
                    plot6_bollinger_middle_curve.clear()
                    plot6_bollinger_lower_curve.clear()

                if flag_checkBox_plot6_mama:

                    plot6_mama_curve.setData(df_dow_graph['MAMA'].tolist())
                    plot6_fama_curve.setData(df_dow_graph['A_FAMA'].tolist())
                else:
                    plot6_mama_curve.clear()
                    plot6_fama_curve.clear()

                if flag_checkBox_plot6_oe:

                    plot6_oe_conv_curve.setData(df_dow_graph['OE_CONV'].tolist())
                    plot6_oe_base_curve.setData(df_dow_graph['OE_BASE'].tolist())
                else:
                    plot6_oe_conv_curve.clear()
                    plot6_oe_base_curve.clear()    

            elif comboindex6 == 10:

                if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] == df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] == df_nasdaq_graph.at[ovc_x_idx, 'PSAR']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'PSAR'] >= df_nasdaq_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'BBMiddle'], df_nasdaq_graph.at[ovc_x_idx, 'PSAR'], NASDAQ_호가순매수)
                    self.label_p6_2.setText(str)
                else:
                    pass
                
                if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] and df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'] == df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'] < df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p6_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'OE_CONV'], df_nasdaq_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p6_3.setText(str)
                else:
                    pass

                if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] and df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] == df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:

                    if df_nasdaq_graph.at[ovc_x_idx, 'FAMA'] >= df_nasdaq_graph.at[ovc_x_idx, 'BBLower']:

                        if df_nasdaq_graph.at[ovc_x_idx, 'MAMA'] < df_nasdaq_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p6_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p6_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_nasdaq_graph.at[ovc_x_idx, 'MAMA'], df_nasdaq_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p6_4.setText(str)
                else:
                    pass

                plot6_ovc_jl_line.setValue(NASDAQ_전저)
                plot6_ovc_jh_line.setValue(NASDAQ_전고)
                plot6_ovc_close_line.setValue(NASDAQ_종가)
                plot6_ovc_open_line.setValue(NASDAQ_시가)
                plot6_ovc_pivot_line.setValue(NASDAQ_피봇)
                plot6_ovc_low_line.setValue(NASDAQ_저가)
                plot6_ovc_high_line.setValue(NASDAQ_고가)

                plot6_center_val_lower_line.setValue(NASDAQ_고가)
                plot6_center_val_line.setValue(NASDAQ_고가)
                plot6_center_val_upper_line.setValue(NASDAQ_고가)
                plot6_ovc_high_line.setValue(NASDAQ_고가)

                str = ' {0} '.format(format(NASDAQ_저가, ','))
                self.label_66.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_66.setText(str)

                tmp = self.label_67.text().split()[0]
                value = tmp.replace(',', '')                

                if NASDAQ_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: pink ; color: black')

                    self.label_67.setText(str)

                elif NASDAQ_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(format(NASDAQ_현재가, ','), format(NASDAQ_전일대비, ','), NASDAQ_등락율, format(NASDAQ_진폭, ','))

                    if NASDAQ_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: red')
                    elif NASDAQ_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_67.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(NASDAQ_고가, ','))
                self.label_68.setStyleSheet('background-color: pink ; color: red')
                self.label_68.setText(str)    

                plot6_nasdaq_curve.setData(df_nasdaq_graph['price'].tolist())

                if flag_checkBox_plot6_bband:

                    plot6_bollinger_upper_curve.setData(df_nasdaq_graph['BBUpper'].tolist())
                    plot6_bollinger_middle_curve.setData(df_nasdaq_graph['BBMiddle'].tolist())
                    plot6_bollinger_lower_curve.setData(df_nasdaq_graph['BBLower'].tolist())
                else:
                    plot6_bollinger_upper_curve.clear()
                    plot6_bollinger_middle_curve.clear()
                    plot6_bollinger_lower_curve.clear()

                if flag_checkBox_plot6_mama:

                    plot6_mama_curve.setData(df_nasdaq_graph['MAMA'].tolist())
                    plot6_fama_curve.setData(df_nasdaq_graph['A_FAMA'].tolist())
                else:
                    plot6_mama_curve.clear()
                    plot6_fama_curve.clear()

                if flag_checkBox_plot6_oe:

                    plot6_oe_conv_curve.setData(df_nasdaq_graph['OE_CONV'].tolist())
                    plot6_oe_base_curve.setData(df_nasdaq_graph['OE_BASE'].tolist())
                else:
                    plot6_oe_conv_curve.clear()
                    plot6_oe_base_curve.clear()  

            elif comboindex6 == 11:

                if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] == df_wti_graph.at[ovc_x_idx, 'BBMiddle']:

                    if df_wti_graph.at[ovc_x_idx, 'BBMiddle'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_1.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_1.setStyleSheet('background-color: red ; color: white')
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'PSAR'] == df_wti_graph.at[ovc_x_idx, 'PSAR']:

                    if df_wti_graph.at[ovc_x_idx, 'PSAR'] >= df_wti_graph.at[ovc_x_idx, 'price']:
                        self.label_p6_2.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_2.setStyleSheet('background-color: red ; color: white')

                    str = " BB Mid: {0:.2f}\n PSAR: {1:.2f}\n HG: {2:.0f} ".format(df_wti_graph.at[ovc_x_idx, 'BBMiddle'], df_wti_graph.at[ovc_x_idx, 'PSAR'], WTI_호가순매수)
                    self.label_p6_2.setText(str)
                else:
                    pass
                
                if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] == df_wti_graph.at[ovc_x_idx, 'OE_CONV'] and df_wti_graph.at[ovc_x_idx, 'OE_BASE'] == df_wti_graph.at[ovc_x_idx, 'OE_BASE']:

                    if df_wti_graph.at[ovc_x_idx, 'OE_CONV'] < df_wti_graph.at[ovc_x_idx, 'OE_BASE']:
                        self.label_p6_3.setStyleSheet('background-color: blue ; color: white')
                    else:
                        self.label_p6_3.setStyleSheet('background-color: red ; color: white')

                    str = " OE_CONV: {0:.2f}\n OE_BASE: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'OE_CONV'], df_wti_graph.at[ovc_x_idx, 'OE_BASE'])
                    self.label_p6_3.setText(str)
                else:
                    pass

                if df_wti_graph.at[ovc_x_idx, 'MAMA'] == df_wti_graph.at[ovc_x_idx, 'MAMA'] and df_wti_graph.at[ovc_x_idx, 'FAMA'] == df_wti_graph.at[ovc_x_idx, 'FAMA']:

                    if df_wti_graph.at[ovc_x_idx, 'FAMA'] >= df_wti_graph.at[ovc_x_idx, 'BBLower']:

                        if df_wti_graph.at[ovc_x_idx, 'MAMA'] < df_wti_graph.at[ovc_x_idx, 'FAMA']:
                            self.label_p6_4.setStyleSheet('background-color: blue ; color: white')
                        else:
                            self.label_p6_4.setStyleSheet('background-color: red ; color: white')
                    else:
                        self.label_p6_4.setStyleSheet('background-color: lime ; color: black')

                    str = " MAMA: {0:.2f}\n FAMA: {1:.2f} ".format(df_wti_graph.at[ovc_x_idx, 'MAMA'], df_wti_graph.at[ovc_x_idx, 'FAMA'])
                    self.label_p6_4.setText(str)
                else:
                    pass

                plot6_ovc_jl_line.setValue(WTI_전저)
                plot6_ovc_jh_line.setValue(WTI_전고)
                plot6_ovc_close_line.setValue(WTI_종가)
                plot6_ovc_open_line.setValue(WTI_시가)
                plot6_ovc_pivot_line.setValue(WTI_피봇)
                plot6_ovc_low_line.setValue(WTI_저가)
                plot6_ovc_high_line.setValue(WTI_고가)

                plot6_center_val_lower_line.setValue(WTI_고가)
                plot6_center_val_line.setValue(WTI_고가)
                plot6_center_val_upper_line.setValue(WTI_고가)
                plot6_ovc_high_line.setValue(WTI_고가)

                str = ' {0} '.format(format(WTI_저가, ','))
                self.label_66.setStyleSheet('background-color: skyblue ; color: blue')
                self.label_66.setText(str)

                value = self.label_67.text().split()[0]             

                if WTI_현재가 > float(value):

                    str = " {0} ▲ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: pink ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: pink ; color: black')

                    self.label_67.setText(str)

                elif WTI_현재가 < float(value):

                    str = " {0} ▼ ({1}, {2:0.1f}%, {3}) ". \
                        format(WTI_현재가, WTI_전일대비, WTI_등락율, WTI_진폭)

                    if WTI_전일대비 > 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: red')
                    elif WTI_전일대비 < 0:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: blue')
                    else:
                        self.label_67.setStyleSheet('background-color: skyblue ; color: black')

                    self.label_67.setText(str)
                else:
                    pass

                str = ' {0} '.format(format(WTI_고가, ','))
                self.label_68.setStyleSheet('background-color: pink ; color: red')
                self.label_68.setText(str)    

                plot6_wti_curve.setData(df_wti_graph['price'].tolist())

                if flag_checkBox_plot6_bband:

                    plot6_bollinger_upper_curve.setData(df_wti_graph['BBUpper'].tolist())
                    plot6_bollinger_middle_curve.setData(df_wti_graph['BBMiddle'].tolist())
                    plot6_bollinger_lower_curve.setData(df_wti_graph['BBLower'].tolist())
                else:
                    plot6_bollinger_upper_curve.clear()
                    plot6_bollinger_middle_curve.clear()
                    plot6_bollinger_lower_curve.clear()

                if flag_checkBox_plot6_mama:

                    plot6_mama_curve.setData(df_wti_graph['MAMA'].tolist())
                    plot6_fama_curve.setData(df_wti_graph['A_FAMA'].tolist())
                else:
                    plot6_mama_curve.clear()
                    plot6_fama_curve.clear()

                if flag_checkBox_plot6_oe:

                    plot6_oe_conv_curve.setData(df_wti_graph['OE_CONV'].tolist())
                    plot6_oe_base_curve.setData(df_wti_graph['OE_BASE'].tolist())
                else:
                    plot6_oe_conv_curve.clear()
                    plot6_oe_base_curve.clear()   
            else:
                pass
        else:
            pass

        global bc_ui_update_time

        bc_ui_update_time = (timeit.default_timer() - start_time) * 1000        
        
        str = '[{0:02d}:{1:02d}:{2:02d}] BigChart UI Update : {3:.2f} ms...\r'.format(\
            dt.hour, dt.minute, dt.second, bc_ui_update_time)
        print(str)

    def closeEvent(self,event):

        global bc_ui_update_time

        화면_BigChart.bigchart = False
        
        if self.bigchart_update_worker.isRunning():

            self.bigchart_update_worker.terminate()
            bc_ui_update_time = 0
        else:
            pass

########################################################################################################################
# 메인
########################################################################################################################
if TARGET_MONTH_SELECT == 1:
    ui_type = "mymoneybot_cm.ui"
elif TARGET_MONTH_SELECT == 2:
    ui_type = "mymoneybot_nm.ui"
else:
    ui_type = "mymoneybot_man.ui"

Ui_MainWindow, QtBaseClass_MainWindow = uic.loadUiType(UI_DIR+ui_type)

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)
        QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
        self.setWindowTitle("SkyBot ver1.0")
        '''
        self.plugins = CPluginManager.plugin_loader()
        menuitems = self.plugins.keys()
        menu = self.menubar.addMenu('&플러그인로봇')
        for item in menuitems:
            icon = QIcon()
            icon.addPixmap(QPixmap("PNG/approval.png"), QIcon.Normal, QIcon.Off)
            entry = menu.addAction(icon, item)
            entry.setObjectName(item)
        '''
        self.시작시각 = datetime.datetime.now()

        self.robots = []

        self.dialog = dict()

        self.portfolio_columns = ['종목코드', '종목명', 'TAG', '매수가', '수량', '매수일']
        self.robot_columns = ['Robot타입', 'Robot명', 'RobotID', '실행상태', '포트수', '포트폴리오']

        self.model = PandasModel()
        self.tableView_robot.setModel(self.model)
        self.tableView_robot.setSelectionBehavior(QTableView.SelectRows)
        self.tableView_robot.setSelectionMode(QTableView.SingleSelection)
        self.tableView_robot.pressed.connect(self.RobotCurrentIndex)
        self.tableView_robot_current_index = None

        self.portfolio_model = PandasModel()
        self.tableView_portfolio.setModel(self.portfolio_model)
        self.tableView_portfolio.setSelectionBehavior(QTableView.SelectRows)
        self.tableView_portfolio.setSelectionMode(QTableView.SingleSelection)
        self.tableView_portfolio.pressed.connect(self.PortfolioCurrentIndex)
        self.tableView_portfolio_current_index = None

        self.portfolio_model.update((DataFrame(columns=self.portfolio_columns)))

        self.주문제한 = 0
        self.조회제한 = 0
        self.금일백업작업중 = False
        self.종목선정작업중 = False

        self.id = ''
        self.계좌번호 = None
        self.거래비밀번호 = None
        self.system_server_time_gap = 0

        # AxtiveX 설정
        # self.connection = XASession(parent=self)
        self.connection = None
        self.XQ_t0167 = t0167(parent=self)

    def OnQApplicationStarted(self):
        self.clock = QtCore.QTimer()
        self.clock.timeout.connect(self.OnClockTick)
        self.clock.start(1000)

        try:
            with open('mymoneybot.robot', 'rb') as handle:
                self.robots = pickle.load(handle)
        except Exception as e:
            pass

        self.RobotView()

        #TODO:자동로그인
        self.MyLogin()

    def OnClockTick(self):

        current = datetime.datetime.now()
        current_str = current.strftime('%H:%M:%S')

        if current.second == 30: # 매 30초(1분 주기)
            try:
                if self.connection is not None:
                    msg = '오프라인'
                    if self.connection.IsConnected():
                        msg = "온라인"

                        # 현재시간 조회
                        self.XQ_t0167.Query()
                    else:
                        msg = "오프라인"
                    self.statusbar.showMessage(msg)
            except Exception as e:
                pass

            '''
            # 백그라운드 로봇작업 --> 추후 사용예정
            _temp = []
            for r in self.robots:
                if r.running == True:
                    _temp.append(r.Name)
            
            if current_str in ['09:01:00']:
                self.RobotRun()
                self.RobotView()

            if current_str in ['15:31:00']:
                self.SaveRobots()
                self.RobotView()

            if current_str[3:] in ['00:00', '30:00']:
                #ToYourTelegram("%s : 로봇 %s개가 실행중입니다. ([%s])" % (current_str, len(_temp), ','.join(_temp)))
                pass
            '''
            if current.minute % 10 == 0: # 매 10 분
                pass

    def closeEvent(self,event):

        dt = datetime.datetime.now()

        result = QMessageBox.question(self,"프로그램 종료","정말 종료하시겠습니까 ?", QMessageBox.Yes| QMessageBox.No)

        if result == QMessageBox.Yes:
            event.accept()

            self.connection.disconnect()

            if TARGET_MONTH_SELECT == 1:

                if SELFID == 'soojin65':
                    str = '[{0:02d}:{1:02d}:{2:02d}] ***님이 로그아웃 했습니다.'.format(adj_hour, adj_min, adj_sec)
                else:
                    str = '[{0:02d}:{1:02d}:{2:02d}] {3}님이 로그아웃 했습니다.'.format(adj_hour, adj_min, adj_sec, SELFID)

                #ToMyTelegram(str)
            else:
                pass

            self.clock.stop()
            #self.SaveRobots()
        else:
            event.ignore()

    def SaveRobots(self):
        for r in self.robots:
            r.Run(flag=False, parent=None)

        try:
            with open('mymoneybot.robot', 'wb') as handle:
                pickle.dump(self.robots, handle, protocol=pickle.HIGHEST_PROTOCOL)
        except Exception as e:
            print(e)
        finally:
            for r in self.robots:
                r.Run(flag=False, parent=self)

    def LoadRobots(self):
        with open('mymoneybot.robot', 'rb') as handle:
            try:
                self.robots = pickle.load(handle)
            except Exception as e:
                print(e)
            finally:
                pass

    def robot_selected(self, QModelIndex):
        Robot타입 = self.model._data[QModelIndex.row():QModelIndex.row()+1]['Robot타입'].values[0]

        uuid = self.model._data[QModelIndex.row():QModelIndex.row()+1]['RobotID'].values[0]
        portfolio = None
        for r in self.robots:
            if r.UUID == uuid:
                portfolio = r.portfolio
                model = PandasModel()
                result = []
                for p, v in portfolio.items():
                    result.append((v.종목코드, v.종목명.strip(), p, v.매수가, v.수량, v.매수일))
                self.portfolio_model.update((DataFrame(data=result, columns=['종목코드','종목명','TAG','매수가','수량','매수일'])))

                break

    def robot_double_clicked(self, QModelIndex):
        self.RobotEdit(QModelIndex)
        self.RobotView()

    def portfolio_selected(self, QModelIndex):
        pass

    def portfolio_double_clicked(self, QModelIndex):
        RobotUUID = self.model._data[self.tableView_robot_current_index.row():self.tableView_robot_current_index.row() + 1]['RobotID'].values[0]
        Portfolio라벨 = self.portfolio_model._data[self.tableView_portfolio_current_index.row():self.tableView_portfolio_current_index.row() + 1]['TAG'].values[0]

        for r in self.robots:
            if r.UUID == RobotUUID:
                portfolio_keys = list(r.portfolio.keys())
                for k in portfolio_keys:
                    if k == Portfolio라벨:
                        v = r.portfolio[k]
                        result = QMessageBox.question(self, "포트폴리오 종목 삭제", "[%s-%s] 을/를 삭제 하시겠습니까 ?" %(v.종목코드, v.종목명), QMessageBox.Yes | QMessageBox.No)
                        if result == QMessageBox.Yes:
                            r.portfolio.pop(Portfolio라벨)

                        self.PortfolioView()

    def RobotCurrentIndex(self, index):
        self.tableView_robot_current_index = index

    def RobotRun(self):
        for r in self.robots:
            r.초기조건()
            # logger.debug('%s %s %s %s' % (r.sName, r.UUID, len(r.portfolio), r.GetStatus()))
            r.Run(flag=True, parent=self)

    def RobotView(self):
        result = []
        for r in self.robots:
            result.append(r.getstatus())

        self.model.update(DataFrame(data=result, columns=self.robot_columns))

        # RobotID 숨김
        self.tableView_robot.setColumnHidden(2, True)

        for i in range(len(self.robot_columns)):
            self.tableView_robot.resizeColumnToContents(i)

    def RobotEdit(self, QModelIndex):
        Robot타입 = self.model._data[QModelIndex.row():QModelIndex.row()+1]['Robot타입'].values[0]
        RobotUUID = self.model._data[QModelIndex.row():QModelIndex.row()+1]['RobotID'].values[0]

        for r in self.robots:
            if r.UUID == RobotUUID:
                r.modal(parent=self)

    def PortfolioView(self):
        RobotUUID = self.model._data[self.tableView_robot_current_index.row():self.tableView_robot_current_index.row() + 1]['RobotID'].values[0]
        portfolio = None
        for r in self.robots:
            if r.UUID == RobotUUID:
                portfolio = r.portfolio
                # model = PandasModel()
                result = []
                for p, v in portfolio.items():
                    매수일 = "%s" % v.매수일
                    result.append((v.종목코드, v.종목명.strip(), p, v.매수가, v.수량, 매수일[:19]))

                df = DataFrame(data=result, columns=self.portfolio_columns)
                df = df.sort_values(['종목명'], ascending=True)
                self.portfolio_model.update(df)

                for i in range(len(self.portfolio_columns)):
                    self.tableView_portfolio.resizeColumnToContents(i)

    def PortfolioCurrentIndex(self, index):
        self.tableView_portfolio_current_index = index

    # ------------------------------------------------------------------------------------------------------------------
    def MyLogin(self):

        global SELFID

        계좌정보 = pd.read_csv("secret/passwords.csv", converters={'계좌번호': str, '거래비밀번호': str})

        if REAL_SERVER:
            주식계좌정보 = 계좌정보.query("구분 == '거래'")
            print('실서버에 접속합니다.')
        else:
            주식계좌정보 = 계좌정보.query("구분 == '모의'")
            print('모의서버에 접속합니다.')        

        if len(주식계좌정보) > 0:
            if self.connection is None:
                self.connection = XASession(parent=self)

            self.계좌번호 = 주식계좌정보['계좌번호'].values[0].strip()
            self.id = 주식계좌정보['사용자ID'].values[0].strip()
            SELFID = self.id
            self.pwd = 주식계좌정보['비밀번호'].values[0].strip()
            self.cert = 주식계좌정보['공인인증비밀번호'].values[0].strip()
            self.거래비밀번호 = 주식계좌정보['거래비밀번호'].values[0].strip()
            self.url = 주식계좌정보['url'].values[0].strip()
            self.connection.login(url=self.url, id=self.id, pwd=self.pwd, cert=self.cert)
        else:
            print("secret디렉토리의 passwords.csv 파일에서 거래 계좌를 지정해 주세요")

    def OnLogin(self, code, msg):        

        dt = datetime.datetime.now()

        if code == '0000':

            token = ''
            chat_id = 0

            if os.path.exists('secret/telegram_token.txt'):
                
                with open('secret/telegram_token.txt', mode='r') as tokenfile:
                    try:
                        token = tokenfile.readline().strip()

                    except Exception as e:
                        pass            

            if os.path.exists('secret/chatid.txt'):

                with open('secret/chatid.txt', mode='r') as chatfile:
                    try:
                        chat_id = int(chatfile.readline().strip())

                    except Exception as e:
                        pass

            if TARGET_MONTH_SELECT == 1:

                if token != '' and chat_id != 0:
                    str = '[{0:02d}:{1:02d}:{2:02d}] {3}님이 ({4}/{5}) 로그인 했습니다.'.format( \
                        dt.hour, dt.minute, dt.second, self.id, token, chat_id) 
                else:
                    if SELFID == 'soojin65':
                        str = '[{0:02d}:{1:02d}:{2:02d}] ***님이 로그인 했습니다.'.format(dt.hour, dt.minute, dt.second)
                    else:
                        pass
                
                #ToMyTelegram(str)
            else:
                pass            
            
            self.statusbar.showMessage("로그인 되었습니다.")

            # 옵션전광판 자동 시작
            if AUTO_START:                
                if self.dialog.get('당월물옵션전광판') is not None:

                    try:
                        self.dialog['당월물옵션전광판'].show()
                    except Exception as e:
                        self.dialog['당월물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                        self.dialog['당월물옵션전광판'].show()
                else:
                    self.dialog['당월물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['당월물옵션전광판'].show()

                self.dialog['당월물옵션전광판'].AddCode()
            else:
                pass
        else:
            self.statusbar.showMessage("%s %s" % (code, msg))

    def OnLogout(self):
        self.statusbar.showMessage("로그아웃 되었습니다.")

    def OnDisconnect(self):
        # 로봇 상태 저장
        self.SaveRobots()

        self.statusbar.showMessage("연결이 끊겼습니다.")

        self.connection.login(url='demo.ebestsec.co.kr', id=self.id, pwd=self.pwd, cert=self.cert)

    def OnReceiveMessage(self, systemError, messageCode, message):
        # 클래스이름 = self.__class__.__name__
        # 함수이름 = inspect.currentframe().f_code.co_name
        # print("%s-%s " % (클래스이름, 함수이름), systemError, messageCode, message)
        pass

    def OnReceiveData(self, szTrCode, result):

        global 서버시간, 시스템_서버_시간차, flag_heartbeat
        global SERVER_HOUR, SERVER_MIN, SERVER_SEC, server_x_idx

        dt = datetime.datetime.now()

        if szTrCode == 't0167':

            server_date, server_time = result
            
            systemtime = dt.hour * 3600 + dt.minute * 60 + dt.second

            SERVER_HOUR = int(server_time[0:2])
            SERVER_MIN = int(server_time[2:4])
            SERVER_SEC = int(server_time[4:6])

            서버시간 = SERVER_HOUR * 3600 + SERVER_MIN * 60 + SERVER_SEC            
            시스템_서버_시간차 = systemtime - 서버시간

            if NightTime:

                night_time = SERVER_HOUR

                if 0 <= night_time <= 6:
                    night_time = night_time + 24
                else:
                    pass

                server_x_idx = (night_time - NightTime_PreStart_Hour) * 60 + SERVER_MIN + 1         
            else:                    
                # 해외선물 개장시간은 국내시장의 2시간 전
                server_x_idx = (SERVER_HOUR - DayTime_PreStart_Hour) * 60 + SERVER_MIN + 1

            print('*** 서버시간 = [{0:02d}:{1:02d}:{2:02d}], 시스템시간 - 서버시간 = {3}초 ***\r'.format(SERVER_HOUR, SERVER_MIN, SERVER_SEC, 시스템_서버_시간차))

            flag_heartbeat = True                        
        else:
            pass

    def OnReceiveRealData(self, szTrCode, result):
        pass
    

    # ------------------------------------------------------------------------------------------------------------------
    def MENU_Action(self, qaction):
        logger.debug("Action Slot %s %s " % (qaction.objectName(), qaction.text()))
        _action = qaction.objectName()

        if _action == "actionExit":
            self.connection.disconnect()
            self.close()

        if _action == "actionLogin":
            self.MyLogin()

        if _action == "actionLogout":
            #self.connection.logout()
            self.connection.disconnect()
            self.statusbar.showMessage("접속종료 되었습니다.")

        # 일별가격정보 백업
        if _action == "actionPriceBackupDay":
            if self.dialog.get('일별가격정보백업') is not None:
                try:
                    self.dialog['일별가격정보백업'].show()
                except Exception as e:
                    self.dialog['일별가격정보백업'] = 화면_일별가격정보백업(parent=self)
                    self.dialog['일별가격정보백업'].show()
            else:
                self.dialog['일별가격정보백업'] = 화면_일별가격정보백업(parent=self)
                self.dialog['일별가격정보백업'].show()

        # 분별가격정보 백업
        if _action == "actionPriceBackupMin":
            if self.dialog.get('분별가격정보백업') is not None:
                try:
                    self.dialog['분별가격정보백업'].show()
                except Exception as e:
                    self.dialog['분별가격정보백업'] = 화면_분별가격정보백업(parent=self)
                    self.dialog['분별가격정보백업'].show()
            else:
                self.dialog['분별가격정보백업'] = 화면_분별가격정보백업(parent=self)
                self.dialog['분별가격정보백업'].show()

        # 일별업종정보 백업
        if _action == "actionSectorBackupDay":
            if self.dialog.get('일별업종정보백업') is not None:
                try:
                    self.dialog['일별업종정보백업'].show()
                except Exception as e:
                    self.dialog['일별업종정보백업'] = 화면_일별업종정보백업(parent=self)
                    self.dialog['일별업종정보백업'].show()
            else:
                self.dialog['일별업종정보백업'] = 화면_일별업종정보백업(parent=self)
                self.dialog['일별업종정보백업'].show()

        # 종목별 투자자정보 백업
        if _action == "actionInvestorBackup":
            if self.dialog.get('종목별투자자정보백업') is not None:
                try:
                    self.dialog['종목별투자자정보백업'].show()
                except Exception as e:
                    self.dialog['종목별투자자정보백업'] = 화면_종목별투자자정보백업(parent=self)
                    self.dialog['종목별투자자정보백업'].show()
            else:
                self.dialog['종목별투자자정보백업'] = 화면_종목별투자자정보백업(parent=self)
                self.dialog['종목별투자자정보백업'].show()

        # 종목코드 조회/저장
        if _action == "actionStockcode":
            if self.dialog.get('종목코드조회') is not None:
                try:
                    self.dialog['종목코드조회'].show()
                except Exception as e:
                    self.dialog['종목코드조회'] = 화면_종목코드(parent=self)
                    self.dialog['종목코드조회'].show()
            else:
                self.dialog['종목코드조회'] = 화면_종목코드(parent=self)
                self.dialog['종목코드조회'].show()

        # 거래결과
        if _action == "actionTool2ebest":
            if self.dialog.get('외부신호2eBEST') is not None:
                try:
                    self.dialog['외부신호2eBEST'].show()
                except Exception as e:
                    self.dialog['외부신호2eBEST'] = 화면_외부신호2eBEST(parent=self)
                    self.dialog['외부신호2eBEST'].show()
            else:
                self.dialog['외부신호2eBEST'] = 화면_외부신호2eBEST(parent=self)
                self.dialog['외부신호2eBEST'].show()

        if _action == "actionTradeResult":
            if self.dialog.get('거래결과') is not None:
                try:
                    self.dialog['거래결과'].show()
                except Exception as e:
                    self.dialog['거래결과'] = 화면_거래결과(parent=self)
                    self.dialog['거래결과'].show()
            else:
                self.dialog['거래결과'] = 화면_거래결과(parent=self)
                self.dialog['거래결과'].show()

        # 일자별 주가
        if _action == "actionDailyPrice":
            if self.dialog.get('일자별주가') is not None:
                try:
                    self.dialog['일자별주가'].show()
                except Exception as e:
                    self.dialog['일자별주가'] = 화면_일별주가(parent=self)
                    self.dialog['일자별주가'].show()
            else:
                self.dialog['일자별주가'] = 화면_일별주가(parent=self)
                self.dialog['일자별주가'].show()

        # 분별 주가
        if _action == "actionMinuitePrice":
            if self.dialog.get('분별주가') is not None:
                try:
                    self.dialog['분별주가'].show()
                except Exception as e:
                    self.dialog['분별주가'] = 화면_분별주가(parent=self)
                    self.dialog['분별주가'].show()
            else:
                self.dialog['분별주가'] = 화면_분별주가(parent=self)
                self.dialog['분별주가'].show()

        # 업종정보
        if _action == "actionSectorView":
            if self.dialog.get('업종정보조회') is not None:
                try:
                    self.dialog['업종정보조회'].show()
                except Exception as e:
                    self.dialog['업종정보조회'] = 화면_업종정보(parent=self)
                    self.dialog['업종정보조회'].show()
            else:
                self.dialog['업종정보조회'] = 화면_업종정보(parent=self)
                self.dialog['업종정보조회'].show()

        # 테마정보
        if _action == "actionTheme":
            if self.dialog.get('테마정보조회') is not None:
                try:
                    self.dialog['테마정보조회'].show()
                except Exception as e:
                    self.dialog['테마정보조회'] = 화면_테마정보(parent=self)
                    self.dialog['테마정보조회'].show()
            else:
                self.dialog['테마정보조회'] = 화면_테마정보(parent=self)
                self.dialog['테마정보조회'].show()

        # 종목별 투자자
        if _action == "actionInvestors":
            if self.dialog.get('종목별투자자') is not None:
                try:
                    self.dialog['종목별투자자'].show()
                except Exception as e:
                    self.dialog['종목별투자자'] = 화면_종목별투자자(parent=self)
                    self.dialog['종목별투자자'].show()
            else:
                self.dialog['종목별투자자'] = 화면_종목별투자자(parent=self)
                self.dialog['종목별투자자'].show()

        # 종목별 투자자2
        if _action == "actionInvestors2":
            if self.dialog.get('종목별투자자2') is not None:
                try:
                    self.dialog['종목별투자자2'].show()
                except Exception as e:
                    self.dialog['종목별투자자2'] = 화면_종목별투자자2(parent=self)
                    self.dialog['종목별투자자2'].show()
            else:
                self.dialog['종목별투자자2'] = 화면_종목별투자자2(parent=self)
                self.dialog['종목별투자자2'].show()

        # 호가창정보
        if _action == "actionAskBid":
            if self.dialog.get('호가창정보') is not None:
                try:
                    self.dialog['호가창정보'].show()
                except Exception as e:
                    self.dialog['호가창정보'] = 화면_호가창정보(parent=self)
                    self.dialog['호가창정보'].show()
            else:
                self.dialog['호가창정보'] = 화면_호가창정보(parent=self)
                self.dialog['호가창정보'].show()

        # 실시간정보
        if _action == "actionRealDataDialog":
            if self.dialog.get('실시간정보') is not None:
                try:
                    self.dialog['실시간정보'].show()
                except Exception as e:
                    self.dialog['실시간정보'] = 화면_실시간정보(parent=self)
                    self.dialog['실시간정보'].show()
            else:
                self.dialog['실시간정보'] = 화면_실시간정보(parent=self)
                self.dialog['실시간정보'].show()

        # 뉴스
        if _action == "actionNews":
            if self.dialog.get('뉴스') is not None:
                try:
                    self.dialog['뉴스'].show()
                except Exception as e:
                    self.dialog['뉴스'] = 화면_뉴스(parent=self)
                    self.dialog['뉴스'].show()
            else:
                self.dialog['뉴스'] = 화면_뉴스(parent=self)
                self.dialog['뉴스'].show()

        # 계좌정보 조회
        if _action == "actionAccountDialog":
            if self.dialog.get('계좌정보조회') is not None:
                try:
                    self.dialog['계좌정보조회'].show()
                except Exception as e:
                    self.dialog['계좌정보조회'] = 화면_계좌정보(parent=self)
                    self.dialog['계좌정보조회'].show()
            else:
                self.dialog['계좌정보조회'] = 화면_계좌정보(parent=self)
                self.dialog['계좌정보조회'].show()

        # 차트인덱스
        if _action == "actionChartIndex":
            if self.dialog.get('차트인덱스') is not None:
                try:
                    self.dialog['차트인덱스'].show()
                except Exception as e:
                    self.dialog['차트인덱스'] = 화면_차트인덱스(parent=self)
                    self.dialog['차트인덱스'].show()
            else:
                self.dialog['차트인덱스'] = 화면_차트인덱스(parent=self)
                self.dialog['차트인덱스'].show()

        # 종목검색
        if _action == "actionSearchItems":
            if self.dialog.get('종목검색') is not None:
                try:
                    self.dialog['종목검색'].show()
                except Exception as e:
                    self.dialog['종목검색'] = 화면_종목검색(parent=self)
                    self.dialog['종목검색'].show()
            else:
                self.dialog['종목검색'] = 화면_종목검색(parent=self)
                self.dialog['종목검색'].show()

        # e종목검색
        if _action == "actionESearchItems":
            if self.dialog.get('e종목검색') is not None:
                try:
                    self.dialog['e종목검색'].show()
                except Exception as e:
                    self.dialog['e종목검색'] = 화면_e종목검색(parent=self)
                    self.dialog['e종목검색'].show()
            else:
                self.dialog['e종목검색'] = 화면_e종목검색(parent=self)
                self.dialog['e종목검색'].show()

        if _action == "actionOpenScreen":
            XQ = t8430(parent=self)
            XQ.Query(구분='0')

            res = XQ.RequestLinkToHTS("&STOCK_CODE", "069500", "")

        # 주문테스트
        if _action == "actionOrder":
            if self.dialog.get('주문테스트') is not None:
                try:
                    self.dialog['주문테스트'].show()
                except Exception as e:
                    self.dialog['주문테스트'] = 화면_주문테스트(parent=self)
                    self.dialog['주문테스트'].show()
            else:
                self.dialog['주문테스트'] = 화면_주문테스트(parent=self)
                self.dialog['주문테스트'].show()

        # 사용법
        if _action == "actionMustRead":
            webbrowser.open('https://thinkpoolost.wixsite.com/moneybot')

        if _action == "actionUsage":
            webbrowser.open('https://docs.google.com/document/d/1BGENxWqJyZdihQFuWcmTNy3_4J0kHolCc-qcW3RULzs/edit')

        if _action == "actionVersion":
            if self.dialog.get('Version') is not None:
                try:
                    self.dialog['Version'].show()
                except Exception as e:
                    self.dialog['Version'] = 화면_버전(parent=self)
                    self.dialog['Version'].show()
            else:
                self.dialog['Version'] = 화면_버전(parent=self)
                self.dialog['Version'].show()

        if _action == "actionRobotLoad":
            reply = QMessageBox.question(self, "로봇 탑제", "저장된 로봇을 읽어올까요?", QMessageBox.Yes | QMessageBox.Cancel)
            if reply == QMessageBox.Cancel:
                pass
            elif reply == QMessageBox.Yes:
                self.LoadRobots()

            self.RobotView()

        elif _action == "actionRobotSave":
            reply = QMessageBox.question(self, "로봇 저장", "현재 로봇을 저장할까요?",
                                         QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
            if reply == QMessageBox.Cancel:
                pass
            elif reply == QMessageBox.No:
                pass
            elif reply == QMessageBox.Yes:
                self.SaveRobots()

            self.RobotView()

        elif _action == "actionRobotOneRun":
            try:
                RobotUUID = self.model._data[self.tableView_robot_current_index.row():self.tableView_robot_current_index.row() + 1]['RobotID'].values[0]
            except Exception as e:
                RobotUUID = ''

            robot_found = None
            for r in self.robots:
                if r.UUID == RobotUUID:
                    robot_found = r
                    break

            if robot_found == None:
                return

            robot_found.Run(flag=True, parent=self)

            self.RobotView()

        elif _action == "actionRobotOneStop":
            try:
                RobotUUID = self.model._data[self.tableView_robot_current_index.row():self.tableView_robot_current_index.row() + 1]['RobotID'].values[0]
            except Exception as e:
                RobotUUID = ''

            robot_found = None
            for r in self.robots:
                if r.UUID == RobotUUID:
                    robot_found = r
                    break

            if robot_found == None:
                return

            reply = QMessageBox.question(self,"로봇 실행 중지", "로봇 실행을 중지할까요?\n%s" % robot_found.getstatus(),QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
            if reply == QMessageBox.Cancel:
                pass
            elif reply == QMessageBox.No:
                pass
            elif reply == QMessageBox.Yes:
                robot_found.Run(flag=False, parent=None)

            self.RobotView()

        elif _action == "actionRobotRun":
            self.RobotRun()
            self.RobotView()

        elif _action == "actionRobotStop":
            reply = QMessageBox.question(self,"전체 로봇 실행 중지", "전체 로봇 실행을 중지할까요?",QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
            if reply == QMessageBox.Cancel:
                pass
            elif reply == QMessageBox.No:
                pass
            elif reply == QMessageBox.Yes:
                for r in self.robots:
                    r.Run(flag=False, parent=None)

            self.RobotView()

        elif _action == "actionRobotRemove":
            try:
                RobotUUID = self.model._data[self.tableView_robot_current_index.row():self.tableView_robot_current_index.row() + 1]['RobotID'].values[0]

                robot_found = None
                for r in self.robots:
                    if r.UUID == RobotUUID:
                        robot_found = r
                        break

                if robot_found == None:
                    return

                reply = QMessageBox.question(self, "로봇 삭제", "로봇을 삭제할까요?\n%s" % robot_found.getstatus()[0:4], QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
                if reply == QMessageBox.Cancel:
                    pass
                elif reply == QMessageBox.No:
                    pass
                elif reply == QMessageBox.Yes:
                    self.robots.remove(robot_found)

                self.RobotView()
            except Exception as e:
                pass

        elif _action == "actionRobotClear":
            reply = QMessageBox.question(self, "로봇 전체 삭제", "로봇 전체를 삭제할까요?",
                                         QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
            if reply == QMessageBox.Cancel:
                pass
            elif reply == QMessageBox.No:
                pass
            elif reply == QMessageBox.Yes:
                self.robots = []

            self.RobotView()

        elif _action == "actionRobotView":
            self.RobotView()
            for r in self.robots:
                logger.debug('%s %s %s %s' % (r.Name, r.UUID, len(r.portfolio), r.getstatus()))
        '''
        if _action in self.plugins.keys():
            robot = self.plugins[_action].instance()
            robot.set_database(database=DATABASE)
            robot.set_secret(계좌번호=self.계좌번호, 비밀번호=self.거래비밀번호)
            ret = robot.modal(parent=self)
            if ret == 1:
                self.robots.append(robot)
            self.RobotView()
        '''
        # 당월물 옵션전광판
        if _action == "actionCMOptionPrice":
            
            if self.dialog.get('당월물옵션전광판') is not None:

                try:
                    self.dialog['당월물옵션전광판'].show()
                except Exception as e:
                    self.dialog['당월물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                    self.dialog['당월물옵션전광판'].show()
            else:
                self.dialog['당월물옵션전광판'] = 화면_선물옵션전광판(parent=self)
                self.dialog['당월물옵션전광판'].show()

        # Big Chart
        if _action == "actionBigChart":
            
            if self.dialog.get('BigChart') is not None:

                try:
                    self.dialog['BigChart'].show()
                except Exception as e:
                    self.dialog['BigChart'] = 화면_BigChart(parent=self)
                    self.dialog['BigChart'].show()
            else:
                self.dialog['BigChart'] = 화면_BigChart(parent=self)
                self.dialog['BigChart'].show()

    # ------------------------------------------------------------

if __name__ == "__main__":
    # Window 8, 10
    # Window 7은 한글을 못읽음
    # Speak("스카이봇이 시작됩니다.")

    #ToYourTelegram("SkyBot이 실행되었습니다.")

    # 1.로그 인스턴스를 만든다.
    logger = logging.getLogger('mymoneybot')
    # 2.formatter를 만든다.
    formatter = logging.Formatter('[%(levelname)s|%(filename)s:%(lineno)s]%(asctime)s>%(message)s')

    loggerLevel = logging.DEBUG
    filename = "LOG/mymoneybot.log"

    # 스트림과 파일로 로그를 출력하는 핸들러를 각각 만든다.
    filehandler = logging.FileHandler(filename)
    streamhandler = logging.StreamHandler()

    # 각 핸들러에 formatter를 지정한다.
    filehandler.setFormatter(formatter)
    streamhandler.setFormatter(formatter)

    # 로그 인스턴스에 스트림 핸들러와 파일 핸들러를 붙인다.
    logger.addHandler(filehandler)
    logger.addHandler(streamhandler)
    logger.setLevel(loggerLevel)
    logger.debug("=============================================================================")
    logger.info("LOG START")

    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(True)

    window = MainWindow()

    if MODERN_WINDOW_DARK_STYLE:
        qtmodern.styles.dark(app)
        win = qtmodern.windows.ModernWindow(window)        
        win.show()
    else:
        window.show()

    QTimer().singleShot(1, window.OnQApplicationStarted)

    sys.exit(app.exec_())